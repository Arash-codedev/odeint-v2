<?xml version="1.0" standalone="yes"?>
<library-reference id="odeint_reference"><title>odeint Reference</title><header name="boost/numeric/odeint.hpp"/><header name="boost/numeric/odeint/algebra/array_algebra.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><struct name="array_algebra"><method-group name="public static functions"><method name="for_each1" cv=""><type>static void</type><template>
          <template-type-parameter name="T"/>
          <template-nontype-parameter name="dim"><type>size_t</type></template-nontype-parameter>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each10" cv=""><type>static void</type><template>
          <template-type-parameter name="T"/>
          <template-nontype-parameter name="dim"><type>size_t</type></template-nontype-parameter>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s2"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s3"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s4"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s5"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s6"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s7"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s8"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s9"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s10"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each11" cv=""><type>static void</type><template>
          <template-type-parameter name="T"/>
          <template-nontype-parameter name="dim"><type>size_t</type></template-nontype-parameter>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s2"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s3"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s4"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s5"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s6"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s7"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s8"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s9"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s10"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s11"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each12" cv=""><type>static void</type><template>
          <template-type-parameter name="T"/>
          <template-nontype-parameter name="dim"><type>size_t</type></template-nontype-parameter>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s2"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s3"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s4"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s5"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s6"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s7"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s8"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s9"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s10"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s11"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s12"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each13" cv=""><type>static void</type><template>
          <template-type-parameter name="T"/>
          <template-nontype-parameter name="dim"><type>size_t</type></template-nontype-parameter>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s2"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s3"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s4"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s5"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s6"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s7"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s8"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s9"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s10"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s11"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s12"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s13"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each14" cv=""><type>static void</type><template>
          <template-type-parameter name="T"/>
          <template-nontype-parameter name="dim"><type>size_t</type></template-nontype-parameter>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s2"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s3"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s4"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s5"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s6"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s7"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s8"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s9"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s10"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s11"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s12"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s13"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s14"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each15" cv=""><type>static void</type><template>
          <template-type-parameter name="T"/>
          <template-nontype-parameter name="dim"><type>size_t</type></template-nontype-parameter>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s2"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s3"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s4"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s5"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s6"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s7"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s8"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s9"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s10"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s11"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s12"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s13"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s14"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s15"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each2" cv=""><type>static void</type><template>
          <template-type-parameter name="T1"/>
          <template-type-parameter name="T2"/>
          <template-nontype-parameter name="dim"><type>size_t</type></template-nontype-parameter>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>boost::array&lt; T1, dim &gt; &amp;</paramtype></parameter><parameter name="s2"><paramtype>const boost::array&lt; T2, dim &gt; &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each3" cv=""><type>static void</type><template>
          <template-type-parameter name="T"/>
          <template-nontype-parameter name="dim"><type>size_t</type></template-nontype-parameter>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s2"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s3"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each3" cv=""><type>static void</type><template>
          <template-type-parameter name="T"/>
          <template-nontype-parameter name="dim"><type>size_t</type></template-nontype-parameter>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s2"><paramtype>boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s3"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each4" cv=""><type>static void</type><template>
          <template-type-parameter name="T"/>
          <template-nontype-parameter name="dim"><type>size_t</type></template-nontype-parameter>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s2"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s3"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s4"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each5" cv=""><type>static void</type><template>
          <template-type-parameter name="T"/>
          <template-nontype-parameter name="dim"><type>size_t</type></template-nontype-parameter>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s2"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s3"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s4"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s5"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each6" cv=""><type>static void</type><template>
          <template-type-parameter name="T"/>
          <template-nontype-parameter name="dim"><type>size_t</type></template-nontype-parameter>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s2"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s3"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s4"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s5"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s6"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each7" cv=""><type>static void</type><template>
          <template-type-parameter name="T"/>
          <template-nontype-parameter name="dim"><type>size_t</type></template-nontype-parameter>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s2"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s3"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s4"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s5"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s6"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s7"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each8" cv=""><type>static void</type><template>
          <template-type-parameter name="T"/>
          <template-nontype-parameter name="dim"><type>size_t</type></template-nontype-parameter>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s2"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s3"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s4"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s5"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s6"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s7"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s8"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each9" cv=""><type>static void</type><template>
          <template-type-parameter name="T"/>
          <template-nontype-parameter name="dim"><type>size_t</type></template-nontype-parameter>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s2"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s3"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s4"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s5"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s6"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s7"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s8"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="s9"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="reduce" cv=""><type>static Value</type><template>
          <template-type-parameter name="Value"/>
          <template-type-parameter name="T"/>
          <template-nontype-parameter name="dim"><type>size_t</type></template-nontype-parameter>
          <template-type-parameter name="Red"/>
        </template><parameter name="s"><paramtype>const boost::array&lt; T, dim &gt; &amp;</paramtype></parameter><parameter name="red"><paramtype>Red</paramtype></parameter><parameter name="init"><paramtype>Value</paramtype></parameter></method></method-group></struct></namespace></namespace></namespace></header><header name="boost/numeric/odeint/algebra/default_operations.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><struct name="default_operations"><struct name="default_rel_error"><template>
      <template-type-parameter name="Fac1"><default>double</default></template-type-parameter>
    </template><typedef name="result_type"><type>void</type></typedef><data-member name="m_eps_abs"><type>const Fac1</type></data-member><data-member name="m_eps_rel"><type>const Fac1</type></data-member><method-group name="public member functions"><method name="operator()" cv="const"><type>void</type><template>
          <template-type-parameter name="T1"/>
          <template-type-parameter name="T2"/>
          <template-type-parameter name="T3"/>
        </template><parameter name="t3"><paramtype>T3 &amp;</paramtype></parameter><parameter name="t1"><paramtype>const T1 &amp;</paramtype></parameter><parameter name="t2"><paramtype>const T2 &amp;</paramtype></parameter></method></method-group><constructor><parameter name="eps_abs"><paramtype>Fac1</paramtype></parameter><parameter name="eps_rel"><paramtype>Fac1</paramtype></parameter></constructor></struct><struct name="maximum"><template>
      <template-type-parameter name="Value"/>
    </template><typedef name="result_type"><type>Value</type></typedef><method-group name="public member functions"><method name="operator()" cv="const"><type>Value</type><template>
          <template-type-parameter name="Fac1"/>
          <template-type-parameter name="Fac2"/>
        </template><parameter name="t1"><paramtype>Fac1</paramtype></parameter><parameter name="t2"><paramtype>const Fac2</paramtype></parameter></method></method-group></struct><struct name="rel_error"><template>
      <template-type-parameter name="Fac1"><default>double</default></template-type-parameter>
    </template><typedef name="result_type"><type>void</type></typedef><data-member name="m_a_dxdt"><type>const Fac1</type></data-member><data-member name="m_a_x"><type>const Fac1</type></data-member><data-member name="m_eps_abs"><type>const Fac1</type></data-member><data-member name="m_eps_rel"><type>const Fac1</type></data-member><method-group name="public member functions"><method name="operator()" cv="const"><type>void</type><template>
          <template-type-parameter name="T1"/>
          <template-type-parameter name="T2"/>
          <template-type-parameter name="T3"/>
        </template><parameter name="t3"><paramtype>T3 &amp;</paramtype></parameter><parameter name="t1"><paramtype>const T1 &amp;</paramtype></parameter><parameter name="t2"><paramtype>const T2 &amp;</paramtype></parameter></method></method-group><constructor><parameter name="eps_abs"><paramtype>Fac1</paramtype></parameter><parameter name="eps_rel"><paramtype>Fac1</paramtype></parameter><parameter name="a_x"><paramtype>Fac1</paramtype></parameter><parameter name="a_dxdt"><paramtype>Fac1</paramtype></parameter></constructor></struct><struct name="rel_error_l2"><template>
      <template-type-parameter name="Fac1"><default>double</default></template-type-parameter>
    </template><data-member name="m_eps_abs"><type>const Fac1</type></data-member><data-member name="m_eps_rel"><type>const Fac1</type></data-member><method-group name="public member functions"><method name="operator()" cv=""><type>Res</type><template>
          <template-type-parameter name="Res"/>
          <template-type-parameter name="T1"/>
          <template-type-parameter name="T2"/>
          <template-type-parameter name="T3"/>
        </template><parameter name="r"><paramtype>Res</paramtype></parameter><parameter name="x_old"><paramtype>const T1 &amp;</paramtype></parameter><parameter name="x"><paramtype>const T2 &amp;</paramtype></parameter><parameter name="x_err"><paramtype>const T3 &amp;</paramtype></parameter></method></method-group><constructor><parameter name="eps_abs"><paramtype>Fac1</paramtype></parameter><parameter name="eps_rel"><paramtype>Fac1</paramtype></parameter></constructor></struct><struct name="rel_error_l2_2"><template>
      <template-type-parameter name="Fac1"><default>double</default></template-type-parameter>
    </template><data-member name="m_a_dxdt"><type>const Fac1</type></data-member><data-member name="m_a_x"><type>const Fac1</type></data-member><data-member name="m_eps_abs"><type>const Fac1</type></data-member><data-member name="m_eps_rel"><type>const Fac1</type></data-member><method-group name="public member functions"><method name="operator()" cv=""><type>Res</type><template>
          <template-type-parameter name="Res"/>
          <template-type-parameter name="T1"/>
          <template-type-parameter name="T2"/>
          <template-type-parameter name="T3"/>
          <template-type-parameter name="T4"/>
        </template><parameter name="r"><paramtype>Res</paramtype></parameter><parameter name="x_old"><paramtype>const T1 &amp;</paramtype></parameter><parameter name="x"><paramtype>const T2 &amp;</paramtype></parameter><parameter name="dxdt_old"><paramtype>const T3 &amp;</paramtype></parameter><parameter name="x_err"><paramtype>const T4 &amp;</paramtype></parameter></method></method-group><constructor><parameter name="eps_abs"><paramtype>Fac1</paramtype></parameter><parameter name="eps_rel"><paramtype>Fac1</paramtype></parameter><parameter name="a_x"><paramtype>Fac1</paramtype></parameter><parameter name="a_dxdt"><paramtype>Fac1</paramtype></parameter></constructor></struct><struct name="rel_error_max"><template>
      <template-type-parameter name="Fac1"><default>double</default></template-type-parameter>
    </template><data-member name="m_eps_abs"><type>const Fac1</type></data-member><data-member name="m_eps_rel"><type>const Fac1</type></data-member><method-group name="public member functions"><method name="operator()" cv=""><type>Res</type><template>
          <template-type-parameter name="Res"/>
          <template-type-parameter name="T1"/>
          <template-type-parameter name="T2"/>
          <template-type-parameter name="T3"/>
        </template><parameter name="r"><paramtype>Res</paramtype></parameter><parameter name="x_old"><paramtype>const T1 &amp;</paramtype></parameter><parameter name="x"><paramtype>const T2 &amp;</paramtype></parameter><parameter name="x_err"><paramtype>const T3 &amp;</paramtype></parameter></method></method-group><constructor><parameter name="eps_abs"><paramtype>Fac1</paramtype></parameter><parameter name="eps_rel"><paramtype>Fac1</paramtype></parameter></constructor></struct><struct name="rel_error_max2"><template>
      <template-type-parameter name="Fac1"><default>double</default></template-type-parameter>
    </template><data-member name="m_a_dxdt"><type>const Fac1</type></data-member><data-member name="m_a_x"><type>const Fac1</type></data-member><data-member name="m_eps_abs"><type>const Fac1</type></data-member><data-member name="m_eps_rel"><type>const Fac1</type></data-member><method-group name="public member functions"><method name="operator()" cv=""><type>Res</type><template>
          <template-type-parameter name="Res"/>
          <template-type-parameter name="T1"/>
          <template-type-parameter name="T2"/>
          <template-type-parameter name="T3"/>
          <template-type-parameter name="T4"/>
        </template><parameter name="r"><paramtype>Res</paramtype></parameter><parameter name="x_old"><paramtype>const T1 &amp;</paramtype></parameter><parameter name="x"><paramtype>const T2 &amp;</paramtype></parameter><parameter name="dxdt_old"><paramtype>const T3 &amp;</paramtype></parameter><parameter name="x_err"><paramtype>const T4 &amp;</paramtype></parameter></method></method-group><constructor><parameter name="eps_abs"><paramtype>Fac1</paramtype></parameter><parameter name="eps_rel"><paramtype>Fac1</paramtype></parameter><parameter name="a_x"><paramtype>Fac1</paramtype></parameter><parameter name="a_dxdt"><paramtype>Fac1</paramtype></parameter></constructor></struct><struct name="scale"><template>
      <template-type-parameter name="Fac1"><default>double</default></template-type-parameter>
    </template><typedef name="result_type"><type>void</type></typedef><data-member name="m_alpha1"><type>const Fac1</type></data-member><method-group name="public member functions"><method name="operator()" cv="const"><type>void</type><template>
          <template-type-parameter name="T1"/>
        </template><parameter name="t1"><paramtype>T1 &amp;</paramtype></parameter></method></method-group><constructor><parameter name="alpha1"><paramtype>Fac1</paramtype></parameter></constructor></struct><struct name="scale_sum1"><template>
      <template-type-parameter name="Fac1"><default>double</default></template-type-parameter>
    </template><typedef name="result_type"><type>void</type></typedef><data-member name="m_alpha1"><type>const Fac1</type></data-member><method-group name="public member functions"><method name="operator()" cv="const"><type>void</type><template>
          <template-type-parameter name="T1"/>
          <template-type-parameter name="T2"/>
        </template><parameter name="t1"><paramtype>T1 &amp;</paramtype></parameter><parameter name="t2"><paramtype>const T2 &amp;</paramtype></parameter></method></method-group><constructor><parameter name="alpha1"><paramtype>Fac1</paramtype></parameter></constructor></struct><struct name="scale_sum10"><template>
      <template-type-parameter name="Fac1"><default>double</default></template-type-parameter>
      <template-type-parameter name="Fac2"><default>Fac1</default></template-type-parameter>
      <template-type-parameter name="Fac3"><default>Fac2</default></template-type-parameter>
      <template-type-parameter name="Fac4"><default>Fac3</default></template-type-parameter>
      <template-type-parameter name="Fac5"><default>Fac4</default></template-type-parameter>
      <template-type-parameter name="Fac6"><default>Fac5</default></template-type-parameter>
      <template-type-parameter name="Fac7"><default>Fac6</default></template-type-parameter>
      <template-type-parameter name="Fac8"><default>Fac7</default></template-type-parameter>
      <template-type-parameter name="Fac9"><default>Fac8</default></template-type-parameter>
      <template-type-parameter name="Fac10"><default>Fac9</default></template-type-parameter>
    </template><typedef name="result_type"><type>void</type></typedef><data-member name="m_alpha1"><type>const Fac1</type></data-member><data-member name="m_alpha10"><type>const Fac10</type></data-member><data-member name="m_alpha2"><type>const Fac2</type></data-member><data-member name="m_alpha3"><type>const Fac3</type></data-member><data-member name="m_alpha4"><type>const Fac4</type></data-member><data-member name="m_alpha5"><type>const Fac5</type></data-member><data-member name="m_alpha6"><type>const Fac6</type></data-member><data-member name="m_alpha7"><type>const Fac7</type></data-member><data-member name="m_alpha8"><type>const Fac8</type></data-member><data-member name="m_alpha9"><type>const Fac9</type></data-member><method-group name="public member functions"><method name="operator()" cv="const"><type>void</type><template>
          <template-type-parameter name="T1"/>
          <template-type-parameter name="T2"/>
          <template-type-parameter name="T3"/>
          <template-type-parameter name="T4"/>
          <template-type-parameter name="T5"/>
          <template-type-parameter name="T6"/>
          <template-type-parameter name="T7"/>
          <template-type-parameter name="T8"/>
          <template-type-parameter name="T9"/>
          <template-type-parameter name="T10"/>
          <template-type-parameter name="T11"/>
        </template><parameter name="t1"><paramtype>T1 &amp;</paramtype></parameter><parameter name="t2"><paramtype>const T2 &amp;</paramtype></parameter><parameter name="t3"><paramtype>const T3 &amp;</paramtype></parameter><parameter name="t4"><paramtype>const T4 &amp;</paramtype></parameter><parameter name="t5"><paramtype>const T5 &amp;</paramtype></parameter><parameter name="t6"><paramtype>const T6 &amp;</paramtype></parameter><parameter name="t7"><paramtype>const T7 &amp;</paramtype></parameter><parameter name="t8"><paramtype>const T8 &amp;</paramtype></parameter><parameter name="t9"><paramtype>const T9 &amp;</paramtype></parameter><parameter name="t10"><paramtype>const T10 &amp;</paramtype></parameter><parameter name="t11"><paramtype>const T11 &amp;</paramtype></parameter></method></method-group><constructor><parameter name="alpha1"><paramtype>Fac1</paramtype></parameter><parameter name="alpha2"><paramtype>Fac2</paramtype></parameter><parameter name="alpha3"><paramtype>Fac3</paramtype></parameter><parameter name="alpha4"><paramtype>Fac4</paramtype></parameter><parameter name="alpha5"><paramtype>Fac5</paramtype></parameter><parameter name="alpha6"><paramtype>Fac6</paramtype></parameter><parameter name="alpha7"><paramtype>Fac7</paramtype></parameter><parameter name="alpha8"><paramtype>Fac8</paramtype></parameter><parameter name="alpha9"><paramtype>Fac9</paramtype></parameter><parameter name="alpha10"><paramtype>Fac10</paramtype></parameter></constructor></struct><struct name="scale_sum11"><template>
      <template-type-parameter name="Fac1"><default>double</default></template-type-parameter>
      <template-type-parameter name="Fac2"><default>Fac1</default></template-type-parameter>
      <template-type-parameter name="Fac3"><default>Fac2</default></template-type-parameter>
      <template-type-parameter name="Fac4"><default>Fac3</default></template-type-parameter>
      <template-type-parameter name="Fac5"><default>Fac4</default></template-type-parameter>
      <template-type-parameter name="Fac6"><default>Fac5</default></template-type-parameter>
      <template-type-parameter name="Fac7"><default>Fac6</default></template-type-parameter>
      <template-type-parameter name="Fac8"><default>Fac7</default></template-type-parameter>
      <template-type-parameter name="Fac9"><default>Fac8</default></template-type-parameter>
      <template-type-parameter name="Fac10"><default>Fac9</default></template-type-parameter>
      <template-type-parameter name="Fac11"><default>Fac10</default></template-type-parameter>
    </template><typedef name="result_type"><type>void</type></typedef><data-member name="m_alpha1"><type>const Fac1</type></data-member><data-member name="m_alpha10"><type>const Fac10</type></data-member><data-member name="m_alpha11"><type>const Fac11</type></data-member><data-member name="m_alpha2"><type>const Fac2</type></data-member><data-member name="m_alpha3"><type>const Fac3</type></data-member><data-member name="m_alpha4"><type>const Fac4</type></data-member><data-member name="m_alpha5"><type>const Fac5</type></data-member><data-member name="m_alpha6"><type>const Fac6</type></data-member><data-member name="m_alpha7"><type>const Fac7</type></data-member><data-member name="m_alpha8"><type>const Fac8</type></data-member><data-member name="m_alpha9"><type>const Fac9</type></data-member><method-group name="public member functions"><method name="operator()" cv="const"><type>void</type><template>
          <template-type-parameter name="T1"/>
          <template-type-parameter name="T2"/>
          <template-type-parameter name="T3"/>
          <template-type-parameter name="T4"/>
          <template-type-parameter name="T5"/>
          <template-type-parameter name="T6"/>
          <template-type-parameter name="T7"/>
          <template-type-parameter name="T8"/>
          <template-type-parameter name="T9"/>
          <template-type-parameter name="T10"/>
          <template-type-parameter name="T11"/>
          <template-type-parameter name="T12"/>
        </template><parameter name="t1"><paramtype>T1 &amp;</paramtype></parameter><parameter name="t2"><paramtype>const T2 &amp;</paramtype></parameter><parameter name="t3"><paramtype>const T3 &amp;</paramtype></parameter><parameter name="t4"><paramtype>const T4 &amp;</paramtype></parameter><parameter name="t5"><paramtype>const T5 &amp;</paramtype></parameter><parameter name="t6"><paramtype>const T6 &amp;</paramtype></parameter><parameter name="t7"><paramtype>const T7 &amp;</paramtype></parameter><parameter name="t8"><paramtype>const T8 &amp;</paramtype></parameter><parameter name="t9"><paramtype>const T9 &amp;</paramtype></parameter><parameter name="t10"><paramtype>const T10 &amp;</paramtype></parameter><parameter name="t11"><paramtype>const T11 &amp;</paramtype></parameter><parameter name="t12"><paramtype>const T12 &amp;</paramtype></parameter></method></method-group><constructor><parameter name="alpha1"><paramtype>Fac1</paramtype></parameter><parameter name="alpha2"><paramtype>Fac2</paramtype></parameter><parameter name="alpha3"><paramtype>Fac3</paramtype></parameter><parameter name="alpha4"><paramtype>Fac4</paramtype></parameter><parameter name="alpha5"><paramtype>Fac5</paramtype></parameter><parameter name="alpha6"><paramtype>Fac6</paramtype></parameter><parameter name="alpha7"><paramtype>Fac7</paramtype></parameter><parameter name="alpha8"><paramtype>Fac8</paramtype></parameter><parameter name="alpha9"><paramtype>Fac9</paramtype></parameter><parameter name="alpha10"><paramtype>Fac10</paramtype></parameter><parameter name="alpha11"><paramtype>Fac11</paramtype></parameter></constructor></struct><struct name="scale_sum12"><template>
      <template-type-parameter name="Fac1"><default>double</default></template-type-parameter>
      <template-type-parameter name="Fac2"><default>Fac1</default></template-type-parameter>
      <template-type-parameter name="Fac3"><default>Fac2</default></template-type-parameter>
      <template-type-parameter name="Fac4"><default>Fac3</default></template-type-parameter>
      <template-type-parameter name="Fac5"><default>Fac4</default></template-type-parameter>
      <template-type-parameter name="Fac6"><default>Fac5</default></template-type-parameter>
      <template-type-parameter name="Fac7"><default>Fac6</default></template-type-parameter>
      <template-type-parameter name="Fac8"><default>Fac7</default></template-type-parameter>
      <template-type-parameter name="Fac9"><default>Fac8</default></template-type-parameter>
      <template-type-parameter name="Fac10"><default>Fac9</default></template-type-parameter>
      <template-type-parameter name="Fac11"><default>Fac10</default></template-type-parameter>
      <template-type-parameter name="Fac12"><default>Fac11</default></template-type-parameter>
    </template><typedef name="result_type"><type>void</type></typedef><data-member name="m_alpha1"><type>const Fac1</type></data-member><data-member name="m_alpha10"><type>const Fac10</type></data-member><data-member name="m_alpha11"><type>const Fac11</type></data-member><data-member name="m_alpha12"><type>const Fac12</type></data-member><data-member name="m_alpha2"><type>const Fac2</type></data-member><data-member name="m_alpha3"><type>const Fac3</type></data-member><data-member name="m_alpha4"><type>const Fac4</type></data-member><data-member name="m_alpha5"><type>const Fac5</type></data-member><data-member name="m_alpha6"><type>const Fac6</type></data-member><data-member name="m_alpha7"><type>const Fac7</type></data-member><data-member name="m_alpha8"><type>const Fac8</type></data-member><data-member name="m_alpha9"><type>const Fac9</type></data-member><method-group name="public member functions"><method name="operator()" cv="const"><type>void</type><template>
          <template-type-parameter name="T1"/>
          <template-type-parameter name="T2"/>
          <template-type-parameter name="T3"/>
          <template-type-parameter name="T4"/>
          <template-type-parameter name="T5"/>
          <template-type-parameter name="T6"/>
          <template-type-parameter name="T7"/>
          <template-type-parameter name="T8"/>
          <template-type-parameter name="T9"/>
          <template-type-parameter name="T10"/>
          <template-type-parameter name="T11"/>
          <template-type-parameter name="T12"/>
          <template-type-parameter name="T13"/>
        </template><parameter name="t1"><paramtype>T1 &amp;</paramtype></parameter><parameter name="t2"><paramtype>const T2 &amp;</paramtype></parameter><parameter name="t3"><paramtype>const T3 &amp;</paramtype></parameter><parameter name="t4"><paramtype>const T4 &amp;</paramtype></parameter><parameter name="t5"><paramtype>const T5 &amp;</paramtype></parameter><parameter name="t6"><paramtype>const T6 &amp;</paramtype></parameter><parameter name="t7"><paramtype>const T7 &amp;</paramtype></parameter><parameter name="t8"><paramtype>const T8 &amp;</paramtype></parameter><parameter name="t9"><paramtype>const T9 &amp;</paramtype></parameter><parameter name="t10"><paramtype>const T10 &amp;</paramtype></parameter><parameter name="t11"><paramtype>const T11 &amp;</paramtype></parameter><parameter name="t12"><paramtype>const T12 &amp;</paramtype></parameter><parameter name="t13"><paramtype>const T13 &amp;</paramtype></parameter></method></method-group><constructor><parameter name="alpha1"><paramtype>Fac1</paramtype></parameter><parameter name="alpha2"><paramtype>Fac2</paramtype></parameter><parameter name="alpha3"><paramtype>Fac3</paramtype></parameter><parameter name="alpha4"><paramtype>Fac4</paramtype></parameter><parameter name="alpha5"><paramtype>Fac5</paramtype></parameter><parameter name="alpha6"><paramtype>Fac6</paramtype></parameter><parameter name="alpha7"><paramtype>Fac7</paramtype></parameter><parameter name="alpha8"><paramtype>Fac8</paramtype></parameter><parameter name="alpha9"><paramtype>Fac9</paramtype></parameter><parameter name="alpha10"><paramtype>Fac10</paramtype></parameter><parameter name="alpha11"><paramtype>Fac11</paramtype></parameter><parameter name="alpha12"><paramtype>Fac12</paramtype></parameter></constructor></struct><struct name="scale_sum13"><template>
      <template-type-parameter name="Fac1"><default>double</default></template-type-parameter>
      <template-type-parameter name="Fac2"><default>Fac1</default></template-type-parameter>
      <template-type-parameter name="Fac3"><default>Fac2</default></template-type-parameter>
      <template-type-parameter name="Fac4"><default>Fac3</default></template-type-parameter>
      <template-type-parameter name="Fac5"><default>Fac4</default></template-type-parameter>
      <template-type-parameter name="Fac6"><default>Fac5</default></template-type-parameter>
      <template-type-parameter name="Fac7"><default>Fac6</default></template-type-parameter>
      <template-type-parameter name="Fac8"><default>Fac7</default></template-type-parameter>
      <template-type-parameter name="Fac9"><default>Fac8</default></template-type-parameter>
      <template-type-parameter name="Fac10"><default>Fac9</default></template-type-parameter>
      <template-type-parameter name="Fac11"><default>Fac10</default></template-type-parameter>
      <template-type-parameter name="Fac12"><default>Fac11</default></template-type-parameter>
      <template-type-parameter name="Fac13"><default>Fac12</default></template-type-parameter>
    </template><typedef name="result_type"><type>void</type></typedef><data-member name="m_alpha1"><type>const Fac1</type></data-member><data-member name="m_alpha10"><type>const Fac10</type></data-member><data-member name="m_alpha11"><type>const Fac11</type></data-member><data-member name="m_alpha12"><type>const Fac12</type></data-member><data-member name="m_alpha13"><type>const Fac13</type></data-member><data-member name="m_alpha2"><type>const Fac2</type></data-member><data-member name="m_alpha3"><type>const Fac3</type></data-member><data-member name="m_alpha4"><type>const Fac4</type></data-member><data-member name="m_alpha5"><type>const Fac5</type></data-member><data-member name="m_alpha6"><type>const Fac6</type></data-member><data-member name="m_alpha7"><type>const Fac7</type></data-member><data-member name="m_alpha8"><type>const Fac8</type></data-member><data-member name="m_alpha9"><type>const Fac9</type></data-member><method-group name="public member functions"><method name="operator()" cv="const"><type>void</type><template>
          <template-type-parameter name="T1"/>
          <template-type-parameter name="T2"/>
          <template-type-parameter name="T3"/>
          <template-type-parameter name="T4"/>
          <template-type-parameter name="T5"/>
          <template-type-parameter name="T6"/>
          <template-type-parameter name="T7"/>
          <template-type-parameter name="T8"/>
          <template-type-parameter name="T9"/>
          <template-type-parameter name="T10"/>
          <template-type-parameter name="T11"/>
          <template-type-parameter name="T12"/>
          <template-type-parameter name="T13"/>
          <template-type-parameter name="T14"/>
        </template><parameter name="t1"><paramtype>T1 &amp;</paramtype></parameter><parameter name="t2"><paramtype>const T2 &amp;</paramtype></parameter><parameter name="t3"><paramtype>const T3 &amp;</paramtype></parameter><parameter name="t4"><paramtype>const T4 &amp;</paramtype></parameter><parameter name="t5"><paramtype>const T5 &amp;</paramtype></parameter><parameter name="t6"><paramtype>const T6 &amp;</paramtype></parameter><parameter name="t7"><paramtype>const T7 &amp;</paramtype></parameter><parameter name="t8"><paramtype>const T8 &amp;</paramtype></parameter><parameter name="t9"><paramtype>const T9 &amp;</paramtype></parameter><parameter name="t10"><paramtype>const T10 &amp;</paramtype></parameter><parameter name="t11"><paramtype>const T11 &amp;</paramtype></parameter><parameter name="t12"><paramtype>const T12 &amp;</paramtype></parameter><parameter name="t13"><paramtype>const T13 &amp;</paramtype></parameter><parameter name="t14"><paramtype>const T14 &amp;</paramtype></parameter></method></method-group><constructor><parameter name="alpha1"><paramtype>Fac1</paramtype></parameter><parameter name="alpha2"><paramtype>Fac2</paramtype></parameter><parameter name="alpha3"><paramtype>Fac3</paramtype></parameter><parameter name="alpha4"><paramtype>Fac4</paramtype></parameter><parameter name="alpha5"><paramtype>Fac5</paramtype></parameter><parameter name="alpha6"><paramtype>Fac6</paramtype></parameter><parameter name="alpha7"><paramtype>Fac7</paramtype></parameter><parameter name="alpha8"><paramtype>Fac8</paramtype></parameter><parameter name="alpha9"><paramtype>Fac9</paramtype></parameter><parameter name="alpha10"><paramtype>Fac10</paramtype></parameter><parameter name="alpha11"><paramtype>Fac11</paramtype></parameter><parameter name="alpha12"><paramtype>Fac12</paramtype></parameter><parameter name="alpha13"><paramtype>Fac13</paramtype></parameter></constructor></struct><struct name="scale_sum14"><template>
      <template-type-parameter name="Fac1"><default>double</default></template-type-parameter>
      <template-type-parameter name="Fac2"><default>Fac1</default></template-type-parameter>
      <template-type-parameter name="Fac3"><default>Fac2</default></template-type-parameter>
      <template-type-parameter name="Fac4"><default>Fac3</default></template-type-parameter>
      <template-type-parameter name="Fac5"><default>Fac4</default></template-type-parameter>
      <template-type-parameter name="Fac6"><default>Fac5</default></template-type-parameter>
      <template-type-parameter name="Fac7"><default>Fac6</default></template-type-parameter>
      <template-type-parameter name="Fac8"><default>Fac7</default></template-type-parameter>
      <template-type-parameter name="Fac9"><default>Fac8</default></template-type-parameter>
      <template-type-parameter name="Fac10"><default>Fac9</default></template-type-parameter>
      <template-type-parameter name="Fac11"><default>Fac10</default></template-type-parameter>
      <template-type-parameter name="Fac12"><default>Fac11</default></template-type-parameter>
      <template-type-parameter name="Fac13"><default>Fac12</default></template-type-parameter>
      <template-type-parameter name="Fac14"><default>Fac13</default></template-type-parameter>
    </template><typedef name="result_type"><type>void</type></typedef><data-member name="m_alpha1"><type>const Fac1</type></data-member><data-member name="m_alpha10"><type>const Fac10</type></data-member><data-member name="m_alpha11"><type>const Fac11</type></data-member><data-member name="m_alpha12"><type>const Fac12</type></data-member><data-member name="m_alpha13"><type>const Fac13</type></data-member><data-member name="m_alpha14"><type>const Fac14</type></data-member><data-member name="m_alpha2"><type>const Fac2</type></data-member><data-member name="m_alpha3"><type>const Fac3</type></data-member><data-member name="m_alpha4"><type>const Fac4</type></data-member><data-member name="m_alpha5"><type>const Fac5</type></data-member><data-member name="m_alpha6"><type>const Fac6</type></data-member><data-member name="m_alpha7"><type>const Fac7</type></data-member><data-member name="m_alpha8"><type>const Fac8</type></data-member><data-member name="m_alpha9"><type>const Fac9</type></data-member><method-group name="public member functions"><method name="operator()" cv="const"><type>void</type><template>
          <template-type-parameter name="T1"/>
          <template-type-parameter name="T2"/>
          <template-type-parameter name="T3"/>
          <template-type-parameter name="T4"/>
          <template-type-parameter name="T5"/>
          <template-type-parameter name="T6"/>
          <template-type-parameter name="T7"/>
          <template-type-parameter name="T8"/>
          <template-type-parameter name="T9"/>
          <template-type-parameter name="T10"/>
          <template-type-parameter name="T11"/>
          <template-type-parameter name="T12"/>
          <template-type-parameter name="T13"/>
          <template-type-parameter name="T14"/>
          <template-type-parameter name="T15"/>
        </template><parameter name="t1"><paramtype>T1 &amp;</paramtype></parameter><parameter name="t2"><paramtype>const T2 &amp;</paramtype></parameter><parameter name="t3"><paramtype>const T3 &amp;</paramtype></parameter><parameter name="t4"><paramtype>const T4 &amp;</paramtype></parameter><parameter name="t5"><paramtype>const T5 &amp;</paramtype></parameter><parameter name="t6"><paramtype>const T6 &amp;</paramtype></parameter><parameter name="t7"><paramtype>const T7 &amp;</paramtype></parameter><parameter name="t8"><paramtype>const T8 &amp;</paramtype></parameter><parameter name="t9"><paramtype>const T9 &amp;</paramtype></parameter><parameter name="t10"><paramtype>const T10 &amp;</paramtype></parameter><parameter name="t11"><paramtype>const T11 &amp;</paramtype></parameter><parameter name="t12"><paramtype>const T12 &amp;</paramtype></parameter><parameter name="t13"><paramtype>const T13 &amp;</paramtype></parameter><parameter name="t14"><paramtype>const T14 &amp;</paramtype></parameter><parameter name="t15"><paramtype>const T15 &amp;</paramtype></parameter></method></method-group><constructor><parameter name="alpha1"><paramtype>Fac1</paramtype></parameter><parameter name="alpha2"><paramtype>Fac2</paramtype></parameter><parameter name="alpha3"><paramtype>Fac3</paramtype></parameter><parameter name="alpha4"><paramtype>Fac4</paramtype></parameter><parameter name="alpha5"><paramtype>Fac5</paramtype></parameter><parameter name="alpha6"><paramtype>Fac6</paramtype></parameter><parameter name="alpha7"><paramtype>Fac7</paramtype></parameter><parameter name="alpha8"><paramtype>Fac8</paramtype></parameter><parameter name="alpha9"><paramtype>Fac9</paramtype></parameter><parameter name="alpha10"><paramtype>Fac10</paramtype></parameter><parameter name="alpha11"><paramtype>Fac11</paramtype></parameter><parameter name="alpha12"><paramtype>Fac12</paramtype></parameter><parameter name="alpha13"><paramtype>Fac13</paramtype></parameter><parameter name="alpha14"><paramtype>Fac14</paramtype></parameter></constructor></struct><struct name="scale_sum2"><template>
      <template-type-parameter name="Fac1"><default>double</default></template-type-parameter>
      <template-type-parameter name="Fac2"><default>Fac1</default></template-type-parameter>
    </template><typedef name="result_type"><type>void</type></typedef><data-member name="m_alpha1"><type>const Fac1</type></data-member><data-member name="m_alpha2"><type>const Fac2</type></data-member><method-group name="public member functions"><method name="operator()" cv="const"><type>void</type><template>
          <template-type-parameter name="T1"/>
          <template-type-parameter name="T2"/>
          <template-type-parameter name="T3"/>
        </template><parameter name="t1"><paramtype>T1 &amp;</paramtype></parameter><parameter name="t2"><paramtype>const T2 &amp;</paramtype></parameter><parameter name="t3"><paramtype>const T3 &amp;</paramtype></parameter></method></method-group><constructor><parameter name="alpha1"><paramtype>Fac1</paramtype></parameter><parameter name="alpha2"><paramtype>Fac2</paramtype></parameter></constructor></struct><struct name="scale_sum3"><template>
      <template-type-parameter name="Fac1"><default>double</default></template-type-parameter>
      <template-type-parameter name="Fac2"><default>Fac1</default></template-type-parameter>
      <template-type-parameter name="Fac3"><default>Fac2</default></template-type-parameter>
    </template><typedef name="result_type"><type>void</type></typedef><data-member name="m_alpha1"><type>const Fac1</type></data-member><data-member name="m_alpha2"><type>const Fac2</type></data-member><data-member name="m_alpha3"><type>const Fac3</type></data-member><method-group name="public member functions"><method name="operator()" cv="const"><type>void</type><template>
          <template-type-parameter name="T1"/>
          <template-type-parameter name="T2"/>
          <template-type-parameter name="T3"/>
          <template-type-parameter name="T4"/>
        </template><parameter name="t1"><paramtype>T1 &amp;</paramtype></parameter><parameter name="t2"><paramtype>const T2 &amp;</paramtype></parameter><parameter name="t3"><paramtype>const T3 &amp;</paramtype></parameter><parameter name="t4"><paramtype>const T4 &amp;</paramtype></parameter></method></method-group><constructor><parameter name="alpha1"><paramtype>Fac1</paramtype></parameter><parameter name="alpha2"><paramtype>Fac2</paramtype></parameter><parameter name="alpha3"><paramtype>Fac3</paramtype></parameter></constructor></struct><struct name="scale_sum4"><template>
      <template-type-parameter name="Fac1"><default>double</default></template-type-parameter>
      <template-type-parameter name="Fac2"><default>Fac1</default></template-type-parameter>
      <template-type-parameter name="Fac3"><default>Fac2</default></template-type-parameter>
      <template-type-parameter name="Fac4"><default>Fac3</default></template-type-parameter>
    </template><typedef name="result_type"><type>void</type></typedef><data-member name="m_alpha1"><type>const Fac1</type></data-member><data-member name="m_alpha2"><type>const Fac2</type></data-member><data-member name="m_alpha3"><type>const Fac3</type></data-member><data-member name="m_alpha4"><type>const Fac4</type></data-member><method-group name="public member functions"><method name="operator()" cv="const"><type>void</type><template>
          <template-type-parameter name="T1"/>
          <template-type-parameter name="T2"/>
          <template-type-parameter name="T3"/>
          <template-type-parameter name="T4"/>
          <template-type-parameter name="T5"/>
        </template><parameter name="t1"><paramtype>T1 &amp;</paramtype></parameter><parameter name="t2"><paramtype>const T2 &amp;</paramtype></parameter><parameter name="t3"><paramtype>const T3 &amp;</paramtype></parameter><parameter name="t4"><paramtype>const T4 &amp;</paramtype></parameter><parameter name="t5"><paramtype>const T5 &amp;</paramtype></parameter></method></method-group><constructor><parameter name="alpha1"><paramtype>Fac1</paramtype></parameter><parameter name="alpha2"><paramtype>Fac2</paramtype></parameter><parameter name="alpha3"><paramtype>Fac3</paramtype></parameter><parameter name="alpha4"><paramtype>Fac4</paramtype></parameter></constructor></struct><struct name="scale_sum5"><template>
      <template-type-parameter name="Fac1"><default>double</default></template-type-parameter>
      <template-type-parameter name="Fac2"><default>Fac1</default></template-type-parameter>
      <template-type-parameter name="Fac3"><default>Fac2</default></template-type-parameter>
      <template-type-parameter name="Fac4"><default>Fac3</default></template-type-parameter>
      <template-type-parameter name="Fac5"><default>Fac4</default></template-type-parameter>
    </template><typedef name="result_type"><type>void</type></typedef><data-member name="m_alpha1"><type>const Fac1</type></data-member><data-member name="m_alpha2"><type>const Fac2</type></data-member><data-member name="m_alpha3"><type>const Fac3</type></data-member><data-member name="m_alpha4"><type>const Fac4</type></data-member><data-member name="m_alpha5"><type>const Fac5</type></data-member><method-group name="public member functions"><method name="operator()" cv="const"><type>void</type><template>
          <template-type-parameter name="T1"/>
          <template-type-parameter name="T2"/>
          <template-type-parameter name="T3"/>
          <template-type-parameter name="T4"/>
          <template-type-parameter name="T5"/>
          <template-type-parameter name="T6"/>
        </template><parameter name="t1"><paramtype>T1 &amp;</paramtype></parameter><parameter name="t2"><paramtype>const T2 &amp;</paramtype></parameter><parameter name="t3"><paramtype>const T3 &amp;</paramtype></parameter><parameter name="t4"><paramtype>const T4 &amp;</paramtype></parameter><parameter name="t5"><paramtype>const T5 &amp;</paramtype></parameter><parameter name="t6"><paramtype>const T6 &amp;</paramtype></parameter></method></method-group><constructor><parameter name="alpha1"><paramtype>Fac1</paramtype></parameter><parameter name="alpha2"><paramtype>Fac2</paramtype></parameter><parameter name="alpha3"><paramtype>Fac3</paramtype></parameter><parameter name="alpha4"><paramtype>Fac4</paramtype></parameter><parameter name="alpha5"><paramtype>Fac5</paramtype></parameter></constructor></struct><struct name="scale_sum6"><template>
      <template-type-parameter name="Fac1"><default>double</default></template-type-parameter>
      <template-type-parameter name="Fac2"><default>Fac1</default></template-type-parameter>
      <template-type-parameter name="Fac3"><default>Fac2</default></template-type-parameter>
      <template-type-parameter name="Fac4"><default>Fac3</default></template-type-parameter>
      <template-type-parameter name="Fac5"><default>Fac4</default></template-type-parameter>
      <template-type-parameter name="Fac6"><default>Fac5</default></template-type-parameter>
    </template><typedef name="result_type"><type>void</type></typedef><data-member name="m_alpha1"><type>const Fac1</type></data-member><data-member name="m_alpha2"><type>const Fac2</type></data-member><data-member name="m_alpha3"><type>const Fac3</type></data-member><data-member name="m_alpha4"><type>const Fac4</type></data-member><data-member name="m_alpha5"><type>const Fac5</type></data-member><data-member name="m_alpha6"><type>const Fac6</type></data-member><method-group name="public member functions"><method name="operator()" cv="const"><type>void</type><template>
          <template-type-parameter name="T1"/>
          <template-type-parameter name="T2"/>
          <template-type-parameter name="T3"/>
          <template-type-parameter name="T4"/>
          <template-type-parameter name="T5"/>
          <template-type-parameter name="T6"/>
          <template-type-parameter name="T7"/>
        </template><parameter name="t1"><paramtype>T1 &amp;</paramtype></parameter><parameter name="t2"><paramtype>const T2 &amp;</paramtype></parameter><parameter name="t3"><paramtype>const T3 &amp;</paramtype></parameter><parameter name="t4"><paramtype>const T4 &amp;</paramtype></parameter><parameter name="t5"><paramtype>const T5 &amp;</paramtype></parameter><parameter name="t6"><paramtype>const T6 &amp;</paramtype></parameter><parameter name="t7"><paramtype>const T7 &amp;</paramtype></parameter></method></method-group><constructor><parameter name="alpha1"><paramtype>Fac1</paramtype></parameter><parameter name="alpha2"><paramtype>Fac2</paramtype></parameter><parameter name="alpha3"><paramtype>Fac3</paramtype></parameter><parameter name="alpha4"><paramtype>Fac4</paramtype></parameter><parameter name="alpha5"><paramtype>Fac5</paramtype></parameter><parameter name="alpha6"><paramtype>Fac6</paramtype></parameter></constructor></struct><struct name="scale_sum7"><template>
      <template-type-parameter name="Fac1"><default>double</default></template-type-parameter>
      <template-type-parameter name="Fac2"><default>Fac1</default></template-type-parameter>
      <template-type-parameter name="Fac3"><default>Fac2</default></template-type-parameter>
      <template-type-parameter name="Fac4"><default>Fac3</default></template-type-parameter>
      <template-type-parameter name="Fac5"><default>Fac4</default></template-type-parameter>
      <template-type-parameter name="Fac6"><default>Fac5</default></template-type-parameter>
      <template-type-parameter name="Fac7"><default>Fac6</default></template-type-parameter>
    </template><typedef name="result_type"><type>void</type></typedef><data-member name="m_alpha1"><type>const Fac1</type></data-member><data-member name="m_alpha2"><type>const Fac2</type></data-member><data-member name="m_alpha3"><type>const Fac3</type></data-member><data-member name="m_alpha4"><type>const Fac4</type></data-member><data-member name="m_alpha5"><type>const Fac5</type></data-member><data-member name="m_alpha6"><type>const Fac6</type></data-member><data-member name="m_alpha7"><type>const Fac7</type></data-member><method-group name="public member functions"><method name="operator()" cv="const"><type>void</type><template>
          <template-type-parameter name="T1"/>
          <template-type-parameter name="T2"/>
          <template-type-parameter name="T3"/>
          <template-type-parameter name="T4"/>
          <template-type-parameter name="T5"/>
          <template-type-parameter name="T6"/>
          <template-type-parameter name="T7"/>
          <template-type-parameter name="T8"/>
        </template><parameter name="t1"><paramtype>T1 &amp;</paramtype></parameter><parameter name="t2"><paramtype>const T2 &amp;</paramtype></parameter><parameter name="t3"><paramtype>const T3 &amp;</paramtype></parameter><parameter name="t4"><paramtype>const T4 &amp;</paramtype></parameter><parameter name="t5"><paramtype>const T5 &amp;</paramtype></parameter><parameter name="t6"><paramtype>const T6 &amp;</paramtype></parameter><parameter name="t7"><paramtype>const T7 &amp;</paramtype></parameter><parameter name="t8"><paramtype>const T8 &amp;</paramtype></parameter></method></method-group><constructor><parameter name="alpha1"><paramtype>Fac1</paramtype></parameter><parameter name="alpha2"><paramtype>Fac2</paramtype></parameter><parameter name="alpha3"><paramtype>Fac3</paramtype></parameter><parameter name="alpha4"><paramtype>Fac4</paramtype></parameter><parameter name="alpha5"><paramtype>Fac5</paramtype></parameter><parameter name="alpha6"><paramtype>Fac6</paramtype></parameter><parameter name="alpha7"><paramtype>Fac7</paramtype></parameter></constructor></struct><struct name="scale_sum8"><template>
      <template-type-parameter name="Fac1"><default>double</default></template-type-parameter>
      <template-type-parameter name="Fac2"><default>Fac1</default></template-type-parameter>
      <template-type-parameter name="Fac3"><default>Fac2</default></template-type-parameter>
      <template-type-parameter name="Fac4"><default>Fac3</default></template-type-parameter>
      <template-type-parameter name="Fac5"><default>Fac4</default></template-type-parameter>
      <template-type-parameter name="Fac6"><default>Fac5</default></template-type-parameter>
      <template-type-parameter name="Fac7"><default>Fac6</default></template-type-parameter>
      <template-type-parameter name="Fac8"><default>Fac7</default></template-type-parameter>
    </template><typedef name="result_type"><type>void</type></typedef><data-member name="m_alpha1"><type>const Fac1</type></data-member><data-member name="m_alpha2"><type>const Fac2</type></data-member><data-member name="m_alpha3"><type>const Fac3</type></data-member><data-member name="m_alpha4"><type>const Fac4</type></data-member><data-member name="m_alpha5"><type>const Fac5</type></data-member><data-member name="m_alpha6"><type>const Fac6</type></data-member><data-member name="m_alpha7"><type>const Fac7</type></data-member><data-member name="m_alpha8"><type>const Fac8</type></data-member><method-group name="public member functions"><method name="operator()" cv="const"><type>void</type><template>
          <template-type-parameter name="T1"/>
          <template-type-parameter name="T2"/>
          <template-type-parameter name="T3"/>
          <template-type-parameter name="T4"/>
          <template-type-parameter name="T5"/>
          <template-type-parameter name="T6"/>
          <template-type-parameter name="T7"/>
          <template-type-parameter name="T8"/>
          <template-type-parameter name="T9"/>
        </template><parameter name="t1"><paramtype>T1 &amp;</paramtype></parameter><parameter name="t2"><paramtype>const T2 &amp;</paramtype></parameter><parameter name="t3"><paramtype>const T3 &amp;</paramtype></parameter><parameter name="t4"><paramtype>const T4 &amp;</paramtype></parameter><parameter name="t5"><paramtype>const T5 &amp;</paramtype></parameter><parameter name="t6"><paramtype>const T6 &amp;</paramtype></parameter><parameter name="t7"><paramtype>const T7 &amp;</paramtype></parameter><parameter name="t8"><paramtype>const T8 &amp;</paramtype></parameter><parameter name="t9"><paramtype>const T9 &amp;</paramtype></parameter></method></method-group><constructor><parameter name="alpha1"><paramtype>Fac1</paramtype></parameter><parameter name="alpha2"><paramtype>Fac2</paramtype></parameter><parameter name="alpha3"><paramtype>Fac3</paramtype></parameter><parameter name="alpha4"><paramtype>Fac4</paramtype></parameter><parameter name="alpha5"><paramtype>Fac5</paramtype></parameter><parameter name="alpha6"><paramtype>Fac6</paramtype></parameter><parameter name="alpha7"><paramtype>Fac7</paramtype></parameter><parameter name="alpha8"><paramtype>Fac8</paramtype></parameter></constructor></struct><struct name="scale_sum9"><template>
      <template-type-parameter name="Fac1"><default>double</default></template-type-parameter>
      <template-type-parameter name="Fac2"><default>Fac1</default></template-type-parameter>
      <template-type-parameter name="Fac3"><default>Fac2</default></template-type-parameter>
      <template-type-parameter name="Fac4"><default>Fac3</default></template-type-parameter>
      <template-type-parameter name="Fac5"><default>Fac4</default></template-type-parameter>
      <template-type-parameter name="Fac6"><default>Fac5</default></template-type-parameter>
      <template-type-parameter name="Fac7"><default>Fac6</default></template-type-parameter>
      <template-type-parameter name="Fac8"><default>Fac7</default></template-type-parameter>
      <template-type-parameter name="Fac9"><default>Fac8</default></template-type-parameter>
    </template><typedef name="result_type"><type>void</type></typedef><data-member name="m_alpha1"><type>const Fac1</type></data-member><data-member name="m_alpha2"><type>const Fac2</type></data-member><data-member name="m_alpha3"><type>const Fac3</type></data-member><data-member name="m_alpha4"><type>const Fac4</type></data-member><data-member name="m_alpha5"><type>const Fac5</type></data-member><data-member name="m_alpha6"><type>const Fac6</type></data-member><data-member name="m_alpha7"><type>const Fac7</type></data-member><data-member name="m_alpha8"><type>const Fac8</type></data-member><data-member name="m_alpha9"><type>const Fac9</type></data-member><method-group name="public member functions"><method name="operator()" cv="const"><type>void</type><template>
          <template-type-parameter name="T1"/>
          <template-type-parameter name="T2"/>
          <template-type-parameter name="T3"/>
          <template-type-parameter name="T4"/>
          <template-type-parameter name="T5"/>
          <template-type-parameter name="T6"/>
          <template-type-parameter name="T7"/>
          <template-type-parameter name="T8"/>
          <template-type-parameter name="T9"/>
          <template-type-parameter name="T10"/>
        </template><parameter name="t1"><paramtype>T1 &amp;</paramtype></parameter><parameter name="t2"><paramtype>const T2 &amp;</paramtype></parameter><parameter name="t3"><paramtype>const T3 &amp;</paramtype></parameter><parameter name="t4"><paramtype>const T4 &amp;</paramtype></parameter><parameter name="t5"><paramtype>const T5 &amp;</paramtype></parameter><parameter name="t6"><paramtype>const T6 &amp;</paramtype></parameter><parameter name="t7"><paramtype>const T7 &amp;</paramtype></parameter><parameter name="t8"><paramtype>const T8 &amp;</paramtype></parameter><parameter name="t9"><paramtype>const T9 &amp;</paramtype></parameter><parameter name="t10"><paramtype>const T10 &amp;</paramtype></parameter></method></method-group><constructor><parameter name="alpha1"><paramtype>Fac1</paramtype></parameter><parameter name="alpha2"><paramtype>Fac2</paramtype></parameter><parameter name="alpha3"><paramtype>Fac3</paramtype></parameter><parameter name="alpha4"><paramtype>Fac4</paramtype></parameter><parameter name="alpha5"><paramtype>Fac5</paramtype></parameter><parameter name="alpha6"><paramtype>Fac6</paramtype></parameter><parameter name="alpha7"><paramtype>Fac7</paramtype></parameter><parameter name="alpha8"><paramtype>Fac8</paramtype></parameter><parameter name="alpha9"><paramtype>Fac9</paramtype></parameter></constructor></struct><struct name="scale_sum_swap2"><template>
      <template-type-parameter name="Fac1"><default>double</default></template-type-parameter>
      <template-type-parameter name="Fac2"><default>Fac1</default></template-type-parameter>
    </template><typedef name="result_type"><type>void</type></typedef><data-member name="m_alpha1"><type>const Fac1</type></data-member><data-member name="m_alpha2"><type>const Fac2</type></data-member><method-group name="public member functions"><method name="operator()" cv="const"><type>void</type><template>
          <template-type-parameter name="T1"/>
          <template-type-parameter name="T2"/>
          <template-type-parameter name="T3"/>
        </template><parameter name="t1"><paramtype>T1 &amp;</paramtype></parameter><parameter name="t2"><paramtype>T2 &amp;</paramtype></parameter><parameter name="t3"><paramtype>const T3 &amp;</paramtype></parameter></method></method-group><constructor><parameter name="alpha1"><paramtype>Fac1</paramtype></parameter><parameter name="alpha2"><paramtype>Fac2</paramtype></parameter></constructor></struct></struct></namespace></namespace></namespace></header><header name="boost/numeric/odeint/algebra/fusion_algebra.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><struct name="fusion_algebra"><method-group name="public static functions"><method name="for_each1" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each10" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="S4"/>
          <template-type-parameter name="S5"/>
          <template-type-parameter name="S6"/>
          <template-type-parameter name="S7"/>
          <template-type-parameter name="S8"/>
          <template-type-parameter name="S9"/>
          <template-type-parameter name="S10"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>S3 &amp;</paramtype></parameter><parameter name="s4"><paramtype>S4 &amp;</paramtype></parameter><parameter name="s5"><paramtype>S5 &amp;</paramtype></parameter><parameter name="s6"><paramtype>S6 &amp;</paramtype></parameter><parameter name="s7"><paramtype>S7 &amp;</paramtype></parameter><parameter name="s8"><paramtype>S8 &amp;</paramtype></parameter><parameter name="s9"><paramtype>S9 &amp;</paramtype></parameter><parameter name="s10"><paramtype>S10 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each11" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="S4"/>
          <template-type-parameter name="S5"/>
          <template-type-parameter name="S6"/>
          <template-type-parameter name="S7"/>
          <template-type-parameter name="S8"/>
          <template-type-parameter name="S9"/>
          <template-type-parameter name="S10"/>
          <template-type-parameter name="S11"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>S3 &amp;</paramtype></parameter><parameter name="s4"><paramtype>S4 &amp;</paramtype></parameter><parameter name="s5"><paramtype>S5 &amp;</paramtype></parameter><parameter name="s6"><paramtype>S6 &amp;</paramtype></parameter><parameter name="s7"><paramtype>S7 &amp;</paramtype></parameter><parameter name="s8"><paramtype>S8 &amp;</paramtype></parameter><parameter name="s9"><paramtype>S9 &amp;</paramtype></parameter><parameter name="s10"><paramtype>S10 &amp;</paramtype></parameter><parameter name="s11"><paramtype>S11 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each12" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="S4"/>
          <template-type-parameter name="S5"/>
          <template-type-parameter name="S6"/>
          <template-type-parameter name="S7"/>
          <template-type-parameter name="S8"/>
          <template-type-parameter name="S9"/>
          <template-type-parameter name="S10"/>
          <template-type-parameter name="S11"/>
          <template-type-parameter name="S12"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>S3 &amp;</paramtype></parameter><parameter name="s4"><paramtype>S4 &amp;</paramtype></parameter><parameter name="s5"><paramtype>S5 &amp;</paramtype></parameter><parameter name="s6"><paramtype>S6 &amp;</paramtype></parameter><parameter name="s7"><paramtype>S7 &amp;</paramtype></parameter><parameter name="s8"><paramtype>S8 &amp;</paramtype></parameter><parameter name="s9"><paramtype>S9 &amp;</paramtype></parameter><parameter name="s10"><paramtype>S10 &amp;</paramtype></parameter><parameter name="s11"><paramtype>S11 &amp;</paramtype></parameter><parameter name="s12"><paramtype>S12 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each13" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="S4"/>
          <template-type-parameter name="S5"/>
          <template-type-parameter name="S6"/>
          <template-type-parameter name="S7"/>
          <template-type-parameter name="S8"/>
          <template-type-parameter name="S9"/>
          <template-type-parameter name="S10"/>
          <template-type-parameter name="S11"/>
          <template-type-parameter name="S12"/>
          <template-type-parameter name="S13"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>S3 &amp;</paramtype></parameter><parameter name="s4"><paramtype>S4 &amp;</paramtype></parameter><parameter name="s5"><paramtype>S5 &amp;</paramtype></parameter><parameter name="s6"><paramtype>S6 &amp;</paramtype></parameter><parameter name="s7"><paramtype>S7 &amp;</paramtype></parameter><parameter name="s8"><paramtype>S8 &amp;</paramtype></parameter><parameter name="s9"><paramtype>S9 &amp;</paramtype></parameter><parameter name="s10"><paramtype>S10 &amp;</paramtype></parameter><parameter name="s11"><paramtype>S11 &amp;</paramtype></parameter><parameter name="s12"><paramtype>S12 &amp;</paramtype></parameter><parameter name="s13"><paramtype>S13 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each14" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="S4"/>
          <template-type-parameter name="S5"/>
          <template-type-parameter name="S6"/>
          <template-type-parameter name="S7"/>
          <template-type-parameter name="S8"/>
          <template-type-parameter name="S9"/>
          <template-type-parameter name="S10"/>
          <template-type-parameter name="S11"/>
          <template-type-parameter name="S12"/>
          <template-type-parameter name="S13"/>
          <template-type-parameter name="S14"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>S3 &amp;</paramtype></parameter><parameter name="s4"><paramtype>S4 &amp;</paramtype></parameter><parameter name="s5"><paramtype>S5 &amp;</paramtype></parameter><parameter name="s6"><paramtype>S6 &amp;</paramtype></parameter><parameter name="s7"><paramtype>S7 &amp;</paramtype></parameter><parameter name="s8"><paramtype>S8 &amp;</paramtype></parameter><parameter name="s9"><paramtype>S9 &amp;</paramtype></parameter><parameter name="s10"><paramtype>S10 &amp;</paramtype></parameter><parameter name="s11"><paramtype>S11 &amp;</paramtype></parameter><parameter name="s12"><paramtype>S12 &amp;</paramtype></parameter><parameter name="s13"><paramtype>S13 &amp;</paramtype></parameter><parameter name="s14"><paramtype>S14 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each15" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="S4"/>
          <template-type-parameter name="S5"/>
          <template-type-parameter name="S6"/>
          <template-type-parameter name="S7"/>
          <template-type-parameter name="S8"/>
          <template-type-parameter name="S9"/>
          <template-type-parameter name="S10"/>
          <template-type-parameter name="S11"/>
          <template-type-parameter name="S12"/>
          <template-type-parameter name="S13"/>
          <template-type-parameter name="S14"/>
          <template-type-parameter name="S15"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>S3 &amp;</paramtype></parameter><parameter name="s4"><paramtype>S4 &amp;</paramtype></parameter><parameter name="s5"><paramtype>S5 &amp;</paramtype></parameter><parameter name="s6"><paramtype>S6 &amp;</paramtype></parameter><parameter name="s7"><paramtype>S7 &amp;</paramtype></parameter><parameter name="s8"><paramtype>S8 &amp;</paramtype></parameter><parameter name="s9"><paramtype>S9 &amp;</paramtype></parameter><parameter name="s10"><paramtype>S10 &amp;</paramtype></parameter><parameter name="s11"><paramtype>S11 &amp;</paramtype></parameter><parameter name="s12"><paramtype>S12 &amp;</paramtype></parameter><parameter name="s13"><paramtype>S13 &amp;</paramtype></parameter><parameter name="s14"><paramtype>S14 &amp;</paramtype></parameter><parameter name="s15"><paramtype>S15 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each2" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each3" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>S3 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each4" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="S4"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>S3 &amp;</paramtype></parameter><parameter name="s4"><paramtype>S4 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each5" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="S4"/>
          <template-type-parameter name="S5"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>S3 &amp;</paramtype></parameter><parameter name="s4"><paramtype>S4 &amp;</paramtype></parameter><parameter name="s5"><paramtype>S5 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each6" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="S4"/>
          <template-type-parameter name="S5"/>
          <template-type-parameter name="S6"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>S3 &amp;</paramtype></parameter><parameter name="s4"><paramtype>S4 &amp;</paramtype></parameter><parameter name="s5"><paramtype>S5 &amp;</paramtype></parameter><parameter name="s6"><paramtype>S6 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each7" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="S4"/>
          <template-type-parameter name="S5"/>
          <template-type-parameter name="S6"/>
          <template-type-parameter name="S7"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>S3 &amp;</paramtype></parameter><parameter name="s4"><paramtype>S4 &amp;</paramtype></parameter><parameter name="s5"><paramtype>S5 &amp;</paramtype></parameter><parameter name="s6"><paramtype>S6 &amp;</paramtype></parameter><parameter name="s7"><paramtype>S7 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each8" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="S4"/>
          <template-type-parameter name="S5"/>
          <template-type-parameter name="S6"/>
          <template-type-parameter name="S7"/>
          <template-type-parameter name="S8"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>S3 &amp;</paramtype></parameter><parameter name="s4"><paramtype>S4 &amp;</paramtype></parameter><parameter name="s5"><paramtype>S5 &amp;</paramtype></parameter><parameter name="s6"><paramtype>S6 &amp;</paramtype></parameter><parameter name="s7"><paramtype>S7 &amp;</paramtype></parameter><parameter name="s8"><paramtype>S8 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each9" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="S4"/>
          <template-type-parameter name="S5"/>
          <template-type-parameter name="S6"/>
          <template-type-parameter name="S7"/>
          <template-type-parameter name="S8"/>
          <template-type-parameter name="S9"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>S3 &amp;</paramtype></parameter><parameter name="s4"><paramtype>S4 &amp;</paramtype></parameter><parameter name="s5"><paramtype>S5 &amp;</paramtype></parameter><parameter name="s6"><paramtype>S6 &amp;</paramtype></parameter><parameter name="s7"><paramtype>S7 &amp;</paramtype></parameter><parameter name="s8"><paramtype>S8 &amp;</paramtype></parameter><parameter name="s9"><paramtype>S9 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="reduce" cv=""><type>static Value</type><template>
          <template-type-parameter name="Value"/>
          <template-type-parameter name="S"/>
          <template-type-parameter name="Reduction"/>
        </template><parameter name="s"><paramtype>const S &amp;</paramtype></parameter><parameter name="red"><paramtype>Reduction</paramtype></parameter><parameter name="init"><paramtype>Value</paramtype></parameter></method></method-group></struct></namespace></namespace></namespace></header><header name="boost/numeric/odeint/algebra/range_algebra.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><struct name="range_algebra"><method-group name="public static functions"><method name="for_each1" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each10" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="S4"/>
          <template-type-parameter name="S5"/>
          <template-type-parameter name="S6"/>
          <template-type-parameter name="S7"/>
          <template-type-parameter name="S8"/>
          <template-type-parameter name="S9"/>
          <template-type-parameter name="S10"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>S3 &amp;</paramtype></parameter><parameter name="s4"><paramtype>S4 &amp;</paramtype></parameter><parameter name="s5"><paramtype>S5 &amp;</paramtype></parameter><parameter name="s6"><paramtype>S6 &amp;</paramtype></parameter><parameter name="s7"><paramtype>S7 &amp;</paramtype></parameter><parameter name="s8"><paramtype>S8 &amp;</paramtype></parameter><parameter name="s9"><paramtype>S9 &amp;</paramtype></parameter><parameter name="s10"><paramtype>S10 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each11" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="S4"/>
          <template-type-parameter name="S5"/>
          <template-type-parameter name="S6"/>
          <template-type-parameter name="S7"/>
          <template-type-parameter name="S8"/>
          <template-type-parameter name="S9"/>
          <template-type-parameter name="S10"/>
          <template-type-parameter name="S11"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>S3 &amp;</paramtype></parameter><parameter name="s4"><paramtype>S4 &amp;</paramtype></parameter><parameter name="s5"><paramtype>S5 &amp;</paramtype></parameter><parameter name="s6"><paramtype>S6 &amp;</paramtype></parameter><parameter name="s7"><paramtype>S7 &amp;</paramtype></parameter><parameter name="s8"><paramtype>S8 &amp;</paramtype></parameter><parameter name="s9"><paramtype>S9 &amp;</paramtype></parameter><parameter name="s10"><paramtype>S10 &amp;</paramtype></parameter><parameter name="s11"><paramtype>S11 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each12" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="S4"/>
          <template-type-parameter name="S5"/>
          <template-type-parameter name="S6"/>
          <template-type-parameter name="S7"/>
          <template-type-parameter name="S8"/>
          <template-type-parameter name="S9"/>
          <template-type-parameter name="S10"/>
          <template-type-parameter name="S11"/>
          <template-type-parameter name="S12"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>S3 &amp;</paramtype></parameter><parameter name="s4"><paramtype>S4 &amp;</paramtype></parameter><parameter name="s5"><paramtype>S5 &amp;</paramtype></parameter><parameter name="s6"><paramtype>S6 &amp;</paramtype></parameter><parameter name="s7"><paramtype>S7 &amp;</paramtype></parameter><parameter name="s8"><paramtype>S8 &amp;</paramtype></parameter><parameter name="s9"><paramtype>S9 &amp;</paramtype></parameter><parameter name="s10"><paramtype>S10 &amp;</paramtype></parameter><parameter name="s11"><paramtype>S11 &amp;</paramtype></parameter><parameter name="s12"><paramtype>S12 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each13" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="S4"/>
          <template-type-parameter name="S5"/>
          <template-type-parameter name="S6"/>
          <template-type-parameter name="S7"/>
          <template-type-parameter name="S8"/>
          <template-type-parameter name="S9"/>
          <template-type-parameter name="S10"/>
          <template-type-parameter name="S11"/>
          <template-type-parameter name="S12"/>
          <template-type-parameter name="S13"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>S3 &amp;</paramtype></parameter><parameter name="s4"><paramtype>S4 &amp;</paramtype></parameter><parameter name="s5"><paramtype>S5 &amp;</paramtype></parameter><parameter name="s6"><paramtype>S6 &amp;</paramtype></parameter><parameter name="s7"><paramtype>S7 &amp;</paramtype></parameter><parameter name="s8"><paramtype>S8 &amp;</paramtype></parameter><parameter name="s9"><paramtype>S9 &amp;</paramtype></parameter><parameter name="s10"><paramtype>S10 &amp;</paramtype></parameter><parameter name="s11"><paramtype>S11 &amp;</paramtype></parameter><parameter name="s12"><paramtype>S12 &amp;</paramtype></parameter><parameter name="s13"><paramtype>S13 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each14" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="S4"/>
          <template-type-parameter name="S5"/>
          <template-type-parameter name="S6"/>
          <template-type-parameter name="S7"/>
          <template-type-parameter name="S8"/>
          <template-type-parameter name="S9"/>
          <template-type-parameter name="S10"/>
          <template-type-parameter name="S11"/>
          <template-type-parameter name="S12"/>
          <template-type-parameter name="S13"/>
          <template-type-parameter name="S14"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>S3 &amp;</paramtype></parameter><parameter name="s4"><paramtype>S4 &amp;</paramtype></parameter><parameter name="s5"><paramtype>S5 &amp;</paramtype></parameter><parameter name="s6"><paramtype>S6 &amp;</paramtype></parameter><parameter name="s7"><paramtype>S7 &amp;</paramtype></parameter><parameter name="s8"><paramtype>S8 &amp;</paramtype></parameter><parameter name="s9"><paramtype>S9 &amp;</paramtype></parameter><parameter name="s10"><paramtype>S10 &amp;</paramtype></parameter><parameter name="s11"><paramtype>S11 &amp;</paramtype></parameter><parameter name="s12"><paramtype>S12 &amp;</paramtype></parameter><parameter name="s13"><paramtype>S13 &amp;</paramtype></parameter><parameter name="s14"><paramtype>S14 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each15" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="S4"/>
          <template-type-parameter name="S5"/>
          <template-type-parameter name="S6"/>
          <template-type-parameter name="S7"/>
          <template-type-parameter name="S8"/>
          <template-type-parameter name="S9"/>
          <template-type-parameter name="S10"/>
          <template-type-parameter name="S11"/>
          <template-type-parameter name="S12"/>
          <template-type-parameter name="S13"/>
          <template-type-parameter name="S14"/>
          <template-type-parameter name="S15"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>S3 &amp;</paramtype></parameter><parameter name="s4"><paramtype>S4 &amp;</paramtype></parameter><parameter name="s5"><paramtype>S5 &amp;</paramtype></parameter><parameter name="s6"><paramtype>S6 &amp;</paramtype></parameter><parameter name="s7"><paramtype>S7 &amp;</paramtype></parameter><parameter name="s8"><paramtype>S8 &amp;</paramtype></parameter><parameter name="s9"><paramtype>S9 &amp;</paramtype></parameter><parameter name="s10"><paramtype>S10 &amp;</paramtype></parameter><parameter name="s11"><paramtype>S11 &amp;</paramtype></parameter><parameter name="s12"><paramtype>S12 &amp;</paramtype></parameter><parameter name="s13"><paramtype>S13 &amp;</paramtype></parameter><parameter name="s14"><paramtype>S14 &amp;</paramtype></parameter><parameter name="s15"><paramtype>S15 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each2" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each3" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>S3 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each4" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="S4"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>S3 &amp;</paramtype></parameter><parameter name="s4"><paramtype>S4 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each5" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="S4"/>
          <template-type-parameter name="S5"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>S3 &amp;</paramtype></parameter><parameter name="s4"><paramtype>S4 &amp;</paramtype></parameter><parameter name="s5"><paramtype>S5 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each6" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="S4"/>
          <template-type-parameter name="S5"/>
          <template-type-parameter name="S6"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>S3 &amp;</paramtype></parameter><parameter name="s4"><paramtype>S4 &amp;</paramtype></parameter><parameter name="s5"><paramtype>S5 &amp;</paramtype></parameter><parameter name="s6"><paramtype>S6 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each7" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="S4"/>
          <template-type-parameter name="S5"/>
          <template-type-parameter name="S6"/>
          <template-type-parameter name="S7"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>S3 &amp;</paramtype></parameter><parameter name="s4"><paramtype>S4 &amp;</paramtype></parameter><parameter name="s5"><paramtype>S5 &amp;</paramtype></parameter><parameter name="s6"><paramtype>S6 &amp;</paramtype></parameter><parameter name="s7"><paramtype>S7 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each8" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="S4"/>
          <template-type-parameter name="S5"/>
          <template-type-parameter name="S6"/>
          <template-type-parameter name="S7"/>
          <template-type-parameter name="S8"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>S3 &amp;</paramtype></parameter><parameter name="s4"><paramtype>S4 &amp;</paramtype></parameter><parameter name="s5"><paramtype>S5 &amp;</paramtype></parameter><parameter name="s6"><paramtype>S6 &amp;</paramtype></parameter><parameter name="s7"><paramtype>S7 &amp;</paramtype></parameter><parameter name="s8"><paramtype>S8 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each9" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="S4"/>
          <template-type-parameter name="S5"/>
          <template-type-parameter name="S6"/>
          <template-type-parameter name="S7"/>
          <template-type-parameter name="S8"/>
          <template-type-parameter name="S9"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>S3 &amp;</paramtype></parameter><parameter name="s4"><paramtype>S4 &amp;</paramtype></parameter><parameter name="s5"><paramtype>S5 &amp;</paramtype></parameter><parameter name="s6"><paramtype>S6 &amp;</paramtype></parameter><parameter name="s7"><paramtype>S7 &amp;</paramtype></parameter><parameter name="s8"><paramtype>S8 &amp;</paramtype></parameter><parameter name="s9"><paramtype>S9 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="reduce" cv=""><type>static Value</type><template>
          <template-type-parameter name="Value"/>
          <template-type-parameter name="S"/>
          <template-type-parameter name="Red"/>
        </template><parameter name="s"><paramtype>const S &amp;</paramtype></parameter><parameter name="red"><paramtype>Red</paramtype></parameter><parameter name="init"><paramtype>Value</paramtype></parameter></method><method name="reduce2" cv=""><type>static Value</type><template>
          <template-type-parameter name="Value"/>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="Red"/>
        </template><parameter name="s1"><paramtype>const S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>const S2 &amp;</paramtype></parameter><parameter name="red"><paramtype>Red</paramtype></parameter><parameter name="init"><paramtype>Value</paramtype></parameter></method><method name="reduce3" cv=""><type>static Value</type><template>
          <template-type-parameter name="Value"/>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="Red"/>
        </template><parameter name="s1"><paramtype>const S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>const S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>const S3 &amp;</paramtype></parameter><parameter name="red"><paramtype>Red</paramtype></parameter><parameter name="init"><paramtype>Value</paramtype></parameter></method><method name="reduce4" cv=""><type>static Value</type><template>
          <template-type-parameter name="Value"/>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="S4"/>
          <template-type-parameter name="Red"/>
        </template><parameter name="s1"><paramtype>const S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>const S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>const S3 &amp;</paramtype></parameter><parameter name="s4"><paramtype>const S4 &amp;</paramtype></parameter><parameter name="red"><paramtype>Red</paramtype></parameter><parameter name="init"><paramtype>Value</paramtype></parameter></method></method-group></struct></namespace></namespace></namespace></header><header name="boost/numeric/odeint/algebra/vector_space_algebra.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><struct name="vector_space_algebra"><method-group name="public static functions"><method name="for_each1" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each10" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="S4"/>
          <template-type-parameter name="S5"/>
          <template-type-parameter name="S6"/>
          <template-type-parameter name="S7"/>
          <template-type-parameter name="S8"/>
          <template-type-parameter name="S9"/>
          <template-type-parameter name="S10"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>S3 &amp;</paramtype></parameter><parameter name="s4"><paramtype>S4 &amp;</paramtype></parameter><parameter name="s5"><paramtype>S5 &amp;</paramtype></parameter><parameter name="s6"><paramtype>S6 &amp;</paramtype></parameter><parameter name="s7"><paramtype>S7 &amp;</paramtype></parameter><parameter name="s8"><paramtype>S8 &amp;</paramtype></parameter><parameter name="s9"><paramtype>S9 &amp;</paramtype></parameter><parameter name="s10"><paramtype>S10 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each11" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="S4"/>
          <template-type-parameter name="S5"/>
          <template-type-parameter name="S6"/>
          <template-type-parameter name="S7"/>
          <template-type-parameter name="S8"/>
          <template-type-parameter name="S9"/>
          <template-type-parameter name="S10"/>
          <template-type-parameter name="S11"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>S3 &amp;</paramtype></parameter><parameter name="s4"><paramtype>S4 &amp;</paramtype></parameter><parameter name="s5"><paramtype>S5 &amp;</paramtype></parameter><parameter name="s6"><paramtype>S6 &amp;</paramtype></parameter><parameter name="s7"><paramtype>S7 &amp;</paramtype></parameter><parameter name="s8"><paramtype>S8 &amp;</paramtype></parameter><parameter name="s9"><paramtype>S9 &amp;</paramtype></parameter><parameter name="s10"><paramtype>S10 &amp;</paramtype></parameter><parameter name="s11"><paramtype>S11 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each12" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="S4"/>
          <template-type-parameter name="S5"/>
          <template-type-parameter name="S6"/>
          <template-type-parameter name="S7"/>
          <template-type-parameter name="S8"/>
          <template-type-parameter name="S9"/>
          <template-type-parameter name="S10"/>
          <template-type-parameter name="S11"/>
          <template-type-parameter name="S12"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>S3 &amp;</paramtype></parameter><parameter name="s4"><paramtype>S4 &amp;</paramtype></parameter><parameter name="s5"><paramtype>S5 &amp;</paramtype></parameter><parameter name="s6"><paramtype>S6 &amp;</paramtype></parameter><parameter name="s7"><paramtype>S7 &amp;</paramtype></parameter><parameter name="s8"><paramtype>S8 &amp;</paramtype></parameter><parameter name="s9"><paramtype>S9 &amp;</paramtype></parameter><parameter name="s10"><paramtype>S10 &amp;</paramtype></parameter><parameter name="s11"><paramtype>S11 &amp;</paramtype></parameter><parameter name="s12"><paramtype>S12 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each13" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="S4"/>
          <template-type-parameter name="S5"/>
          <template-type-parameter name="S6"/>
          <template-type-parameter name="S7"/>
          <template-type-parameter name="S8"/>
          <template-type-parameter name="S9"/>
          <template-type-parameter name="S10"/>
          <template-type-parameter name="S11"/>
          <template-type-parameter name="S12"/>
          <template-type-parameter name="S13"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>S3 &amp;</paramtype></parameter><parameter name="s4"><paramtype>S4 &amp;</paramtype></parameter><parameter name="s5"><paramtype>S5 &amp;</paramtype></parameter><parameter name="s6"><paramtype>S6 &amp;</paramtype></parameter><parameter name="s7"><paramtype>S7 &amp;</paramtype></parameter><parameter name="s8"><paramtype>S8 &amp;</paramtype></parameter><parameter name="s9"><paramtype>S9 &amp;</paramtype></parameter><parameter name="s10"><paramtype>S10 &amp;</paramtype></parameter><parameter name="s11"><paramtype>S11 &amp;</paramtype></parameter><parameter name="s12"><paramtype>S12 &amp;</paramtype></parameter><parameter name="s13"><paramtype>S13 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each14" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="S4"/>
          <template-type-parameter name="S5"/>
          <template-type-parameter name="S6"/>
          <template-type-parameter name="S7"/>
          <template-type-parameter name="S8"/>
          <template-type-parameter name="S9"/>
          <template-type-parameter name="S10"/>
          <template-type-parameter name="S11"/>
          <template-type-parameter name="S12"/>
          <template-type-parameter name="S13"/>
          <template-type-parameter name="S14"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>S3 &amp;</paramtype></parameter><parameter name="s4"><paramtype>S4 &amp;</paramtype></parameter><parameter name="s5"><paramtype>S5 &amp;</paramtype></parameter><parameter name="s6"><paramtype>S6 &amp;</paramtype></parameter><parameter name="s7"><paramtype>S7 &amp;</paramtype></parameter><parameter name="s8"><paramtype>S8 &amp;</paramtype></parameter><parameter name="s9"><paramtype>S9 &amp;</paramtype></parameter><parameter name="s10"><paramtype>S10 &amp;</paramtype></parameter><parameter name="s11"><paramtype>S11 &amp;</paramtype></parameter><parameter name="s12"><paramtype>S12 &amp;</paramtype></parameter><parameter name="s13"><paramtype>S13 &amp;</paramtype></parameter><parameter name="s14"><paramtype>S14 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each15" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="S4"/>
          <template-type-parameter name="S5"/>
          <template-type-parameter name="S6"/>
          <template-type-parameter name="S7"/>
          <template-type-parameter name="S8"/>
          <template-type-parameter name="S9"/>
          <template-type-parameter name="S10"/>
          <template-type-parameter name="S11"/>
          <template-type-parameter name="S12"/>
          <template-type-parameter name="S13"/>
          <template-type-parameter name="S14"/>
          <template-type-parameter name="S15"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>S3 &amp;</paramtype></parameter><parameter name="s4"><paramtype>S4 &amp;</paramtype></parameter><parameter name="s5"><paramtype>S5 &amp;</paramtype></parameter><parameter name="s6"><paramtype>S6 &amp;</paramtype></parameter><parameter name="s7"><paramtype>S7 &amp;</paramtype></parameter><parameter name="s8"><paramtype>S8 &amp;</paramtype></parameter><parameter name="s9"><paramtype>S9 &amp;</paramtype></parameter><parameter name="s10"><paramtype>S10 &amp;</paramtype></parameter><parameter name="s11"><paramtype>S11 &amp;</paramtype></parameter><parameter name="s12"><paramtype>S12 &amp;</paramtype></parameter><parameter name="s13"><paramtype>S13 &amp;</paramtype></parameter><parameter name="s14"><paramtype>S14 &amp;</paramtype></parameter><parameter name="s15"><paramtype>S15 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each2" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each3" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>S3 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each4" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="S4"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>S3 &amp;</paramtype></parameter><parameter name="s4"><paramtype>S4 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each5" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="S4"/>
          <template-type-parameter name="S5"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>S3 &amp;</paramtype></parameter><parameter name="s4"><paramtype>S4 &amp;</paramtype></parameter><parameter name="s5"><paramtype>S5 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each6" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="S4"/>
          <template-type-parameter name="S5"/>
          <template-type-parameter name="S6"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>S3 &amp;</paramtype></parameter><parameter name="s4"><paramtype>S4 &amp;</paramtype></parameter><parameter name="s5"><paramtype>S5 &amp;</paramtype></parameter><parameter name="s6"><paramtype>S6 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each7" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="S4"/>
          <template-type-parameter name="S5"/>
          <template-type-parameter name="S6"/>
          <template-type-parameter name="S7"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>S3 &amp;</paramtype></parameter><parameter name="s4"><paramtype>S4 &amp;</paramtype></parameter><parameter name="s5"><paramtype>S5 &amp;</paramtype></parameter><parameter name="s6"><paramtype>S6 &amp;</paramtype></parameter><parameter name="s7"><paramtype>S7 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each8" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="S4"/>
          <template-type-parameter name="S5"/>
          <template-type-parameter name="S6"/>
          <template-type-parameter name="S7"/>
          <template-type-parameter name="S8"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>S3 &amp;</paramtype></parameter><parameter name="s4"><paramtype>S4 &amp;</paramtype></parameter><parameter name="s5"><paramtype>S5 &amp;</paramtype></parameter><parameter name="s6"><paramtype>S6 &amp;</paramtype></parameter><parameter name="s7"><paramtype>S7 &amp;</paramtype></parameter><parameter name="s8"><paramtype>S8 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="for_each9" cv=""><type>static void</type><template>
          <template-type-parameter name="S1"/>
          <template-type-parameter name="S2"/>
          <template-type-parameter name="S3"/>
          <template-type-parameter name="S4"/>
          <template-type-parameter name="S5"/>
          <template-type-parameter name="S6"/>
          <template-type-parameter name="S7"/>
          <template-type-parameter name="S8"/>
          <template-type-parameter name="S9"/>
          <template-type-parameter name="Op"/>
        </template><parameter name="s1"><paramtype>S1 &amp;</paramtype></parameter><parameter name="s2"><paramtype>S2 &amp;</paramtype></parameter><parameter name="s3"><paramtype>S3 &amp;</paramtype></parameter><parameter name="s4"><paramtype>S4 &amp;</paramtype></parameter><parameter name="s5"><paramtype>S5 &amp;</paramtype></parameter><parameter name="s6"><paramtype>S6 &amp;</paramtype></parameter><parameter name="s7"><paramtype>S7 &amp;</paramtype></parameter><parameter name="s8"><paramtype>S8 &amp;</paramtype></parameter><parameter name="s9"><paramtype>S9 &amp;</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter></method><method name="reduce" cv=""><type>static Value</type><template>
          <template-type-parameter name="Value"/>
          <template-type-parameter name="S"/>
          <template-type-parameter name="Red"/>
        </template><parameter name="s"><paramtype>const S &amp;</paramtype></parameter><parameter name="red"><paramtype>Red</paramtype></parameter><parameter name="init"><paramtype>Value</paramtype></parameter></method></method-group></struct><struct-specialization name="vector_space_reduce"><template>
    </template><specialization><template-arg>double</template-arg></specialization><method-group name="public member functions"><method name="operator()" cv="const"><type>double</type><template>
          <template-type-parameter name="Op"/>
        </template><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="op"><paramtype>Op</paramtype></parameter><parameter name="init"><paramtype>double</paramtype></parameter></method></method-group></struct-specialization></namespace></namespace></namespace></header><header name="boost/numeric/odeint/config.hpp"><macro name="BOOST_FUSION_INVOKE_MAX_ARITY"/><macro name="BOOST_RESULT_OF_NUM_ARGS"/><macro name="FUSION_MAX_VECTOR_SIZE"/></header><header name="boost/numeric/odeint/integrate/integrate.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><function name="integrate"><type>size_t</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="State"/>
          <template-type-parameter name="Time"/>
          <template-type-parameter name="Observer"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="start_state"><paramtype>State &amp;</paramtype></parameter><parameter name="start_time"><paramtype>Time</paramtype></parameter><parameter name="end_time"><paramtype>Time</paramtype></parameter><parameter name="dt"><paramtype>Time</paramtype></parameter><parameter name="observer"><paramtype>Observer</paramtype></parameter></function><function name="integrate"><type>size_t</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="State"/>
          <template-type-parameter name="Time"/>
          <template-type-parameter name="Observer"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="start_state"><paramtype>const State &amp;</paramtype></parameter><parameter name="start_time"><paramtype>Time</paramtype></parameter><parameter name="end_time"><paramtype>Time</paramtype></parameter><parameter name="dt"><paramtype>Time</paramtype></parameter><parameter name="observer"><paramtype>Observer</paramtype></parameter></function><function name="integrate"><type>size_t</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="State"/>
          <template-type-parameter name="Time"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="start_state"><paramtype>State &amp;</paramtype></parameter><parameter name="start_time"><paramtype>Time</paramtype></parameter><parameter name="end_time"><paramtype>Time</paramtype></parameter><parameter name="dt"><paramtype>Time</paramtype></parameter></function><function name="integrate"><type>size_t</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="State"/>
          <template-type-parameter name="Time"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="start_state"><paramtype>const State &amp;</paramtype></parameter><parameter name="start_time"><paramtype>Time</paramtype></parameter><parameter name="end_time"><paramtype>Time</paramtype></parameter><parameter name="dt"><paramtype>Time</paramtype></parameter></function></namespace></namespace></namespace></header><header name="boost/numeric/odeint/integrate/integrate_adaptive.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><function name="integrate_adaptive"><type>size_t</type><template>
          <template-type-parameter name="Stepper"/>
          <template-type-parameter name="System"/>
          <template-type-parameter name="State"/>
          <template-type-parameter name="Time"/>
          <template-type-parameter name="Observer"/>
        </template><parameter name="stepper"><paramtype>Stepper</paramtype></parameter><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="start_state"><paramtype>State &amp;</paramtype></parameter><parameter name="start_time"><paramtype>Time</paramtype></parameter><parameter name="end_time"><paramtype>Time</paramtype></parameter><parameter name="dt"><paramtype>Time</paramtype></parameter><parameter name="observer"><paramtype>Observer</paramtype></parameter></function><function name="integrate_adaptive"><type>size_t</type><template>
          <template-type-parameter name="Stepper"/>
          <template-type-parameter name="System"/>
          <template-type-parameter name="State"/>
          <template-type-parameter name="Time"/>
          <template-type-parameter name="Observer"/>
        </template><parameter name="stepper"><paramtype>Stepper</paramtype></parameter><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="start_state"><paramtype>const State &amp;</paramtype></parameter><parameter name="start_time"><paramtype>Time</paramtype></parameter><parameter name="end_time"><paramtype>Time</paramtype></parameter><parameter name="dt"><paramtype>Time</paramtype></parameter><parameter name="observer"><paramtype>Observer</paramtype></parameter></function><function name="integrate_adaptive"><type>size_t</type><template>
          <template-type-parameter name="Stepper"/>
          <template-type-parameter name="System"/>
          <template-type-parameter name="State"/>
          <template-type-parameter name="Time"/>
        </template><parameter name="stepper"><paramtype>Stepper</paramtype></parameter><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="start_state"><paramtype>State &amp;</paramtype></parameter><parameter name="start_time"><paramtype>Time</paramtype></parameter><parameter name="end_time"><paramtype>Time</paramtype></parameter><parameter name="dt"><paramtype>Time</paramtype></parameter></function><function name="integrate_adaptive"><type>size_t</type><template>
          <template-type-parameter name="Stepper"/>
          <template-type-parameter name="System"/>
          <template-type-parameter name="State"/>
          <template-type-parameter name="Time"/>
        </template><parameter name="stepper"><paramtype>Stepper</paramtype></parameter><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="start_state"><paramtype>const State &amp;</paramtype></parameter><parameter name="start_time"><paramtype>Time</paramtype></parameter><parameter name="end_time"><paramtype>Time</paramtype></parameter><parameter name="dt"><paramtype>Time</paramtype></parameter></function></namespace></namespace></namespace></header><header name="boost/numeric/odeint/integrate/integrate_const.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><function name="integrate_const"><type>size_t</type><template>
          <template-type-parameter name="Stepper"/>
          <template-type-parameter name="System"/>
          <template-type-parameter name="State"/>
          <template-type-parameter name="Time"/>
          <template-type-parameter name="Observer"/>
        </template><parameter name="stepper"><paramtype>Stepper</paramtype></parameter><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="start_state"><paramtype>State &amp;</paramtype></parameter><parameter name="start_time"><paramtype>Time</paramtype></parameter><parameter name="end_time"><paramtype>Time</paramtype></parameter><parameter name="dt"><paramtype>Time</paramtype></parameter><parameter name="observer"><paramtype>Observer</paramtype></parameter></function><function name="integrate_const"><type>size_t</type><template>
          <template-type-parameter name="Stepper"/>
          <template-type-parameter name="System"/>
          <template-type-parameter name="State"/>
          <template-type-parameter name="Time"/>
          <template-type-parameter name="Observer"/>
        </template><parameter name="stepper"><paramtype>Stepper</paramtype></parameter><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="start_state"><paramtype>const State &amp;</paramtype></parameter><parameter name="start_time"><paramtype>Time</paramtype></parameter><parameter name="end_time"><paramtype>Time</paramtype></parameter><parameter name="dt"><paramtype>Time</paramtype></parameter><parameter name="observer"><paramtype>Observer</paramtype></parameter></function><function name="integrate_const"><type>size_t</type><template>
          <template-type-parameter name="Stepper"/>
          <template-type-parameter name="System"/>
          <template-type-parameter name="State"/>
          <template-type-parameter name="Time"/>
        </template><parameter name="stepper"><paramtype>Stepper</paramtype></parameter><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="start_state"><paramtype>State &amp;</paramtype></parameter><parameter name="start_time"><paramtype>Time</paramtype></parameter><parameter name="end_time"><paramtype>Time</paramtype></parameter><parameter name="dt"><paramtype>Time</paramtype></parameter></function><function name="integrate_const"><type>size_t</type><template>
          <template-type-parameter name="Stepper"/>
          <template-type-parameter name="System"/>
          <template-type-parameter name="State"/>
          <template-type-parameter name="Time"/>
        </template><parameter name="stepper"><paramtype>Stepper</paramtype></parameter><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="start_state"><paramtype>const State &amp;</paramtype></parameter><parameter name="start_time"><paramtype>Time</paramtype></parameter><parameter name="end_time"><paramtype>Time</paramtype></parameter><parameter name="dt"><paramtype>Time</paramtype></parameter></function></namespace></namespace></namespace></header><header name="boost/numeric/odeint/integrate/integrate_n_steps.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><function name="integrate_n_steps"><type>Time</type><template>
          <template-type-parameter name="Stepper"/>
          <template-type-parameter name="System"/>
          <template-type-parameter name="State"/>
          <template-type-parameter name="Time"/>
          <template-type-parameter name="Observer"/>
        </template><parameter name="stepper"><paramtype>Stepper</paramtype></parameter><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="start_state"><paramtype>State &amp;</paramtype></parameter><parameter name="start_time"><paramtype>Time</paramtype></parameter><parameter name="dt"><paramtype>Time</paramtype></parameter><parameter name="num_of_steps"><paramtype>size_t</paramtype></parameter><parameter name="observer"><paramtype>Observer</paramtype></parameter></function><function name="integrate_n_steps"><type>Time</type><template>
          <template-type-parameter name="Stepper"/>
          <template-type-parameter name="System"/>
          <template-type-parameter name="State"/>
          <template-type-parameter name="Time"/>
          <template-type-parameter name="Observer"/>
        </template><parameter name="stepper"><paramtype>Stepper</paramtype></parameter><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="start_state"><paramtype>const State &amp;</paramtype></parameter><parameter name="start_time"><paramtype>Time</paramtype></parameter><parameter name="dt"><paramtype>Time</paramtype></parameter><parameter name="num_of_steps"><paramtype>size_t</paramtype></parameter><parameter name="observer"><paramtype>Observer</paramtype></parameter></function><function name="integrate_n_steps"><type>Time</type><template>
          <template-type-parameter name="Stepper"/>
          <template-type-parameter name="System"/>
          <template-type-parameter name="State"/>
          <template-type-parameter name="Time"/>
        </template><parameter name="stepper"><paramtype>Stepper</paramtype></parameter><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="start_state"><paramtype>State &amp;</paramtype></parameter><parameter name="start_time"><paramtype>Time</paramtype></parameter><parameter name="dt"><paramtype>Time</paramtype></parameter><parameter name="num_of_steps"><paramtype>size_t</paramtype></parameter></function><function name="integrate_n_steps"><type>Time</type><template>
          <template-type-parameter name="Stepper"/>
          <template-type-parameter name="System"/>
          <template-type-parameter name="State"/>
          <template-type-parameter name="Time"/>
        </template><parameter name="stepper"><paramtype>Stepper</paramtype></parameter><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="start_state"><paramtype>const State &amp;</paramtype></parameter><parameter name="start_time"><paramtype>Time</paramtype></parameter><parameter name="dt"><paramtype>Time</paramtype></parameter><parameter name="num_of_steps"><paramtype>size_t</paramtype></parameter></function></namespace></namespace></namespace></header><header name="boost/numeric/odeint/integrate/integrate_times.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><function name="integrate_times"><type>size_t</type><template>
          <template-type-parameter name="Stepper"/>
          <template-type-parameter name="System"/>
          <template-type-parameter name="State"/>
          <template-type-parameter name="TimeIterator"/>
          <template-type-parameter name="Time"/>
          <template-type-parameter name="Observer"/>
        </template><parameter name="stepper"><paramtype>Stepper</paramtype></parameter><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="start_state"><paramtype>State &amp;</paramtype></parameter><parameter name="times_start"><paramtype>TimeIterator</paramtype></parameter><parameter name="times_end"><paramtype>TimeIterator</paramtype></parameter><parameter name="dt"><paramtype>Time</paramtype></parameter><parameter name="observer"><paramtype>Observer</paramtype></parameter></function><function name="integrate_times"><type>size_t</type><template>
          <template-type-parameter name="Stepper"/>
          <template-type-parameter name="System"/>
          <template-type-parameter name="State"/>
          <template-type-parameter name="TimeIterator"/>
          <template-type-parameter name="Time"/>
          <template-type-parameter name="Observer"/>
        </template><parameter name="stepper"><paramtype>Stepper</paramtype></parameter><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="start_state"><paramtype>const State &amp;</paramtype></parameter><parameter name="times_start"><paramtype>TimeIterator</paramtype></parameter><parameter name="times_end"><paramtype>TimeIterator</paramtype></parameter><parameter name="dt"><paramtype>Time</paramtype></parameter><parameter name="observer"><paramtype>Observer</paramtype></parameter></function><function name="integrate_times"><type>size_t</type><template>
          <template-type-parameter name="Stepper"/>
          <template-type-parameter name="System"/>
          <template-type-parameter name="State"/>
          <template-type-parameter name="TimeRange"/>
          <template-type-parameter name="Time"/>
          <template-type-parameter name="Observer"/>
        </template><parameter name="stepper"><paramtype>Stepper</paramtype></parameter><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="start_state"><paramtype>State &amp;</paramtype></parameter><parameter name="times"><paramtype>const TimeRange &amp;</paramtype></parameter><parameter name="dt"><paramtype>Time</paramtype></parameter><parameter name="observer"><paramtype>Observer</paramtype></parameter></function><function name="integrate_times"><type>size_t</type><template>
          <template-type-parameter name="Stepper"/>
          <template-type-parameter name="System"/>
          <template-type-parameter name="State"/>
          <template-type-parameter name="TimeRange"/>
          <template-type-parameter name="Time"/>
          <template-type-parameter name="Observer"/>
        </template><parameter name="stepper"><paramtype>Stepper</paramtype></parameter><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="start_state"><paramtype>const State &amp;</paramtype></parameter><parameter name="times"><paramtype>const TimeRange &amp;</paramtype></parameter><parameter name="dt"><paramtype>Time</paramtype></parameter><parameter name="observer"><paramtype>Observer</paramtype></parameter></function></namespace></namespace></namespace></header><header name="boost/numeric/odeint/integrate/null_observer.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><struct name="null_observer"><method-group name="public member functions"><method name="operator()" cv="const"><type>void</type><template>
          <template-type-parameter name="State"/>
          <template-type-parameter name="Time"/>
        </template><parameter name=""><paramtype>const State &amp;</paramtype></parameter><parameter name=""><paramtype>Time</paramtype></parameter></method></method-group></struct></namespace></namespace></namespace></header><header name="boost/numeric/odeint/integrate/observer_collection.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><class name="observer_collection"><template>
      <template-type-parameter name="State"/>
      <template-type-parameter name="Time"/>
    </template><typedef name="collection_type"><type>std::vector&lt; observer_type &gt;</type></typedef><typedef name="observer_type"><type>boost::function&lt; void(const State &amp;, const Time &amp;) &gt;</type></typedef><method-group name="public member functions"><method name="observers" cv=""><type>collection_type &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="observers" cv="const"><type>const collection_type &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="operator()" cv=""><type>void</type><parameter name="x"><paramtype>const State &amp;</paramtype></parameter><parameter name="t"><paramtype>Time</paramtype></parameter></method></method-group></class></namespace></namespace></namespace></header><header name="boost/numeric/odeint/iterator/adaptive_iterator.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><class-specialization name="adaptive_iterator"><template>
      <template-type-parameter name="Stepper"/>
      <template-type-parameter name="System"/>
    </template><specialization><template-arg>Stepper</template-arg><template-arg>System</template-arg><template-arg>controlled_stepper_tag</template-arg></specialization><method-group name="public member functions"><method name="adaptive_iterator" cv=""><type/><parameter name="stepper"><paramtype>stepper_type</paramtype></parameter><parameter name="sys"><paramtype>system_type</paramtype></parameter><parameter name="s"><paramtype>state_type &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="t_end"><paramtype>time_type</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter></method><method name="adaptive_iterator" cv=""><type/><parameter name="stepper"><paramtype>stepper_type</paramtype></parameter><parameter name="sys"><paramtype>system_type</paramtype></parameter><parameter name="s"><paramtype>state_type &amp;</paramtype></parameter></method></method-group><method-group name="protected member functions"><method name="increment" cv=""><type>void</type></method></method-group></class-specialization><class-specialization name="adaptive_iterator"><template>
      <template-type-parameter name="Stepper"/>
      <template-type-parameter name="System"/>
    </template><specialization><template-arg>Stepper</template-arg><template-arg>System</template-arg><template-arg>dense_output_stepper_tag</template-arg></specialization><method-group name="public member functions"><method name="adaptive_iterator" cv=""><type/><parameter name="stepper"><paramtype>stepper_type</paramtype></parameter><parameter name="sys"><paramtype>system_type</paramtype></parameter><parameter name="s"><paramtype>state_type &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="t_end"><paramtype>time_type</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter></method><method name="adaptive_iterator" cv=""><type/><parameter name="stepper"><paramtype>stepper_type</paramtype></parameter><parameter name="sys"><paramtype>system_type</paramtype></parameter><parameter name="s"><paramtype>state_type &amp;</paramtype></parameter></method></method-group><method-group name="protected member functions"><method name="dereference" cv="const"><type>const state_type &amp;</type></method><method name="increment" cv=""><type>void</type></method></method-group></class-specialization><function name="make_adaptive_iterator_begin"><type>adaptive_iterator&lt; Stepper, System &gt;</type><template>
          <template-type-parameter name="Stepper"/>
          <template-type-parameter name="System"/>
        </template><parameter name="stepper"><paramtype>Stepper</paramtype></parameter><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="x"><paramtype>typename Stepper::state_type &amp;</paramtype></parameter><parameter name="t"><paramtype>typename Stepper::time_type</paramtype></parameter><parameter name="t_end"><paramtype>typename Stepper::time_type</paramtype></parameter><parameter name="dt"><paramtype>typename Stepper::time_type</paramtype></parameter></function><function name="make_adaptive_iterator_end"><type>adaptive_iterator&lt; Stepper, System &gt;</type><template>
          <template-type-parameter name="Stepper"/>
          <template-type-parameter name="System"/>
        </template><parameter name="stepper"><paramtype>Stepper</paramtype></parameter><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="x"><paramtype>typename Stepper::state_type &amp;</paramtype></parameter></function><function name="make_adaptive_range"><type>std::pair&lt; adaptive_iterator&lt; Stepper, System &gt;, adaptive_iterator&lt; Stepper, System &gt; &gt;</type><template>
          <template-type-parameter name="Stepper"/>
          <template-type-parameter name="System"/>
        </template><parameter name="stepper"><paramtype>Stepper</paramtype></parameter><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="x"><paramtype>typename Stepper::state_type &amp;</paramtype></parameter><parameter name="t_start"><paramtype>typename Stepper::time_type</paramtype></parameter><parameter name="t_end"><paramtype>typename Stepper::time_type</paramtype></parameter><parameter name="dt"><paramtype>typename Stepper::time_type</paramtype></parameter></function></namespace></namespace></namespace></header><header name="boost/numeric/odeint/iterator/adaptive_time_iterator.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><class-specialization name="adaptive_time_iterator"><template>
      <template-type-parameter name="Stepper"/>
      <template-type-parameter name="System"/>
    </template><specialization><template-arg>Stepper</template-arg><template-arg>System</template-arg><template-arg>controlled_stepper_tag</template-arg></specialization><method-group name="public member functions"><method name="adaptive_time_iterator" cv=""><type/><parameter name="stepper"><paramtype>stepper_type</paramtype></parameter><parameter name="sys"><paramtype>system_type</paramtype></parameter><parameter name="s"><paramtype>state_type &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="t_end"><paramtype>time_type</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter></method><method name="adaptive_time_iterator" cv=""><type/><parameter name="stepper"><paramtype>stepper_type</paramtype></parameter><parameter name="sys"><paramtype>system_type</paramtype></parameter><parameter name="s"><paramtype>state_type &amp;</paramtype></parameter></method></method-group><method-group name="private member functions"><method name="increment" cv=""><type>void</type></method></method-group></class-specialization><class-specialization name="adaptive_time_iterator"><template>
      <template-type-parameter name="Stepper"/>
      <template-type-parameter name="System"/>
    </template><specialization><template-arg>Stepper</template-arg><template-arg>System</template-arg><template-arg>dense_output_stepper_tag</template-arg></specialization><method-group name="public member functions"><method name="adaptive_time_iterator" cv=""><type/><parameter name="stepper"><paramtype>stepper_type</paramtype></parameter><parameter name="sys"><paramtype>system_type</paramtype></parameter><parameter name="s"><paramtype>state_type &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="t_end"><paramtype>time_type</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter></method><method name="adaptive_time_iterator" cv=""><type/><parameter name="stepper"><paramtype>stepper_type</paramtype></parameter><parameter name="sys"><paramtype>system_type</paramtype></parameter><parameter name="s"><paramtype>state_type &amp;</paramtype></parameter></method></method-group><method-group name="private member functions"><method name="increment" cv=""><type>void</type></method></method-group></class-specialization><function name="make_adaptive_time_iterator_begin"><type>adaptive_time_iterator&lt; Stepper, System &gt;</type><template>
          <template-type-parameter name="Stepper"/>
          <template-type-parameter name="System"/>
        </template><parameter name="stepper"><paramtype>Stepper</paramtype></parameter><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="x"><paramtype>typename Stepper::state_type &amp;</paramtype></parameter><parameter name="t"><paramtype>typename Stepper::time_type</paramtype></parameter><parameter name="t_end"><paramtype>typename Stepper::time_type</paramtype></parameter><parameter name="dt"><paramtype>typename Stepper::time_type</paramtype></parameter></function><function name="make_adaptive_time_iterator_end"><type>adaptive_time_iterator&lt; Stepper, System &gt;</type><template>
          <template-type-parameter name="Stepper"/>
          <template-type-parameter name="System"/>
        </template><parameter name="stepper"><paramtype>Stepper</paramtype></parameter><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="x"><paramtype>typename Stepper::state_type &amp;</paramtype></parameter></function><function name="make_adaptive_time_range"><type>std::pair&lt; adaptive_time_iterator&lt; Stepper, System &gt;, adaptive_time_iterator&lt; Stepper, System &gt; &gt;</type><template>
          <template-type-parameter name="Stepper"/>
          <template-type-parameter name="System"/>
        </template><parameter name="stepper"><paramtype>Stepper</paramtype></parameter><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="x"><paramtype>typename Stepper::state_type &amp;</paramtype></parameter><parameter name="t_start"><paramtype>typename Stepper::time_type</paramtype></parameter><parameter name="t_end"><paramtype>typename Stepper::time_type</paramtype></parameter><parameter name="dt"><paramtype>typename Stepper::time_type</paramtype></parameter></function></namespace></namespace></namespace></header><header name="boost/numeric/odeint/iterator/const_step_iterator.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><class-specialization name="const_step_iterator"><template>
      <template-type-parameter name="Stepper"/>
      <template-type-parameter name="System"/>
    </template><specialization><template-arg>Stepper</template-arg><template-arg>System</template-arg><template-arg>dense_output_stepper_tag</template-arg></specialization><method-group name="public member functions"><method name="const_step_iterator" cv=""><type/><parameter name="stepper"><paramtype>stepper_type</paramtype></parameter><parameter name="sys"><paramtype>system_type</paramtype></parameter><parameter name="s"><paramtype>state_type &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="t_end"><paramtype>time_type</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter></method><method name="const_step_iterator" cv=""><type/><parameter name="stepper"><paramtype>stepper_type</paramtype></parameter><parameter name="sys"><paramtype>system_type</paramtype></parameter><parameter name="s"><paramtype>state_type &amp;</paramtype></parameter></method></method-group><method-group name="protected member functions"><method name="increment" cv=""><type>void</type><parameter name=""><paramtype>void</paramtype></parameter></method></method-group></class-specialization><class-specialization name="const_step_iterator"><template>
      <template-type-parameter name="Stepper"/>
      <template-type-parameter name="System"/>
    </template><specialization><template-arg>Stepper</template-arg><template-arg>System</template-arg><template-arg>stepper_tag</template-arg></specialization><method-group name="public member functions"><method name="const_step_iterator" cv=""><type/><parameter name="stepper"><paramtype>stepper_type</paramtype></parameter><parameter name="sys"><paramtype>system_type</paramtype></parameter><parameter name="s"><paramtype>state_type &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="t_end"><paramtype>time_type</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter></method><method name="const_step_iterator" cv=""><type/><parameter name="stepper"><paramtype>stepper_type</paramtype></parameter><parameter name="sys"><paramtype>system_type</paramtype></parameter><parameter name="s"><paramtype>state_type &amp;</paramtype></parameter></method></method-group><method-group name="protected member functions"><method name="increment" cv=""><type>void</type></method></method-group></class-specialization><function name="make_const_step_iterator_begin"><type>const_step_iterator&lt; Stepper, System &gt;</type><template>
          <template-type-parameter name="Stepper"/>
          <template-type-parameter name="System"/>
        </template><parameter name="stepper"><paramtype>Stepper</paramtype></parameter><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="x"><paramtype>typename Stepper::state_type &amp;</paramtype></parameter><parameter name="t"><paramtype>typename Stepper::time_type</paramtype></parameter><parameter name="t_end"><paramtype>typename Stepper::time_type</paramtype></parameter><parameter name="dt"><paramtype>typename Stepper::time_type</paramtype></parameter></function><function name="make_const_step_iterator_end"><type>const_step_iterator&lt; Stepper, System &gt;</type><template>
          <template-type-parameter name="Stepper"/>
          <template-type-parameter name="System"/>
        </template><parameter name="stepper"><paramtype>Stepper</paramtype></parameter><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="x"><paramtype>typename Stepper::state_type &amp;</paramtype></parameter></function><function name="make_const_step_range"><type>std::pair&lt; const_step_iterator&lt; Stepper, System &gt;, const_step_iterator&lt; Stepper, System &gt; &gt;</type><template>
          <template-type-parameter name="Stepper"/>
          <template-type-parameter name="System"/>
        </template><parameter name="stepper"><paramtype>Stepper</paramtype></parameter><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="x"><paramtype>typename Stepper::state_type &amp;</paramtype></parameter><parameter name="t_start"><paramtype>typename Stepper::time_type</paramtype></parameter><parameter name="t_end"><paramtype>typename Stepper::time_type</paramtype></parameter><parameter name="dt"><paramtype>typename Stepper::time_type</paramtype></parameter></function></namespace></namespace></namespace></header><header name="boost/numeric/odeint/iterator/const_step_time_iterator.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><class-specialization name="const_step_time_iterator"><template>
      <template-type-parameter name="Stepper"/>
      <template-type-parameter name="System"/>
    </template><specialization><template-arg>Stepper</template-arg><template-arg>System</template-arg><template-arg>dense_output_stepper_tag</template-arg></specialization><method-group name="public member functions"><method name="const_step_time_iterator" cv=""><type/><parameter name="stepper"><paramtype>stepper_type</paramtype></parameter><parameter name="sys"><paramtype>system_type</paramtype></parameter><parameter name="s"><paramtype>state_type &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="t_end"><paramtype>time_type</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter></method><method name="const_step_time_iterator" cv=""><type/><parameter name="stepper"><paramtype>stepper_type</paramtype></parameter><parameter name="sys"><paramtype>system_type</paramtype></parameter><parameter name="s"><paramtype>state_type &amp;</paramtype></parameter></method></method-group><method-group name="protected member functions"><method name="increment" cv=""><type>void</type></method></method-group></class-specialization><class-specialization name="const_step_time_iterator"><template>
      <template-type-parameter name="Stepper"/>
      <template-type-parameter name="System"/>
    </template><specialization><template-arg>Stepper</template-arg><template-arg>System</template-arg><template-arg>stepper_tag</template-arg></specialization><method-group name="public member functions"><method name="const_step_time_iterator" cv=""><type/><parameter name="stepper"><paramtype>stepper_type</paramtype></parameter><parameter name="sys"><paramtype>system_type</paramtype></parameter><parameter name="s"><paramtype>state_type &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="t_end"><paramtype>time_type</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter></method><method name="const_step_time_iterator" cv=""><type/><parameter name="stepper"><paramtype>stepper_type</paramtype></parameter><parameter name="sys"><paramtype>system_type</paramtype></parameter><parameter name="s"><paramtype>state_type &amp;</paramtype></parameter></method></method-group><method-group name="protected member functions"><method name="increment" cv=""><type>void</type></method></method-group></class-specialization><function name="make_const_step_time_iterator_begin"><type>const_step_time_iterator&lt; Stepper, System &gt;</type><template>
          <template-type-parameter name="Stepper"/>
          <template-type-parameter name="System"/>
        </template><parameter name="stepper"><paramtype>Stepper</paramtype></parameter><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="x"><paramtype>typename Stepper::state_type &amp;</paramtype></parameter><parameter name="t"><paramtype>typename Stepper::time_type</paramtype></parameter><parameter name="t_end"><paramtype>typename Stepper::time_type</paramtype></parameter><parameter name="dt"><paramtype>typename Stepper::time_type</paramtype></parameter></function><function name="make_const_step_time_iterator_end"><type>const_step_time_iterator&lt; Stepper, System &gt;</type><template>
          <template-type-parameter name="Stepper"/>
          <template-type-parameter name="System"/>
        </template><parameter name="stepper"><paramtype>Stepper</paramtype></parameter><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="x"><paramtype>typename Stepper::state_type &amp;</paramtype></parameter></function><function name="make_const_step_time_range"><type>std::pair&lt; const_step_time_iterator&lt; Stepper, System &gt;, const_step_time_iterator&lt; Stepper, System &gt; &gt;</type><template>
          <template-type-parameter name="Stepper"/>
          <template-type-parameter name="System"/>
        </template><parameter name="stepper"><paramtype>Stepper</paramtype></parameter><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="x"><paramtype>typename Stepper::state_type &amp;</paramtype></parameter><parameter name="t_start"><paramtype>typename Stepper::time_type</paramtype></parameter><parameter name="t_end"><paramtype>typename Stepper::time_type</paramtype></parameter><parameter name="dt"><paramtype>typename Stepper::time_type</paramtype></parameter></function></namespace></namespace></namespace><macro name="BOOST_NUMERIC_ODEINT_ITERATOR_CONST_STEP_TIME_ITERATOR_TIME_HPP_INCLUDED"/></header><header name="boost/numeric/odeint/stepper/adams_bashforth.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><class name="adams_bashforth"><template>
      <template-nontype-parameter name="Steps"><type>size_t</type></template-nontype-parameter>
      <template-type-parameter name="State"/>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
      <template-type-parameter name="Deriv"><default>State</default></template-type-parameter>
      <template-type-parameter name="Time"><default>Value</default></template-type-parameter>
      <template-type-parameter name="Algebra"><default>range_algebra</default></template-type-parameter>
      <template-type-parameter name="Operations"><default>default_operations</default></template-type-parameter>
      <template-type-parameter name="Resizer"><default>initially_resizer</default></template-type-parameter>
      <template-type-parameter name="InitializingStepper"><default>runge_kutta4&lt; State , Value , Deriv , Time , Algebra , Operations, Resizer &gt;</default></template-type-parameter>
    </template><inherit access="public">algebra_stepper_base&lt; Algebra, Operations &gt;</inherit><typedef name="algebra_type"><type>algebra_stepper_base&lt; Algebra, Operations &gt;::algebra_type</type></typedef><typedef name="deriv_type"><type>Deriv</type></typedef><typedef name="initializing_stepper_type"><type>InitializingStepper</type></typedef><typedef name="operations_type"><type>algebra_stepper_base&lt; Algebra, Operations &gt;::operations_type</type></typedef><typedef name="order_type"><type>unsigned short</type></typedef><typedef name="resizer_type"><type>Resizer</type></typedef><typedef name="state_type"><type>State</type></typedef><typedef name="step_storage_type"><type><emphasis>unspecified</emphasis></type></typedef><typedef name="stepper_category"><type>stepper_tag</type></typedef><typedef name="stepper_type"><type>adams_bashforth&lt; Steps, State, Value, Deriv, Time, Algebra, Operations, Resizer, InitializingStepper &gt;</type></typedef><typedef name="time_type"><type>Time</type></typedef><typedef name="value_type"><type>Value</type></typedef><typedef name="wrapped_deriv_type"><type>state_wrapper&lt; deriv_type &gt;</type></typedef><typedef name="wrapped_state_type"><type>state_wrapper&lt; state_type &gt;</type></typedef><data-member name="order_value" specifiers="static"><type>const order_type</type></data-member><data-member name="steps" specifiers="static"><type>const size_t</type></data-member><method-group name="private member functions"><method name="BOOST_STATIC_ASSERT" cv=""><type/><parameter name=""><paramtype>(Steps &gt; 0)</paramtype></parameter></method><method name="do_step_impl" cv=""><type>void</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateIn"/>
          <template-type-parameter name="StateOut"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="in"><paramtype>const StateIn &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="out"><paramtype>StateOut &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter></method><method name="resize_impl" cv=""><type>bool</type><template>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="x"><paramtype>const StateIn &amp;</paramtype></parameter></method></method-group><method-group name="public member functions"><method name="adjust_size" cv=""><type>void</type><template>
          <template-type-parameter name="StateType"/>
        </template><parameter name="x"><paramtype>const StateType &amp;</paramtype></parameter></method><method name="do_step" cv=""><type>void</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateInOut"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="x"><paramtype>StateInOut &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter></method><method name="do_step" cv=""><type>void</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateInOut"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="x"><paramtype>const StateInOut &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter></method><method name="do_step" cv=""><type>void</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateIn"/>
          <template-type-parameter name="StateOut"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="in"><paramtype>const StateIn &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="out"><paramtype>StateOut &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter></method><method name="do_step" cv=""><type>void</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateIn"/>
          <template-type-parameter name="StateOut"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="in"><paramtype>const StateIn &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="out"><paramtype>const StateOut &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter></method><method name="initialize" cv=""><type>void</type><template>
          <template-type-parameter name="ExplicitStepper"/>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="explicit_stepper"><paramtype>ExplicitStepper</paramtype></parameter><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="x"><paramtype>StateIn &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter></method><method name="initialize" cv=""><type>void</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="x"><paramtype>StateIn &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter></method><method name="initializing_stepper" cv="const"><type>const initializing_stepper_type &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="initializing_stepper" cv=""><type>initializing_stepper_type &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="is_initialized" cv="const"><type>bool</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="order" cv="const"><type>order_type</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="reset" cv=""><type>void</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="step_storage" cv="const"><type>const step_storage_type &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="step_storage" cv=""><type>step_storage_type &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method></method-group><constructor><parameter name="algebra"><paramtype>const algebra_type &amp;</paramtype><default>algebra_type()</default></parameter></constructor><constructor><parameter name="stepper"><paramtype>const adams_bashforth &amp;</paramtype></parameter></constructor><copy-assignment><parameter name="stepper"><paramtype>const adams_bashforth &amp;</paramtype></parameter></copy-assignment></class></namespace></namespace></namespace></header><header name="boost/numeric/odeint/stepper/adams_bashforth_moulton.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><class name="adams_bashforth_moulton"><template>
      <template-nontype-parameter name="Steps"><type>size_t</type></template-nontype-parameter>
      <template-type-parameter name="State"/>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
      <template-type-parameter name="Deriv"><default>State</default></template-type-parameter>
      <template-type-parameter name="Time"><default>Value</default></template-type-parameter>
      <template-type-parameter name="Algebra"><default>range_algebra</default></template-type-parameter>
      <template-type-parameter name="Operations"><default>default_operations</default></template-type-parameter>
      <template-type-parameter name="Resizer"><default>initially_resizer</default></template-type-parameter>
    </template><typedef name="adams_bashforth_type"><type>adams_bashforth&lt; steps, state_type, value_type, deriv_type, time_type, algebra_type, operations_type, resizer_type &gt;</type></typedef><typedef name="adams_moulton_type"><type>adams_moulton&lt; steps, state_type, value_type, deriv_type, time_type, algebra_type, operations_type, resizer_type &gt;</type></typedef><typedef name="algebra_type"><type>Algebra</type></typedef><typedef name="deriv_type"><type>Deriv</type></typedef><typedef name="operations_type"><type>Operations</type></typedef><typedef name="order_type"><type>unsigned short</type></typedef><typedef name="resizer_type"><type>Resizer</type></typedef><typedef name="state_type"><type>State</type></typedef><typedef name="stepper_category"><type>stepper_tag</type></typedef><typedef name="time_type"><type>Time</type></typedef><typedef name="value_type"><type>Value</type></typedef><typedef name="wrapped_deriv_type"><type>state_wrapper&lt; deriv_type &gt;</type></typedef><typedef name="wrapped_state_type"><type>state_wrapper&lt; state_type &gt;</type></typedef><data-member name="order_value" specifiers="static"><type>const order_type</type></data-member><data-member name="steps" specifiers="static"><type>const size_t</type></data-member><method-group name="public member functions"><method name="adjust_size" cv=""><type>void</type><template>
          <template-type-parameter name="StateType"/>
        </template><parameter name="x"><paramtype>const StateType &amp;</paramtype></parameter></method><method name="do_step" cv=""><type>void</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateInOut"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="x"><paramtype>StateInOut &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter></method><method name="do_step" cv=""><type>void</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateInOut"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="x"><paramtype>const StateInOut &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter></method><method name="do_step" cv=""><type>void</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateIn"/>
          <template-type-parameter name="StateOut"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="in"><paramtype>const StateIn &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="out"><paramtype>const StateOut &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter></method><method name="do_step" cv=""><type>void</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateIn"/>
          <template-type-parameter name="StateOut"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="in"><paramtype>const StateIn &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="out"><paramtype>StateOut &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter></method><method name="initialize" cv=""><type>void</type><template>
          <template-type-parameter name="ExplicitStepper"/>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="explicit_stepper"><paramtype>ExplicitStepper</paramtype></parameter><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="x"><paramtype>StateIn &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter></method><method name="initialize" cv=""><type>void</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="x"><paramtype>StateIn &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter></method><method name="order" cv="const"><type>order_type</type><parameter name=""><paramtype>void</paramtype></parameter></method></method-group><constructor><parameter name=""><paramtype>void</paramtype></parameter></constructor><constructor><parameter name="algebra"><paramtype>const algebra_type &amp;</paramtype></parameter></constructor></class></namespace></namespace></namespace></header><header name="boost/numeric/odeint/stepper/adams_moulton.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><class name="adams_moulton"><template>
      <template-nontype-parameter name="Steps"><type>size_t</type></template-nontype-parameter>
      <template-type-parameter name="State"/>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
      <template-type-parameter name="Deriv"><default>State</default></template-type-parameter>
      <template-type-parameter name="Time"><default>Value</default></template-type-parameter>
      <template-type-parameter name="Algebra"><default>range_algebra</default></template-type-parameter>
      <template-type-parameter name="Operations"><default>default_operations</default></template-type-parameter>
      <template-type-parameter name="Resizer"><default>initially_resizer</default></template-type-parameter>
    </template><typedef name="algebra_type"><type>Algebra</type></typedef><typedef name="deriv_type"><type>Deriv</type></typedef><typedef name="operations_type"><type>Operations</type></typedef><typedef name="order_type"><type>unsigned short</type></typedef><typedef name="resizer_type"><type>Resizer</type></typedef><typedef name="state_type"><type>State</type></typedef><typedef name="step_storage_type"><type><emphasis>unspecified</emphasis></type></typedef><typedef name="stepper_category"><type>stepper_tag</type></typedef><typedef name="stepper_type"><type>adams_moulton&lt; Steps, State, Value, Deriv, Time, Algebra, Operations, Resizer &gt;</type></typedef><typedef name="time_type"><type>Time</type></typedef><typedef name="value_type"><type>Value</type></typedef><typedef name="wrapped_deriv_type"><type>state_wrapper&lt; deriv_type &gt;</type></typedef><typedef name="wrapped_state_type"><type>state_wrapper&lt; state_type &gt;</type></typedef><data-member name="order_value" specifiers="static"><type>const order_type</type></data-member><data-member name="steps" specifiers="static"><type>const size_t</type></data-member><method-group name="public member functions"><method name="adjust_size" cv=""><type>void</type><template>
          <template-type-parameter name="StateType"/>
        </template><parameter name="x"><paramtype>const StateType &amp;</paramtype></parameter></method><method name="algebra" cv=""><type>algebra_type &amp;</type></method><method name="algebra" cv="const"><type>const algebra_type &amp;</type></method><method name="do_step" cv=""><type>void</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateInOut"/>
          <template-type-parameter name="ABBuf"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="in"><paramtype>StateInOut &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter><parameter name="buf"><paramtype>const ABBuf &amp;</paramtype></parameter></method><method name="do_step" cv=""><type>void</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateInOut"/>
          <template-type-parameter name="ABBuf"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="in"><paramtype>const StateInOut &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter><parameter name="buf"><paramtype>const ABBuf &amp;</paramtype></parameter></method><method name="do_step" cv=""><type>void</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateIn"/>
          <template-type-parameter name="StateOut"/>
          <template-type-parameter name="ABBuf"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="in"><paramtype>const StateIn &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="out"><paramtype>StateOut &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter><parameter name="buf"><paramtype>const ABBuf &amp;</paramtype></parameter></method><method name="do_step" cv=""><type>void</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateIn"/>
          <template-type-parameter name="StateOut"/>
          <template-type-parameter name="ABBuf"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="in"><paramtype>const StateIn &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="out"><paramtype>const StateOut &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter><parameter name="buf"><paramtype>const ABBuf &amp;</paramtype></parameter></method><method name="order" cv="const"><type>order_type</type><parameter name=""><paramtype>void</paramtype></parameter></method></method-group><constructor/><constructor><parameter name="algebra"><paramtype>algebra_type &amp;</paramtype></parameter></constructor><copy-assignment><parameter name="stepper"><paramtype>const adams_moulton &amp;</paramtype></parameter></copy-assignment><method-group name="private member functions"><method name="resize_impl" cv=""><type>bool</type><template>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="x"><paramtype>const StateIn &amp;</paramtype></parameter></method></method-group></class></namespace></namespace></namespace></header><header name="boost/numeric/odeint/stepper/bulirsch_stoer.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><class name="bulirsch_stoer"><template>
      <template-type-parameter name="State"/>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
      <template-type-parameter name="Deriv"><default>State</default></template-type-parameter>
      <template-type-parameter name="Time"><default>Value</default></template-type-parameter>
      <template-type-parameter name="Algebra"><default>range_algebra</default></template-type-parameter>
      <template-type-parameter name="Operations"><default>default_operations</default></template-type-parameter>
      <template-type-parameter name="Resizer"><default>initially_resizer</default></template-type-parameter>
    </template><description><para>ToDo try_step stepsize changed return values doesn't make too much sense here as we have order control as well </para></description><typedef name="algebra_type"><type>Algebra</type></typedef><typedef name="controlled_error_bs_type"><type><classname>bulirsch_stoer</classname>&lt; State, Value, Deriv, Time, Algebra, Operations, Resizer &gt;</type></typedef><typedef name="deriv_type"><type>Deriv</type></typedef><typedef name="int_vector"><type>std::vector&lt; size_t &gt;</type></typedef><typedef name="inv_time_type"><type>inverse_time&lt; time_type &gt;::type</type></typedef><typedef name="inv_time_vector"><type>std::vector&lt; inv_time_type &gt;</type></typedef><typedef name="operations_type"><type>Operations</type></typedef><typedef name="resizer_type"><type>Resizer</type></typedef><typedef name="state_table_type"><type>std::vector&lt; wrapped_state_type &gt;</type></typedef><typedef name="state_type"><type>State</type></typedef><typedef name="stepper_category"><type>controlled_stepper_tag</type></typedef><typedef name="time_type"><type>Time</type></typedef><typedef name="time_vector"><type>std::vector&lt; time_type &gt;</type></typedef><typedef name="value_matrix"><type>std::vector&lt; value_vector &gt;</type></typedef><typedef name="value_type"><type>Value</type></typedef><typedef name="value_vector"><type>std::vector&lt; value_type &gt;</type></typedef><typedef name="wrapped_deriv_type"><type>state_wrapper&lt; deriv_type &gt;</type></typedef><typedef name="wrapped_state_type"><type>state_wrapper&lt; state_type &gt;</type></typedef><data-member name="m_k_max" specifiers="static"><type>const size_t</type></data-member><method-group name="public member functions"><method name="adjust_size" cv=""><type>void</type><template>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="x"><paramtype>const StateIn &amp;</paramtype></parameter></method><method name="reset" cv=""><type>void</type></method><method name="try_step" cv=""><type>controlled_step_result</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateInOut"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="x"><paramtype>StateInOut &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type &amp;</paramtype></parameter></method><method name="try_step" cv=""><type>controlled_step_result</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateInOut"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="x"><paramtype>const StateInOut &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type &amp;</paramtype></parameter></method><method name="try_step" cv=""><type>controlled_step_result</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateInOut"/>
          <template-type-parameter name="DerivIn"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="x"><paramtype>StateInOut &amp;</paramtype></parameter><parameter name="dxdt"><paramtype>const DerivIn &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type &amp;</paramtype></parameter></method><method name="try_step" cv=""><type>controlled_step_result</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateIn"/>
          <template-type-parameter name="StateOut"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="in"><paramtype>const StateIn &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type &amp;</paramtype></parameter><parameter name="out"><paramtype>StateOut &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type &amp;</paramtype></parameter></method><method name="try_step" cv=""><type>controlled_step_result</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateIn"/>
          <template-type-parameter name="DerivIn"/>
          <template-type-parameter name="StateOut"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="in"><paramtype>const StateIn &amp;</paramtype></parameter><parameter name="dxdt"><paramtype>const DerivIn &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type &amp;</paramtype></parameter><parameter name="out"><paramtype>StateOut &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type &amp;</paramtype></parameter></method></method-group><constructor><parameter name="eps_abs"><paramtype>value_type</paramtype><default>1E-6</default></parameter><parameter name="eps_rel"><paramtype>value_type</paramtype><default>1E-6</default></parameter><parameter name="factor_x"><paramtype>value_type</paramtype><default>1.0</default></parameter><parameter name="factor_dxdt"><paramtype>value_type</paramtype><default>1.0</default></parameter></constructor><method-group name="private member functions"><method name="calc_h_opt" cv="const"><type>time_type</type><parameter name="h"><paramtype>time_type</paramtype></parameter><parameter name="error"><paramtype>value_type</paramtype></parameter><parameter name="k"><paramtype>size_t</paramtype></parameter></method><method name="extrapolate" cv=""><type>void</type><template>
          <template-type-parameter name="StateInOut"/>
        </template><parameter name="k"><paramtype>size_t</paramtype></parameter><parameter name="table"><paramtype>state_table_type &amp;</paramtype></parameter><parameter name="coeff"><paramtype>const value_matrix &amp;</paramtype></parameter><parameter name="xest"><paramtype>StateInOut &amp;</paramtype></parameter></method><method name="in_convergence_window" cv="const"><type>bool</type><parameter name="k"><paramtype>size_t</paramtype></parameter></method><method name="resize_impl" cv=""><type>bool</type><template>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="x"><paramtype>const StateIn &amp;</paramtype></parameter></method><method name="resize_m_dxdt" cv=""><type>bool</type><template>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="x"><paramtype>const StateIn &amp;</paramtype></parameter></method><method name="resize_m_xnew" cv=""><type>bool</type><template>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="x"><paramtype>const StateIn &amp;</paramtype></parameter></method><method name="set_k_opt" cv=""><type>controlled_step_result</type><parameter name="k"><paramtype>size_t</paramtype></parameter><parameter name="work"><paramtype>const inv_time_vector &amp;</paramtype></parameter><parameter name="h_opt"><paramtype>const time_vector &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type &amp;</paramtype></parameter></method><method name="should_reject" cv="const"><type>bool</type><parameter name="error"><paramtype>value_type</paramtype></parameter><parameter name="k"><paramtype>size_t</paramtype></parameter></method><method name="try_step_v1" cv=""><type>controlled_step_result</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateInOut"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="x"><paramtype>StateInOut &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type &amp;</paramtype></parameter></method></method-group></class></namespace></namespace></namespace></header><header name="boost/numeric/odeint/stepper/bulirsch_stoer_dense_out.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><class name="bulirsch_stoer_dense_out"><template>
      <template-type-parameter name="State"/>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
      <template-type-parameter name="Deriv"><default>State</default></template-type-parameter>
      <template-type-parameter name="Time"><default>Value</default></template-type-parameter>
      <template-type-parameter name="Algebra"><default>range_algebra</default></template-type-parameter>
      <template-type-parameter name="Operations"><default>default_operations</default></template-type-parameter>
      <template-type-parameter name="Resizer"><default>initially_resizer</default></template-type-parameter>
    </template><typedef name="algebra_type"><type>Algebra</type></typedef><typedef name="controlled_error_bs_type"><type>bulirsch_stoer_dense_out&lt; State, Value, Deriv, Time, Algebra, Operations, Resizer &gt;</type></typedef><typedef name="deriv_table_type"><type>std::vector&lt; deriv_vector_type &gt;</type></typedef><typedef name="deriv_type"><type>Deriv</type></typedef><typedef name="deriv_vector_type"><type>std::vector&lt; wrapped_deriv_type &gt;</type></typedef><typedef name="int_vector"><type>std::vector&lt; size_t &gt;</type></typedef><typedef name="inv_time_type"><type>inverse_time&lt; time_type &gt;::type</type></typedef><typedef name="inv_time_vector"><type>std::vector&lt; inv_time_type &gt;</type></typedef><typedef name="operations_type"><type>Operations</type></typedef><typedef name="resizer_type"><type>Resizer</type></typedef><typedef name="state_type"><type>State</type></typedef><typedef name="state_vector_type"><type>std::vector&lt; wrapped_state_type &gt;</type></typedef><typedef name="stepper_category"><type>dense_output_stepper_tag</type></typedef><typedef name="time_type"><type>Time</type></typedef><typedef name="time_vector"><type>std::vector&lt; time_type &gt;</type></typedef><typedef name="value_matrix"><type>std::vector&lt; value_vector &gt;</type></typedef><typedef name="value_type"><type>Value</type></typedef><typedef name="value_vector"><type>std::vector&lt; value_type &gt;</type></typedef><typedef name="wrapped_deriv_type"><type>state_wrapper&lt; deriv_type &gt;</type></typedef><typedef name="wrapped_state_type"><type>state_wrapper&lt; state_type &gt;</type></typedef><data-member name="m_k_max" specifiers="static"><type>const size_t</type></data-member><method-group name="public member functions"><method name="adjust_size" cv=""><type>void</type><template>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="x"><paramtype>const StateIn &amp;</paramtype></parameter></method><method name="calc_state" cv=""><type>void</type><template>
          <template-type-parameter name="StateOut"/>
        </template><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="x"><paramtype>StateOut &amp;</paramtype></parameter></method><method name="current_state" cv="const"><type>const state_type &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="current_time" cv="const"><type>time_type</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="current_time_step" cv="const"><type>time_type</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="do_step" cv=""><type>std::pair&lt; time_type, time_type &gt;</type><template>
          <template-type-parameter name="System"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter></method><method name="initialize" cv=""><type>void</type><template>
          <template-type-parameter name="StateType"/>
        </template><parameter name="x0"><paramtype>const StateType &amp;</paramtype></parameter><parameter name="t0"><paramtype>const time_type &amp;</paramtype></parameter><parameter name="dt0"><paramtype>const time_type &amp;</paramtype></parameter></method><method name="previous_state" cv="const"><type>const state_type &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="previous_time" cv="const"><type>time_type</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="reset" cv=""><type>void</type></method><method name="try_step" cv=""><type>controlled_step_result</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateIn"/>
          <template-type-parameter name="DerivIn"/>
          <template-type-parameter name="StateOut"/>
          <template-type-parameter name="DerivOut"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="in"><paramtype>const StateIn &amp;</paramtype></parameter><parameter name="dxdt"><paramtype>const DerivIn &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type &amp;</paramtype></parameter><parameter name="out"><paramtype>StateOut &amp;</paramtype></parameter><parameter name="dxdt_new"><paramtype>DerivOut &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type &amp;</paramtype></parameter></method></method-group><constructor><parameter name="eps_abs"><paramtype>value_type</paramtype><default>1E-6</default></parameter><parameter name="eps_rel"><paramtype>value_type</paramtype><default>1E-6</default></parameter><parameter name="factor_x"><paramtype>value_type</paramtype><default>1.0</default></parameter><parameter name="factor_dxdt"><paramtype>value_type</paramtype><default>1.0</default></parameter><parameter name="control_interpolation"><paramtype>bool</paramtype><default>false</default></parameter></constructor><method-group name="private member functions"><method name="calc_h_opt" cv="const"><type>time_type</type><parameter name="h"><paramtype>time_type</paramtype></parameter><parameter name="error"><paramtype>value_type</paramtype></parameter><parameter name="k"><paramtype>size_t</paramtype></parameter></method><method name="calculate_finite_difference" cv=""><type>void</type><template>
          <template-type-parameter name="DerivIn"/>
        </template><parameter name="j"><paramtype>size_t</paramtype></parameter><parameter name="kappa"><paramtype>size_t</paramtype></parameter><parameter name="fac"><paramtype>value_type</paramtype></parameter><parameter name="dxdt"><paramtype>const DerivIn &amp;</paramtype></parameter></method><method name="do_interpolation" cv=""><type>void</type><template>
          <template-type-parameter name="StateOut"/>
        </template><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="out"><paramtype>StateOut &amp;</paramtype></parameter></method><method name="extrapolate" cv=""><type>void</type><template>
          <template-type-parameter name="StateInOut"/>
          <template-type-parameter name="StateVector"/>
        </template><parameter name="k"><paramtype>size_t</paramtype></parameter><parameter name="table"><paramtype>StateVector &amp;</paramtype></parameter><parameter name="coeff"><paramtype>const value_matrix &amp;</paramtype></parameter><parameter name="xest"><paramtype>StateInOut &amp;</paramtype></parameter><parameter name="order_start_index"><paramtype>size_t</paramtype><default>0</default></parameter></method><method name="extrapolate_dense_out" cv=""><type>void</type><template>
          <template-type-parameter name="StateVector"/>
        </template><parameter name="k"><paramtype>size_t</paramtype></parameter><parameter name="table"><paramtype>StateVector &amp;</paramtype></parameter><parameter name="coeff"><paramtype>const value_matrix &amp;</paramtype></parameter><parameter name="order_start_index"><paramtype>size_t</paramtype><default>0</default></parameter></method><method name="get_current_deriv" cv=""><type>deriv_type &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="get_current_deriv" cv="const"><type>const deriv_type &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="get_current_state" cv=""><type>state_type &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="get_current_state" cv="const"><type>const state_type &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="get_old_deriv" cv=""><type>deriv_type &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="get_old_deriv" cv="const"><type>const deriv_type &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="get_old_state" cv=""><type>state_type &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="get_old_state" cv="const"><type>const state_type &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="in_convergence_window" cv="const"><type>bool</type><parameter name="k"><paramtype>size_t</paramtype></parameter></method><method name="prepare_dense_output" cv=""><type>value_type</type><template>
          <template-type-parameter name="StateIn1"/>
          <template-type-parameter name="DerivIn1"/>
          <template-type-parameter name="StateIn2"/>
          <template-type-parameter name="DerivIn2"/>
        </template><parameter name="k"><paramtype>int</paramtype></parameter><parameter name="x_start"><paramtype>const StateIn1 &amp;</paramtype></parameter><parameter name="dxdt_start"><paramtype>const DerivIn1 &amp;</paramtype></parameter><parameter name=""><paramtype>const StateIn2 &amp;</paramtype></parameter><parameter name=""><paramtype>const DerivIn2 &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter></method><method name="resize_impl" cv=""><type>bool</type><template>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="x"><paramtype>const StateIn &amp;</paramtype></parameter></method><method name="should_reject" cv="const"><type>bool</type><parameter name="error"><paramtype>value_type</paramtype></parameter><parameter name="k"><paramtype>size_t</paramtype></parameter></method><method name="toggle_current_state" cv=""><type>void</type><parameter name=""><paramtype>void</paramtype></parameter></method></method-group></class></namespace></namespace></namespace></header><header name="boost/numeric/odeint/stepper/controlled_runge_kutta.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><class-specialization name="controlled_runge_kutta"><template>
      <template-type-parameter name="ErrorStepper"/>
      <template-type-parameter name="ErrorChecker"/>
      <template-type-parameter name="Resizer"/>
    </template><specialization><template-arg>ErrorStepper</template-arg><template-arg>ErrorChecker</template-arg><template-arg>Resizer</template-arg><template-arg>explicit_error_stepper_fsal_tag</template-arg></specialization><typedef name="algebra_type"><type>stepper_type::algebra_type</type></typedef><typedef name="controlled_stepper_type"><type>controlled_runge_kutta&lt; ErrorStepper, ErrorChecker, Resizer, explicit_error_stepper_tag &gt;</type></typedef><typedef name="deriv_type"><type>stepper_type::deriv_type</type></typedef><typedef name="error_checker_type"><type>ErrorChecker</type></typedef><typedef name="operations_type"><type>stepper_type::operations_type</type></typedef><typedef name="resizer_type"><type>Resizer</type></typedef><typedef name="state_type"><type>stepper_type::state_type</type></typedef><typedef name="stepper_category"><type>explicit_controlled_stepper_fsal_tag</type></typedef><typedef name="stepper_type"><type>ErrorStepper</type></typedef><typedef name="time_type"><type>stepper_type::time_type</type></typedef><typedef name="value_type"><type>stepper_type::value_type</type></typedef><typedef name="wrapped_deriv_type"><type>stepper_type::wrapped_deriv_type</type></typedef><typedef name="wrapped_state_type"><type>stepper_type::wrapped_state_type</type></typedef><method-group name="public member functions"><method name="adjust_size" cv=""><type>void</type><template>
          <template-type-parameter name="StateType"/>
        </template><parameter name="x"><paramtype>const StateType &amp;</paramtype></parameter></method><method name="controlled_runge_kutta" cv=""><type/><parameter name="error_checker"><paramtype>const error_checker_type &amp;</paramtype><default>error_checker_type()</default></parameter><parameter name="stepper"><paramtype>const stepper_type &amp;</paramtype><default>stepper_type()</default></parameter></method><method name="initialize" cv=""><type>void</type><template>
          <template-type-parameter name="DerivIn"/>
        </template><parameter name="deriv"><paramtype>const DerivIn &amp;</paramtype></parameter></method><method name="initialize" cv=""><type>void</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="x"><paramtype>const StateIn &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter></method><method name="is_initialized" cv="const"><type>bool</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="reset" cv=""><type>void</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="stepper" cv=""><type>stepper_type &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="stepper" cv="const"><type>const stepper_type &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="try_step" cv=""><type>controlled_step_result</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateInOut"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="x"><paramtype>StateInOut &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type &amp;</paramtype></parameter></method><method name="try_step" cv=""><type>controlled_step_result</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateInOut"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="x"><paramtype>const StateInOut &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type &amp;</paramtype></parameter></method><method name="try_step" cv=""><type>boost::disable_if&lt; boost::is_same&lt; StateIn, time_type &gt;, controlled_step_result &gt;::type</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateIn"/>
          <template-type-parameter name="StateOut"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="in"><paramtype>const StateIn &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type &amp;</paramtype></parameter><parameter name="out"><paramtype>StateOut &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type &amp;</paramtype></parameter></method><method name="try_step" cv=""><type>controlled_step_result</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateInOut"/>
          <template-type-parameter name="DerivInOut"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="x"><paramtype>StateInOut &amp;</paramtype></parameter><parameter name="dxdt"><paramtype>DerivInOut &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type &amp;</paramtype></parameter></method><method name="try_step" cv=""><type>controlled_step_result</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateIn"/>
          <template-type-parameter name="DerivIn"/>
          <template-type-parameter name="StateOut"/>
          <template-type-parameter name="DerivOut"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="in"><paramtype>const StateIn &amp;</paramtype></parameter><parameter name="dxdt_in"><paramtype>const DerivIn &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type &amp;</paramtype></parameter><parameter name="out"><paramtype>StateOut &amp;</paramtype></parameter><parameter name="dxdt_out"><paramtype>DerivOut &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type &amp;</paramtype></parameter></method></method-group><method-group name="private member functions"><method name="resize_m_dxdt_impl" cv=""><type>bool</type><template>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="x"><paramtype>const StateIn &amp;</paramtype></parameter></method><method name="resize_m_dxdt_new_impl" cv=""><type>bool</type><template>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="x"><paramtype>const StateIn &amp;</paramtype></parameter></method><method name="resize_m_xerr_impl" cv=""><type>bool</type><template>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="x"><paramtype>const StateIn &amp;</paramtype></parameter></method><method name="resize_m_xnew_impl" cv=""><type>bool</type><template>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="x"><paramtype>const StateIn &amp;</paramtype></parameter></method><method name="try_step_v1" cv=""><type>controlled_step_result</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateInOut"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="x"><paramtype>StateInOut &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type &amp;</paramtype></parameter></method></method-group></class-specialization><class-specialization name="controlled_runge_kutta"><template>
      <template-type-parameter name="ErrorStepper"/>
      <template-type-parameter name="ErrorChecker"/>
      <template-type-parameter name="Resizer"/>
    </template><specialization><template-arg>ErrorStepper</template-arg><template-arg>ErrorChecker</template-arg><template-arg>Resizer</template-arg><template-arg>explicit_error_stepper_tag</template-arg></specialization><typedef name="algebra_type"><type>stepper_type::algebra_type</type></typedef><typedef name="controlled_stepper_type"><type>controlled_runge_kutta&lt; ErrorStepper, ErrorChecker, Resizer, explicit_error_stepper_tag &gt;</type></typedef><typedef name="deriv_type"><type>stepper_type::deriv_type</type></typedef><typedef name="error_checker_type"><type>ErrorChecker</type></typedef><typedef name="operations_type"><type>stepper_type::operations_type</type></typedef><typedef name="resizer_type"><type>Resizer</type></typedef><typedef name="state_type"><type>stepper_type::state_type</type></typedef><typedef name="stepper_category"><type>explicit_controlled_stepper_tag</type></typedef><typedef name="stepper_type"><type>ErrorStepper</type></typedef><typedef name="time_type"><type>stepper_type::time_type</type></typedef><typedef name="value_type"><type>stepper_type::value_type</type></typedef><typedef name="wrapped_deriv_type"><type>stepper_type::wrapped_deriv_type</type></typedef><typedef name="wrapped_state_type"><type>stepper_type::wrapped_state_type</type></typedef><method-group name="public member functions"><method name="adjust_size" cv=""><type>void</type><template>
          <template-type-parameter name="StateType"/>
        </template><parameter name="x"><paramtype>const StateType &amp;</paramtype></parameter></method><method name="controlled_runge_kutta" cv=""><type/><parameter name="error_checker"><paramtype>const error_checker_type &amp;</paramtype><default>error_checker_type()</default></parameter><parameter name="stepper"><paramtype>const stepper_type &amp;</paramtype><default>stepper_type()</default></parameter></method><method name="last_error" cv="const"><type>value_type</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="stepper" cv=""><type>stepper_type &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="stepper" cv="const"><type>const stepper_type &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="try_step" cv=""><type>controlled_step_result</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateInOut"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="x"><paramtype>StateInOut &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type &amp;</paramtype></parameter></method><method name="try_step" cv=""><type>controlled_step_result</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateInOut"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="x"><paramtype>const StateInOut &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type &amp;</paramtype></parameter></method><method name="try_step" cv=""><type>controlled_step_result</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateInOut"/>
          <template-type-parameter name="DerivIn"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="x"><paramtype>StateInOut &amp;</paramtype></parameter><parameter name="dxdt"><paramtype>const DerivIn &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type &amp;</paramtype></parameter></method><method name="try_step" cv=""><type>boost::disable_if&lt; boost::is_same&lt; StateIn, time_type &gt;, controlled_step_result &gt;::type</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateIn"/>
          <template-type-parameter name="StateOut"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="in"><paramtype>const StateIn &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type &amp;</paramtype></parameter><parameter name="out"><paramtype>StateOut &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type &amp;</paramtype></parameter></method><method name="try_step" cv=""><type>controlled_step_result</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateIn"/>
          <template-type-parameter name="DerivIn"/>
          <template-type-parameter name="StateOut"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="in"><paramtype>const StateIn &amp;</paramtype></parameter><parameter name="dxdt"><paramtype>const DerivIn &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type &amp;</paramtype></parameter><parameter name="out"><paramtype>StateOut &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type &amp;</paramtype></parameter></method></method-group><method-group name="private member functions"><method name="resize_m_dxdt_impl" cv=""><type>bool</type><template>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="x"><paramtype>const StateIn &amp;</paramtype></parameter></method><method name="resize_m_xerr_impl" cv=""><type>bool</type><template>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="x"><paramtype>const StateIn &amp;</paramtype></parameter></method><method name="resize_m_xnew_impl" cv=""><type>bool</type><template>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="x"><paramtype>const StateIn &amp;</paramtype></parameter></method><method name="try_step_v1" cv=""><type>controlled_step_result</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateInOut"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="x"><paramtype>StateInOut &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type &amp;</paramtype></parameter></method></method-group></class-specialization><class name="default_error_checker"><template>
      <template-type-parameter name="Value"/>
      <template-type-parameter name="Algebra"><default>range_algebra</default></template-type-parameter>
      <template-type-parameter name="Operations"><default>default_operations</default></template-type-parameter>
    </template><typedef name="algebra_type"><type>Algebra</type></typedef><typedef name="operations_type"><type>Operations</type></typedef><typedef name="value_type"><type>Value</type></typedef><method-group name="public member functions"><method name="error" cv="const"><type>value_type</type><template>
          <template-type-parameter name="State"/>
          <template-type-parameter name="Deriv"/>
          <template-type-parameter name="Err"/>
          <template-type-parameter name="Time"/>
        </template><parameter name="x_old"><paramtype>const State &amp;</paramtype></parameter><parameter name="dxdt_old"><paramtype>const Deriv &amp;</paramtype></parameter><parameter name="x_err"><paramtype>Err &amp;</paramtype></parameter><parameter name="dt"><paramtype>Time</paramtype></parameter></method><method name="error" cv="const"><type>value_type</type><template>
          <template-type-parameter name="State"/>
          <template-type-parameter name="Deriv"/>
          <template-type-parameter name="Err"/>
          <template-type-parameter name="Time"/>
        </template><parameter name="algebra"><paramtype>algebra_type &amp;</paramtype></parameter><parameter name="x_old"><paramtype>const State &amp;</paramtype></parameter><parameter name="dxdt_old"><paramtype>const Deriv &amp;</paramtype></parameter><parameter name="x_err"><paramtype>Err &amp;</paramtype></parameter><parameter name="dt"><paramtype>Time</paramtype></parameter></method></method-group><constructor><parameter name="eps_abs"><paramtype>value_type</paramtype><default>static_cast&lt; value_type &gt;(1.0e-6)</default></parameter><parameter name="eps_rel"><paramtype>value_type</paramtype><default>static_cast&lt; value_type &gt;(1.0e-6)</default></parameter><parameter name="a_x"><paramtype>value_type</paramtype><default>static_cast&lt; value_type &gt;(1)</default></parameter><parameter name="a_dxdt"><paramtype>value_type</paramtype><default>static_cast&lt; value_type &gt;(1)</default></parameter></constructor></class></namespace></namespace></namespace></header><header name="boost/numeric/odeint/stepper/controlled_step_result.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><enum name="controlled_step_result"><enumvalue name="success"/><enumvalue name="fail"/></enum></namespace></namespace></namespace></header><header name="boost/numeric/odeint/stepper/dense_output_runge_kutta.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><class-specialization name="dense_output_runge_kutta"><template>
      <template-type-parameter name="Stepper"/>
    </template><specialization><template-arg>Stepper</template-arg><template-arg>explicit_controlled_stepper_fsal_tag</template-arg></specialization><typedef name="algebra_type"><type>stepper_type::algebra_type</type></typedef><typedef name="controlled_stepper_type"><type>Stepper</type></typedef><typedef name="dense_output_stepper_type"><type>dense_output_runge_kutta&lt; Stepper &gt;</type></typedef><typedef name="deriv_type"><type>stepper_type::deriv_type</type></typedef><typedef name="operations_type"><type>stepper_type::operations_type</type></typedef><typedef name="resizer_type"><type>stepper_type::resizer_type</type></typedef><typedef name="state_type"><type>stepper_type::state_type</type></typedef><typedef name="stepper_category"><type>dense_output_stepper_tag</type></typedef><typedef name="stepper_type"><type>controlled_stepper_type::stepper_type</type></typedef><typedef name="time_type"><type>stepper_type::time_type</type></typedef><typedef name="value_type"><type>stepper_type::value_type</type></typedef><typedef name="wrapped_deriv_type"><type>stepper_type::wrapped_deriv_type</type></typedef><typedef name="wrapped_state_type"><type>stepper_type::wrapped_state_type</type></typedef><method-group name="public member functions"><method name="adjust_size" cv=""><type>void</type><template>
          <template-type-parameter name="StateType"/>
        </template><parameter name="x"><paramtype>const StateType &amp;</paramtype></parameter></method><method name="calc_state" cv=""><type>void</type><template>
          <template-type-parameter name="StateOut"/>
        </template><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="x"><paramtype>StateOut &amp;</paramtype></parameter></method><method name="calc_state" cv=""><type>void</type><template>
          <template-type-parameter name="StateOut"/>
        </template><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="x"><paramtype>const StateOut &amp;</paramtype></parameter></method><method name="current_state" cv="const"><type>const state_type &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="current_time" cv="const"><type>time_type</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="current_time_step" cv="const"><type>time_type</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="dense_output_runge_kutta" cv=""><type/><parameter name="stepper"><paramtype>const controlled_stepper_type &amp;</paramtype><default>controlled_stepper_type()</default></parameter></method><method name="do_step" cv=""><type>std::pair&lt; time_type, time_type &gt;</type><template>
          <template-type-parameter name="System"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter></method><method name="initialize" cv=""><type>void</type><template>
          <template-type-parameter name="StateType"/>
        </template><parameter name="x0"><paramtype>const StateType &amp;</paramtype></parameter><parameter name="t0"><paramtype>time_type</paramtype></parameter><parameter name="dt0"><paramtype>time_type</paramtype></parameter></method><method name="previous_state" cv="const"><type>const state_type &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="previous_time" cv="const"><type>time_type</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="resize" cv=""><type>bool</type><template>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="x"><paramtype>const StateIn &amp;</paramtype></parameter></method></method-group><method-group name="private member functions"><method name="get_current_deriv" cv=""><type>deriv_type &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="get_current_deriv" cv="const"><type>const deriv_type &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="get_current_state" cv=""><type>state_type &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="get_current_state" cv="const"><type>const state_type &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="get_old_deriv" cv=""><type>deriv_type &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="get_old_deriv" cv="const"><type>const deriv_type &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="get_old_state" cv=""><type>state_type &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="get_old_state" cv="const"><type>const state_type &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="toggle_current_state" cv=""><type>void</type><parameter name=""><paramtype>void</paramtype></parameter></method></method-group></class-specialization><class-specialization name="dense_output_runge_kutta"><template>
      <template-type-parameter name="Stepper"/>
    </template><specialization><template-arg>Stepper</template-arg><template-arg>stepper_tag</template-arg></specialization><typedef name="algebra_type"><type>stepper_type::algebra_type</type></typedef><typedef name="dense_output_stepper_type"><type>dense_output_runge_kutta&lt; Stepper &gt;</type></typedef><typedef name="deriv_type"><type>stepper_type::deriv_type</type></typedef><typedef name="operations_type"><type>stepper_type::operations_type</type></typedef><typedef name="resizer_type"><type>stepper_type::resizer_type</type></typedef><typedef name="state_type"><type>stepper_type::state_type</type></typedef><typedef name="stepper_category"><type>dense_output_stepper_tag</type></typedef><typedef name="stepper_type"><type>Stepper</type></typedef><typedef name="time_type"><type>stepper_type::time_type</type></typedef><typedef name="value_type"><type>stepper_type::value_type</type></typedef><typedef name="wrapped_deriv_type"><type>stepper_type::wrapped_deriv_type</type></typedef><typedef name="wrapped_state_type"><type>stepper_type::wrapped_state_type</type></typedef><method-group name="public member functions"><method name="adjust_size" cv=""><type>void</type><template>
          <template-type-parameter name="StateType"/>
        </template><parameter name="x"><paramtype>const StateType &amp;</paramtype></parameter></method><method name="calc_state" cv=""><type>void</type><template>
          <template-type-parameter name="StateOut"/>
        </template><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="x"><paramtype>StateOut &amp;</paramtype></parameter></method><method name="calc_state" cv=""><type>void</type><template>
          <template-type-parameter name="StateOut"/>
        </template><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="x"><paramtype>const StateOut &amp;</paramtype></parameter></method><method name="current_state" cv="const"><type>const state_type &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="current_time" cv="const"><type>time_type</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="dense_output_runge_kutta" cv=""><type/><parameter name="stepper"><paramtype>const stepper_type &amp;</paramtype><default>stepper_type()</default></parameter></method><method name="do_step" cv=""><type>std::pair&lt; time_type, time_type &gt;</type><template>
          <template-type-parameter name="System"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter></method><method name="initialize" cv=""><type>void</type><template>
          <template-type-parameter name="StateType"/>
        </template><parameter name="x0"><paramtype>const StateType &amp;</paramtype></parameter><parameter name="t0"><paramtype>time_type</paramtype></parameter><parameter name="dt0"><paramtype>time_type</paramtype></parameter></method><method name="previous_state" cv="const"><type>const state_type &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="previous_time" cv="const"><type>time_type</type><parameter name=""><paramtype>void</paramtype></parameter></method></method-group><method-group name="private member functions"><method name="get_current_state" cv=""><type>state_type &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="get_current_state" cv="const"><type>const state_type &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="get_old_state" cv=""><type>state_type &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="get_old_state" cv="const"><type>const state_type &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="resize_impl" cv=""><type>bool</type><template>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="x"><paramtype>const StateIn &amp;</paramtype></parameter></method><method name="toggle_current_state" cv=""><type>void</type><parameter name=""><paramtype>void</paramtype></parameter></method></method-group></class-specialization></namespace></namespace></namespace></header><header name="boost/numeric/odeint/stepper/euler.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><class name="euler"><template>
      <template-type-parameter name="State"/>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
      <template-type-parameter name="Deriv"><default>State</default></template-type-parameter>
      <template-type-parameter name="Time"><default>Value</default></template-type-parameter>
      <template-type-parameter name="Algebra"><default>range_algebra</default></template-type-parameter>
      <template-type-parameter name="Operations"><default>default_operations</default></template-type-parameter>
      <template-type-parameter name="Resizer"><default>initially_resizer</default></template-type-parameter>
    </template><inherit access="public">explicit_stepper_base&lt; euler&lt; State, Value, Deriv, Time, Algebra, Operations, Resizer &gt;, 1, State, Value, Deriv, Time, Algebra, Operations, Resizer &gt;</inherit><typedef name="algebra_type"><type>stepper_base_type::algebra_type</type></typedef><typedef name="deriv_type"><type>stepper_base_type::deriv_type</type></typedef><typedef name="operations_type"><type>stepper_base_type::operations_type</type></typedef><typedef name="resizer_type"><type>stepper_base_type::resizer_type</type></typedef><typedef name="state_type"><type>stepper_base_type::state_type</type></typedef><typedef name="stepper_base_type"><type>explicit_stepper_base&lt; euler&lt; State, Value, Deriv, Time, Algebra, Operations, Resizer &gt;, 1, State, Value, Deriv, Time, Algebra, Operations, Resizer &gt;</type></typedef><typedef name="stepper_type"><type>stepper_base_type::stepper_type</type></typedef><typedef name="time_type"><type>stepper_base_type::time_type</type></typedef><typedef name="value_type"><type>stepper_base_type::value_type</type></typedef><typedef name="wrapped_deriv_type"><type>stepper_base_type::wrapped_deriv_type</type></typedef><typedef name="wrapped_state_type"><type>stepper_base_type::wrapped_state_type</type></typedef><method-group name="public member functions"><method name="calc_state" cv=""><type>void</type><template>
          <template-type-parameter name="StateOut"/>
          <template-type-parameter name="StateIn1"/>
          <template-type-parameter name="StateIn2"/>
        </template><parameter name="x"><paramtype>StateOut &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="old_state"><paramtype>const StateIn1 &amp;</paramtype></parameter><parameter name="t_old"><paramtype>time_type</paramtype></parameter><parameter name="current_state"><paramtype>const StateIn2 &amp;</paramtype></parameter><parameter name="t_new"><paramtype>time_type</paramtype></parameter></method><method name="do_step_impl" cv=""><type>void</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateIn"/>
          <template-type-parameter name="DerivIn"/>
          <template-type-parameter name="StateOut"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="in"><paramtype>const StateIn &amp;</paramtype></parameter><parameter name="dxdt"><paramtype>const DerivIn &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="out"><paramtype>StateOut &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter></method></method-group><constructor><parameter name="algebra"><paramtype>const algebra_type &amp;</paramtype><default>algebra_type()</default></parameter></constructor></class></namespace></namespace></namespace></header><header name="boost/numeric/odeint/stepper/explicit_error_generic_rk.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><class name="explicit_error_generic_rk"><template>
      <template-nontype-parameter name="StageCount"><type>size_t</type></template-nontype-parameter>
      <template-nontype-parameter name="Order"><type>size_t</type></template-nontype-parameter>
      <template-nontype-parameter name="StepperOrder"><type>size_t</type></template-nontype-parameter>
      <template-nontype-parameter name="ErrorOrder"><type>size_t</type></template-nontype-parameter>
      <template-type-parameter name="State"/>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
      <template-type-parameter name="Deriv"><default>State</default></template-type-parameter>
      <template-type-parameter name="Time"><default>Value</default></template-type-parameter>
      <template-type-parameter name="Algebra"><default>range_algebra</default></template-type-parameter>
      <template-type-parameter name="Operations"><default>default_operations</default></template-type-parameter>
      <template-type-parameter name="Resizer"><default>initially_resizer</default></template-type-parameter>
    </template><inherit access="public">explicit_error_stepper_base&lt; explicit_error_generic_rk&lt; StageCount, Order, StepperOrder, ErrorOrder, State, Value, Deriv, Time, Algebra, Operations, Resizer &gt;, Order, StepperOrder, ErrorOrder, State, Value, Deriv, Time, Algebra, Operations, Resizer &gt;</inherit><typedef name="algebra_type"><type>stepper_base_type::algebra_type</type></typedef><typedef name="coef_a_type"><type>rk_algorithm_type::coef_a_type</type></typedef><typedef name="coef_b_type"><type>rk_algorithm_type::coef_b_type</type></typedef><typedef name="coef_c_type"><type>rk_algorithm_type::coef_c_type</type></typedef><typedef name="deriv_type"><type>stepper_base_type::deriv_type</type></typedef><typedef name="operations_type"><type>stepper_base_type::operations_type</type></typedef><typedef name="resizer_type"><type>stepper_base_type::resizer_type</type></typedef><typedef name="rk_algorithm_type"><type><emphasis>unspecified</emphasis></type></typedef><typedef name="state_type"><type>stepper_base_type::state_type</type></typedef><typedef name="stepper_base_type"><type>explicit_error_stepper_base&lt; explicit_error_generic_rk&lt; StageCount, Order, StepperOrder, ErrorOrder, State, Value, Deriv, Time, Algebra, Operations, Resizer &gt;, Order, StepperOrder, ErrorOrder, State, Value, Deriv, Time, Algebra, Operations, Resizer &gt;</type></typedef><typedef name="stepper_type"><type>explicit_error_generic_rk&lt; StageCount, Order, StepperOrder, ErrorOrder, State, Value, Deriv, Time, Algebra, Operations, Resizer &gt;</type></typedef><typedef name="time_type"><type>stepper_base_type::time_type</type></typedef><typedef name="value_type"><type>stepper_base_type::value_type</type></typedef><typedef name="wrapped_deriv_type"><type>stepper_base_type::wrapped_deriv_type</type></typedef><typedef name="wrapped_state_type"><type>stepper_base_type::wrapped_state_type</type></typedef><data-member name="stage_count" specifiers="static"><type>const size_t</type></data-member><method-group name="public member functions"><method name="adjust_size" cv=""><type>void</type><template>
          <template-type-parameter name="StateType"/>
        </template><parameter name="x"><paramtype>const StateType &amp;</paramtype></parameter></method><method name="do_step_impl" cv=""><type>void</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateIn"/>
          <template-type-parameter name="DerivIn"/>
          <template-type-parameter name="StateOut"/>
          <template-type-parameter name="Err"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="in"><paramtype>const StateIn &amp;</paramtype></parameter><parameter name="dxdt"><paramtype>const DerivIn &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="out"><paramtype>StateOut &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter><parameter name="xerr"><paramtype>Err &amp;</paramtype></parameter></method><method name="do_step_impl" cv=""><type>void</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateIn"/>
          <template-type-parameter name="DerivIn"/>
          <template-type-parameter name="StateOut"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="in"><paramtype>const StateIn &amp;</paramtype></parameter><parameter name="dxdt"><paramtype>const DerivIn &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="out"><paramtype>StateOut &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter></method></method-group><constructor><parameter name="a"><paramtype>const coef_a_type &amp;</paramtype></parameter><parameter name="b"><paramtype>const coef_b_type &amp;</paramtype></parameter><parameter name="b2"><paramtype>const coef_b_type &amp;</paramtype></parameter><parameter name="c"><paramtype>const coef_c_type &amp;</paramtype></parameter><parameter name="algebra"><paramtype>const algebra_type &amp;</paramtype><default>algebra_type()</default></parameter></constructor><method-group name="private member functions"><method name="resize_impl" cv=""><type>bool</type><template>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="x"><paramtype>const StateIn &amp;</paramtype></parameter></method></method-group></class></namespace></namespace></namespace></header><header name="boost/numeric/odeint/stepper/explicit_generic_rk.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><struct name="array_wrapper"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="Constant"/>
    </template><typedef name="type"><type>const boost::array&lt; T, Constant::value &gt;</type></typedef></struct><class name="explicit_generic_rk"><template>
      <template-nontype-parameter name="StageCount"><type>size_t</type></template-nontype-parameter>
      <template-nontype-parameter name="Order"><type>size_t</type></template-nontype-parameter>
      <template-type-parameter name="State"/>
      <template-type-parameter name="Value"/>
      <template-type-parameter name="Deriv"/>
      <template-type-parameter name="Time"/>
      <template-type-parameter name="Algebra"/>
      <template-type-parameter name="Operations"/>
      <template-type-parameter name="Resizer"/>
    </template><inherit access="public">explicit_stepper_base&lt; explicit_generic_rk&lt; StageCount, Order, State, Value, Deriv, Time, Algebra, Operations, Resizer &gt;, Order, State, Value, Deriv, Time, Algebra, Operations, Resizer &gt;</inherit><typedef name="algebra_type"><type>stepper_base_type::algebra_type</type></typedef><typedef name="coef_a_type"><type>rk_algorithm_type::coef_a_type</type></typedef><typedef name="coef_b_type"><type>rk_algorithm_type::coef_b_type</type></typedef><typedef name="coef_c_type"><type>rk_algorithm_type::coef_c_type</type></typedef><typedef name="deriv_type"><type>stepper_base_type::deriv_type</type></typedef><typedef name="operations_type"><type>stepper_base_type::operations_type</type></typedef><typedef name="resizer_type"><type>stepper_base_type::resizer_type</type></typedef><typedef name="rk_algorithm_type"><type><emphasis>unspecified</emphasis></type></typedef><typedef name="state_type"><type>stepper_base_type::state_type</type></typedef><typedef name="stepper_base_type"><type>explicit_stepper_base&lt; explicit_generic_rk&lt; StageCount, Order, State, Value, Deriv,Time, Algebra, Operations, Resizer &gt;, Order, State, Value, Deriv, Time, Algebra, Operations, Resizer &gt;</type></typedef><typedef name="stepper_type"><type>explicit_generic_rk&lt; StageCount, Order, State, Value, Deriv,Time, Algebra, Operations, Resizer &gt;</type></typedef><typedef name="time_type"><type>stepper_base_type::time_type</type></typedef><typedef name="value_type"><type>stepper_base_type::value_type</type></typedef><typedef name="wrapped_deriv_type"><type>stepper_base_type::wrapped_deriv_type</type></typedef><typedef name="wrapped_state_type"><type>stepper_base_type::wrapped_state_type</type></typedef><data-member name="stage_count" specifiers="static"><type>const size_t</type></data-member><method-group name="public member functions"><method name="adjust_size" cv=""><type>void</type><template>
          <template-type-parameter name="StateType"/>
        </template><parameter name="x"><paramtype>const StateType &amp;</paramtype></parameter></method><method name="do_step_impl" cv=""><type>void</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateIn"/>
          <template-type-parameter name="DerivIn"/>
          <template-type-parameter name="StateOut"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="in"><paramtype>const StateIn &amp;</paramtype></parameter><parameter name="dxdt"><paramtype>const DerivIn &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="out"><paramtype>StateOut &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter></method></method-group><constructor><parameter name="a"><paramtype>const coef_a_type &amp;</paramtype></parameter><parameter name="b"><paramtype>const coef_b_type &amp;</paramtype></parameter><parameter name="c"><paramtype>const coef_c_type &amp;</paramtype></parameter><parameter name="algebra"><paramtype>const algebra_type &amp;</paramtype><default>algebra_type()</default></parameter></constructor><method-group name="private member functions"><method name="resize_impl" cv=""><type>bool</type><template>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="x"><paramtype>const StateIn &amp;</paramtype></parameter></method></method-group></class><struct name="stage"><template>
      <template-type-parameter name="T"/>
      <template-nontype-parameter name="i"><type>size_t</type></template-nontype-parameter>
    </template><data-member name="a"><type>boost::array&lt; T, i &gt;</type></data-member><data-member name="c"><type>T</type></data-member></struct><struct name="stage_wrapper"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="Constant"/>
    </template><typedef name="type"><type>stage&lt; T, Constant::value &gt;</type></typedef></struct></namespace></namespace></namespace></header><header name="boost/numeric/odeint/stepper/generation.hpp"/><header name="boost/numeric/odeint/stepper/implicit_euler.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><class name="implicit_euler"><template>
      <template-type-parameter name="ValueType"/>
      <template-type-parameter name="Resizer"><default>initially_resizer</default></template-type-parameter>
    </template><typedef name="deriv_type"><type>state_type</type></typedef><typedef name="matrix_type"><type>boost::numeric::ublas::matrix&lt; value_type &gt;</type></typedef><typedef name="pmatrix_type"><type>boost::numeric::ublas::permutation_matrix&lt; size_t &gt;</type></typedef><typedef name="resizer_type"><type>Resizer</type></typedef><typedef name="state_type"><type>boost::numeric::ublas::vector&lt; value_type &gt;</type></typedef><typedef name="stepper_category"><type>stepper_tag</type></typedef><typedef name="stepper_type"><type>implicit_euler&lt; ValueType, Resizer &gt;</type></typedef><typedef name="time_type"><type>value_type</type></typedef><typedef name="value_type"><type>ValueType</type></typedef><typedef name="wrapped_deriv_type"><type>state_wrapper&lt; deriv_type &gt;</type></typedef><typedef name="wrapped_matrix_type"><type>state_wrapper&lt; matrix_type &gt;</type></typedef><typedef name="wrapped_pmatrix_type"><type>state_wrapper&lt; pmatrix_type &gt;</type></typedef><typedef name="wrapped_state_type"><type>state_wrapper&lt; state_type &gt;</type></typedef><method-group name="public member functions"><method name="adjust_size" cv=""><type>void</type><template>
          <template-type-parameter name="StateType"/>
        </template><parameter name="x"><paramtype>const StateType &amp;</paramtype></parameter></method><method name="do_step" cv=""><type>void</type><template>
          <template-type-parameter name="System"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="x"><paramtype>state_type &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter></method></method-group><constructor><parameter name="epsilon"><paramtype>value_type</paramtype><default>1E-6</default></parameter></constructor><method-group name="private member functions"><method name="resize_impl" cv=""><type>bool</type><template>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="x"><paramtype>const StateIn &amp;</paramtype></parameter></method><method name="solve" cv=""><type>void</type><parameter name="x"><paramtype>state_type &amp;</paramtype></parameter><parameter name="m"><paramtype>matrix_type &amp;</paramtype></parameter></method></method-group></class></namespace></namespace></namespace></header><header name="boost/numeric/odeint/stepper/modified_midpoint.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><class name="modified_midpoint"><template>
      <template-type-parameter name="State"/>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
      <template-type-parameter name="Deriv"><default>State</default></template-type-parameter>
      <template-type-parameter name="Time"><default>Value</default></template-type-parameter>
      <template-type-parameter name="Algebra"><default>range_algebra</default></template-type-parameter>
      <template-type-parameter name="Operations"><default>default_operations</default></template-type-parameter>
      <template-type-parameter name="Resizer"><default>initially_resizer</default></template-type-parameter>
    </template><inherit access="public">explicit_stepper_base&lt; modified_midpoint&lt; State, Value, Deriv, Time, Algebra, Operations, Resizer &gt;, 2, State, Value, Deriv, Time, Algebra, Operations, Resizer &gt;</inherit><typedef name="algebra_type"><type>stepper_base_type::algebra_type</type></typedef><typedef name="deriv_type"><type>stepper_base_type::deriv_type</type></typedef><typedef name="operations_type"><type>stepper_base_type::operations_type</type></typedef><typedef name="resizer_type"><type>stepper_base_type::resizer_type</type></typedef><typedef name="state_type"><type>stepper_base_type::state_type</type></typedef><typedef name="stepper_base_type"><type>explicit_stepper_base&lt; modified_midpoint&lt; State, Value, Deriv, Time, Algebra, Operations, Resizer &gt;, 2, State, Value, Deriv, Time, Algebra, Operations, Resizer &gt;</type></typedef><typedef name="stepper_type"><type>stepper_base_type::stepper_type</type></typedef><typedef name="time_type"><type>stepper_base_type::time_type</type></typedef><typedef name="value_type"><type>stepper_base_type::value_type</type></typedef><typedef name="wrapped_deriv_type"><type>stepper_base_type::wrapped_deriv_type</type></typedef><typedef name="wrapped_state_type"><type>stepper_base_type::wrapped_state_type</type></typedef><method-group name="public member functions"><method name="adjust_size" cv=""><type>void</type><template>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="x"><paramtype>const StateIn &amp;</paramtype></parameter></method><method name="do_step_impl" cv=""><type>void</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateIn"/>
          <template-type-parameter name="DerivIn"/>
          <template-type-parameter name="StateOut"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="in"><paramtype>const StateIn &amp;</paramtype></parameter><parameter name="dxdt"><paramtype>const DerivIn &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="out"><paramtype>StateOut &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter></method><method name="set_steps" cv=""><type>void</type><parameter name="steps"><paramtype>unsigned short</paramtype></parameter></method><method name="steps" cv="const"><type>unsigned short</type><parameter name=""><paramtype>void</paramtype></parameter></method></method-group><constructor><parameter name="steps"><paramtype>unsigned short</paramtype><default>2</default></parameter><parameter name="algebra"><paramtype>const algebra_type &amp;</paramtype><default>algebra_type()</default></parameter></constructor><method-group name="private member functions"><method name="resize_impl" cv=""><type>bool</type><template>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="x"><paramtype>const StateIn &amp;</paramtype></parameter></method></method-group></class><class name="modified_midpoint_dense_out"><template>
      <template-type-parameter name="State"/>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
      <template-type-parameter name="Deriv"><default>State</default></template-type-parameter>
      <template-type-parameter name="Time"><default>Value</default></template-type-parameter>
      <template-type-parameter name="Algebra"><default>range_algebra</default></template-type-parameter>
      <template-type-parameter name="Operations"><default>default_operations</default></template-type-parameter>
      <template-type-parameter name="Resizer"><default>initially_resizer</default></template-type-parameter>
    </template><typedef name="algebra_type"><type>Algebra</type></typedef><typedef name="deriv_table_type"><type>std::vector&lt; wrapped_deriv_type &gt;</type></typedef><typedef name="deriv_type"><type>Deriv</type></typedef><typedef name="operations_type"><type>Operations</type></typedef><typedef name="resizer_type"><type>Resizer</type></typedef><typedef name="state_type"><type>State</type></typedef><typedef name="stepper_type"><type>modified_midpoint_dense_out&lt; State, Value, Deriv, Time, Algebra, Operations, Resizer &gt;</type></typedef><typedef name="time_type"><type>Time</type></typedef><typedef name="value_type"><type>Value</type></typedef><typedef name="wrapped_deriv_type"><type>state_wrapper&lt; deriv_type &gt;</type></typedef><typedef name="wrapped_state_type"><type>state_wrapper&lt; state_type &gt;</type></typedef><method-group name="public member functions"><method name="adjust_size" cv=""><type>void</type><template>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="x"><paramtype>const StateIn &amp;</paramtype></parameter></method><method name="do_step" cv=""><type>void</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateIn"/>
          <template-type-parameter name="DerivIn"/>
          <template-type-parameter name="StateOut"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="in"><paramtype>const StateIn &amp;</paramtype></parameter><parameter name="dxdt"><paramtype>const DerivIn &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="out"><paramtype>StateOut &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter><parameter name="x_mp"><paramtype>state_type &amp;</paramtype></parameter><parameter name="derivs"><paramtype>deriv_table_type &amp;</paramtype></parameter></method><method name="resize" cv=""><type>bool</type><template>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="x"><paramtype>const StateIn &amp;</paramtype></parameter></method><method name="set_steps" cv=""><type>void</type><parameter name="steps"><paramtype>unsigned short</paramtype></parameter></method><method name="steps" cv="const"><type>unsigned short</type><parameter name=""><paramtype>void</paramtype></parameter></method></method-group><constructor><parameter name="steps"><paramtype>unsigned short</paramtype><default>2</default></parameter><parameter name="algebra"><paramtype>const algebra_type &amp;</paramtype><default>algebra_type()</default></parameter></constructor></class></namespace></namespace></namespace></header><header name="boost/numeric/odeint/stepper/rosenbrock4.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><struct name="default_rosenbrock_coefficients"><template>
      <template-type-parameter name="Value"/>
    </template><typedef name="order_type"><type>unsigned short</type></typedef><typedef name="value_type"><type>Value</type></typedef><data-member name="a21"><type>const value_type</type></data-member><data-member name="a31"><type>const value_type</type></data-member><data-member name="a32"><type>const value_type</type></data-member><data-member name="a41"><type>const value_type</type></data-member><data-member name="a42"><type>const value_type</type></data-member><data-member name="a43"><type>const value_type</type></data-member><data-member name="a51"><type>const value_type</type></data-member><data-member name="a52"><type>const value_type</type></data-member><data-member name="a53"><type>const value_type</type></data-member><data-member name="a54"><type>const value_type</type></data-member><data-member name="c2"><type>const value_type</type></data-member><data-member name="c21"><type>const value_type</type></data-member><data-member name="c3"><type>const value_type</type></data-member><data-member name="c31"><type>const value_type</type></data-member><data-member name="c32"><type>const value_type</type></data-member><data-member name="c4"><type>const value_type</type></data-member><data-member name="c41"><type>const value_type</type></data-member><data-member name="c42"><type>const value_type</type></data-member><data-member name="c43"><type>const value_type</type></data-member><data-member name="c51"><type>const value_type</type></data-member><data-member name="c52"><type>const value_type</type></data-member><data-member name="c53"><type>const value_type</type></data-member><data-member name="c54"><type>const value_type</type></data-member><data-member name="c61"><type>const value_type</type></data-member><data-member name="c62"><type>const value_type</type></data-member><data-member name="c63"><type>const value_type</type></data-member><data-member name="c64"><type>const value_type</type></data-member><data-member name="c65"><type>const value_type</type></data-member><data-member name="d1"><type>const value_type</type></data-member><data-member name="d2"><type>const value_type</type></data-member><data-member name="d21"><type>const value_type</type></data-member><data-member name="d22"><type>const value_type</type></data-member><data-member name="d23"><type>const value_type</type></data-member><data-member name="d24"><type>const value_type</type></data-member><data-member name="d25"><type>const value_type</type></data-member><data-member name="d3"><type>const value_type</type></data-member><data-member name="d31"><type>const value_type</type></data-member><data-member name="d32"><type>const value_type</type></data-member><data-member name="d33"><type>const value_type</type></data-member><data-member name="d34"><type>const value_type</type></data-member><data-member name="d35"><type>const value_type</type></data-member><data-member name="d4"><type>const value_type</type></data-member><data-member name="gamma"><type>const value_type</type></data-member><data-member name="error_order" specifiers="static"><type>const order_type</type></data-member><data-member name="stepper_order" specifiers="static"><type>const order_type</type></data-member><method-group name="public member functions"/><constructor><parameter name=""><paramtype>void</paramtype></parameter></constructor></struct><class name="rosenbrock4"><template>
      <template-type-parameter name="Value"/>
      <template-type-parameter name="Coefficients"><default>default_rosenbrock_coefficients&lt; Value &gt;</default></template-type-parameter>
      <template-type-parameter name="Resizer"><default>initially_resizer</default></template-type-parameter>
    </template><typedef name="deriv_type"><type>state_type</type></typedef><typedef name="matrix_type"><type>boost::numeric::ublas::matrix&lt; value_type &gt;</type></typedef><typedef name="order_type"><type>unsigned short</type></typedef><typedef name="pmatrix_type"><type>boost::numeric::ublas::permutation_matrix&lt; size_t &gt;</type></typedef><typedef name="resizer_type"><type>Resizer</type></typedef><typedef name="rosenbrock_coefficients"><type>Coefficients</type></typedef><typedef name="state_type"><type>boost::numeric::ublas::vector&lt; value_type &gt;</type></typedef><typedef name="stepper_category"><type>stepper_tag</type></typedef><typedef name="stepper_type"><type>rosenbrock4&lt; Value, Coefficients, Resizer &gt;</type></typedef><typedef name="time_type"><type>value_type</type></typedef><typedef name="value_type"><type>Value</type></typedef><typedef name="wrapped_deriv_type"><type>state_wrapper&lt; deriv_type &gt;</type></typedef><typedef name="wrapped_matrix_type"><type>state_wrapper&lt; matrix_type &gt;</type></typedef><typedef name="wrapped_pmatrix_type"><type>state_wrapper&lt; pmatrix_type &gt;</type></typedef><typedef name="wrapped_state_type"><type>state_wrapper&lt; state_type &gt;</type></typedef><data-member name="error_order" specifiers="static"><type>const order_type</type></data-member><data-member name="stepper_order" specifiers="static"><type>const order_type</type></data-member><method-group name="public member functions"><method name="adjust_size" cv=""><type>void</type><template>
          <template-type-parameter name="StateType"/>
        </template><parameter name="x"><paramtype>const StateType &amp;</paramtype></parameter></method><method name="calc_state" cv=""><type>void</type><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="x"><paramtype>state_type &amp;</paramtype></parameter><parameter name="x_old"><paramtype>const state_type &amp;</paramtype></parameter><parameter name="t_old"><paramtype>time_type</paramtype></parameter><parameter name="x_new"><paramtype>const state_type &amp;</paramtype></parameter><parameter name="t_new"><paramtype>time_type</paramtype></parameter></method><method name="do_step" cv=""><type>void</type><template>
          <template-type-parameter name="System"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="x"><paramtype>const state_type &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="xout"><paramtype>state_type &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter><parameter name="xerr"><paramtype>state_type &amp;</paramtype></parameter></method><method name="do_step" cv=""><type>void</type><template>
          <template-type-parameter name="System"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="x"><paramtype>state_type &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter><parameter name="xerr"><paramtype>state_type &amp;</paramtype></parameter></method><method name="do_step" cv=""><type>void</type><template>
          <template-type-parameter name="System"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="x"><paramtype>const state_type &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="xout"><paramtype>state_type &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter></method><method name="do_step" cv=""><type>void</type><template>
          <template-type-parameter name="System"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="x"><paramtype>state_type &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter></method><method name="order" cv="const"><type>order_type</type></method><method name="prepare_dense_output" cv=""><type>void</type></method></method-group><constructor><parameter name=""><paramtype>void</paramtype></parameter></constructor><method-group name="protected member functions"><method name="resize_impl" cv=""><type>bool</type><template>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="x"><paramtype>const StateIn &amp;</paramtype></parameter></method><method name="resize_x_err" cv=""><type>bool</type><template>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="x"><paramtype>const StateIn &amp;</paramtype></parameter></method></method-group></class></namespace></namespace></namespace></header><header name="boost/numeric/odeint/stepper/rosenbrock4_controller.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><class name="rosenbrock4_controller"><template>
      <template-type-parameter name="Stepper"/>
    </template><typedef name="controller_type"><type>rosenbrock4_controller&lt; Stepper &gt;</type></typedef><typedef name="deriv_type"><type>stepper_type::deriv_type</type></typedef><typedef name="resizer_type"><type>stepper_type::resizer_type</type></typedef><typedef name="state_type"><type>stepper_type::state_type</type></typedef><typedef name="stepper_category"><type>controlled_stepper_tag</type></typedef><typedef name="stepper_type"><type>Stepper</type></typedef><typedef name="time_type"><type>stepper_type::time_type</type></typedef><typedef name="value_type"><type>stepper_type::value_type</type></typedef><typedef name="wrapped_deriv_type"><type>stepper_type::wrapped_deriv_type</type></typedef><typedef name="wrapped_state_type"><type>stepper_type::wrapped_state_type</type></typedef><method-group name="public member functions"><method name="adjust_size" cv=""><type>void</type><template>
          <template-type-parameter name="StateType"/>
        </template><parameter name="x"><paramtype>const StateType &amp;</paramtype></parameter></method><method name="error" cv=""><type>value_type</type><parameter name="x"><paramtype>const state_type &amp;</paramtype></parameter><parameter name="xold"><paramtype>const state_type &amp;</paramtype></parameter><parameter name="xerr"><paramtype>const state_type &amp;</paramtype></parameter></method><method name="last_error" cv="const"><type>value_type</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="stepper" cv=""><type>stepper_type &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="stepper" cv="const"><type>const stepper_type &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="try_step" cv=""><type>boost::numeric::odeint::controlled_step_result</type><template>
          <template-type-parameter name="System"/>
        </template><parameter name="sys"><paramtype>System</paramtype></parameter><parameter name="x"><paramtype>state_type &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type &amp;</paramtype></parameter></method><method name="try_step" cv=""><type>boost::numeric::odeint::controlled_step_result</type><template>
          <template-type-parameter name="System"/>
        </template><parameter name="sys"><paramtype>System</paramtype></parameter><parameter name="x"><paramtype>const state_type &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type &amp;</paramtype></parameter><parameter name="xout"><paramtype>state_type &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type &amp;</paramtype></parameter></method></method-group><constructor><parameter name="atol"><paramtype>value_type</paramtype><default>1.0e-6</default></parameter><parameter name="rtol"><paramtype>value_type</paramtype><default>1.0e-6</default></parameter><parameter name="stepper"><paramtype>const stepper_type &amp;</paramtype><default>stepper_type()</default></parameter></constructor><method-group name="private member functions"><method name="resize_m_xerr" cv=""><type>bool</type><template>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="x"><paramtype>const StateIn &amp;</paramtype></parameter></method><method name="resize_m_xnew" cv=""><type>bool</type><template>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="x"><paramtype>const StateIn &amp;</paramtype></parameter></method></method-group></class></namespace></namespace></namespace></header><header name="boost/numeric/odeint/stepper/rosenbrock4_dense_output.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><class name="rosenbrock4_dense_output"><template>
      <template-type-parameter name="ControlledStepper"/>
    </template><typedef name="controlled_stepper_type"><type>ControlledStepper</type></typedef><typedef name="dense_output_stepper_type"><type>rosenbrock4_dense_output&lt; ControlledStepper &gt;</type></typedef><typedef name="deriv_type"><type>stepper_type::deriv_type</type></typedef><typedef name="resizer_type"><type>stepper_type::resizer_type</type></typedef><typedef name="state_type"><type>stepper_type::state_type</type></typedef><typedef name="stepper_category"><type>dense_output_stepper_tag</type></typedef><typedef name="stepper_type"><type>controlled_stepper_type::stepper_type</type></typedef><typedef name="time_type"><type>stepper_type::time_type</type></typedef><typedef name="value_type"><type>stepper_type::value_type</type></typedef><typedef name="wrapped_deriv_type"><type>stepper_type::wrapped_deriv_type</type></typedef><typedef name="wrapped_state_type"><type>stepper_type::wrapped_state_type</type></typedef><method-group name="private member functions"><method name="copy_variables" cv=""><type>void</type><parameter name="rb"><paramtype>const rosenbrock4_dense_output &amp;</paramtype></parameter></method><method name="resize_impl" cv=""><type>bool</type><template>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="x"><paramtype>const StateIn &amp;</paramtype></parameter></method></method-group><method-group name="public member functions"><method name="adjust_size" cv=""><type>void</type><template>
          <template-type-parameter name="StateType"/>
        </template><parameter name="x"><paramtype>const StateType &amp;</paramtype></parameter></method><method name="calc_state" cv=""><type>void</type><template>
          <template-type-parameter name="StateOut"/>
        </template><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="x"><paramtype>StateOut &amp;</paramtype></parameter></method><method name="calc_state" cv=""><type>void</type><template>
          <template-type-parameter name="StateOut"/>
        </template><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="x"><paramtype>const StateOut &amp;</paramtype></parameter></method><method name="current_state" cv="const"><type>const state_type &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="current_time" cv="const"><type>time_type</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="current_time_step" cv="const"><type>time_type</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="do_step" cv=""><type>std::pair&lt; time_type, time_type &gt;</type><template>
          <template-type-parameter name="System"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter></method><method name="initialize" cv=""><type>void</type><template>
          <template-type-parameter name="StateType"/>
        </template><parameter name="x0"><paramtype>const StateType &amp;</paramtype></parameter><parameter name="t0"><paramtype>time_type</paramtype></parameter><parameter name="dt0"><paramtype>time_type</paramtype></parameter></method><method name="previous_state" cv="const"><type>const state_type &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method><method name="previous_time" cv="const"><type>time_type</type><parameter name=""><paramtype>void</paramtype></parameter></method></method-group><copy-assignment><parameter name="rb"><paramtype>const rosenbrock4_dense_output &amp;</paramtype></parameter></copy-assignment><constructor><parameter name="stepper"><paramtype>const controlled_stepper_type &amp;</paramtype><default>controlled_stepper_type()</default></parameter></constructor><constructor><parameter name="rb"><paramtype>const rosenbrock4_dense_output &amp;</paramtype></parameter></constructor></class></namespace></namespace></namespace></header><header name="boost/numeric/odeint/stepper/runge_kutta4.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><struct name="rk4_coefficients_a1"><template>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
    </template><method-group name="public member functions"/><constructor><parameter name=""><paramtype>void</paramtype></parameter></constructor></struct><struct name="rk4_coefficients_a2"><template>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
    </template><method-group name="public member functions"/><constructor><parameter name=""><paramtype>void</paramtype></parameter></constructor></struct><struct name="rk4_coefficients_a3"><template>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
    </template><method-group name="public member functions"/><constructor><parameter name=""><paramtype>void</paramtype></parameter></constructor></struct><struct name="rk4_coefficients_b"><template>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
    </template><method-group name="public member functions"/><constructor><parameter name=""><paramtype>void</paramtype></parameter></constructor></struct><struct name="rk4_coefficients_c"><template>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
    </template><method-group name="public member functions"/><constructor><parameter name=""><paramtype>void</paramtype></parameter></constructor></struct><class name="runge_kutta4"><template>
      <template-type-parameter name="State"/>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
      <template-type-parameter name="Deriv"><default>State</default></template-type-parameter>
      <template-type-parameter name="Time"><default>Value</default></template-type-parameter>
      <template-type-parameter name="Algebra"><default>range_algebra</default></template-type-parameter>
      <template-type-parameter name="Operations"><default>default_operations</default></template-type-parameter>
      <template-type-parameter name="Resizer"><default>initially_resizer</default></template-type-parameter>
    </template><inherit access="public">boost::numeric::odeint::explicit_generic_rk&lt; 4, 4, State, Value, Deriv, Time, Algebra, Operations, Resizer &gt;</inherit><typedef name="algebra_type"><type>stepper_base_type::algebra_type</type></typedef><typedef name="deriv_type"><type>stepper_base_type::deriv_type</type></typedef><typedef name="operations_type"><type>stepper_base_type::operations_type</type></typedef><typedef name="resizer_type"><type>stepper_base_type::resizer_type</type></typedef><typedef name="state_type"><type>stepper_base_type::state_type</type></typedef><typedef name="stepper_base_type"><type>explicit_generic_rk&lt; 4, 4, State, Value, Deriv, Time, Algebra, Operations, Resizer &gt;</type></typedef><typedef name="stepper_type"><type>stepper_base_type::stepper_type</type></typedef><typedef name="time_type"><type>stepper_base_type::time_type</type></typedef><typedef name="value_type"><type>stepper_base_type::value_type</type></typedef><typedef name="wrapped_deriv_type"><type>stepper_base_type::wrapped_deriv_type</type></typedef><typedef name="wrapped_state_type"><type>stepper_base_type::wrapped_state_type</type></typedef><method-group name="public member functions"><method name="adjust_size" cv=""><type>void</type><template>
          <template-type-parameter name="StateType"/>
        </template><parameter name="x"><paramtype>const StateType &amp;</paramtype></parameter></method><method name="do_step_impl" cv=""><type>void</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateIn"/>
          <template-type-parameter name="DerivIn"/>
          <template-type-parameter name="StateOut"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="in"><paramtype>const StateIn &amp;</paramtype></parameter><parameter name="dxdt"><paramtype>const DerivIn &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="out"><paramtype>StateOut &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter></method></method-group><constructor><parameter name="algebra"><paramtype>const algebra_type &amp;</paramtype><default>algebra_type()</default></parameter></constructor></class></namespace></namespace></namespace></header><header name="boost/numeric/odeint/stepper/runge_kutta4_classic.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><class name="runge_kutta4_classic"><template>
      <template-type-parameter name="State"/>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
      <template-type-parameter name="Deriv"><default>State</default></template-type-parameter>
      <template-type-parameter name="Time"><default>Value</default></template-type-parameter>
      <template-type-parameter name="Algebra"><default>range_algebra</default></template-type-parameter>
      <template-type-parameter name="Operations"><default>default_operations</default></template-type-parameter>
      <template-type-parameter name="Resizer"><default>initially_resizer</default></template-type-parameter>
    </template><inherit access="public">explicit_stepper_base&lt; runge_kutta4_classic&lt; State, Value, Deriv, Time, Algebra, Operations, Resizer &gt;, 4, State, Value, Deriv, Time, Algebra, Operations, Resizer &gt;</inherit><typedef name="algebra_type"><type>stepper_base_type::algebra_type</type></typedef><typedef name="deriv_type"><type>stepper_base_type::deriv_type</type></typedef><typedef name="operations_type"><type>stepper_base_type::operations_type</type></typedef><typedef name="resizer_type"><type>stepper_base_type::resizer_type</type></typedef><typedef name="state_type"><type>stepper_base_type::state_type</type></typedef><typedef name="stepper_base_type"><type>explicit_stepper_base&lt; runge_kutta4_classic&lt; State, Value, Deriv, Time, Algebra, Operations, Resizer &gt;, 4, State, Value, Deriv, Time, Algebra, Operations, Resizer &gt;</type></typedef><typedef name="stepper_type"><type>stepper_base_type::stepper_type</type></typedef><typedef name="time_type"><type>stepper_base_type::time_type</type></typedef><typedef name="value_type"><type>stepper_base_type::value_type</type></typedef><typedef name="wrapped_deriv_type"><type>stepper_base_type::wrapped_deriv_type</type></typedef><typedef name="wrapped_state_type"><type>stepper_base_type::wrapped_state_type</type></typedef><method-group name="public member functions"><method name="adjust_size" cv=""><type>void</type><template>
          <template-type-parameter name="StateType"/>
        </template><parameter name="x"><paramtype>const StateType &amp;</paramtype></parameter></method><method name="do_step_impl" cv=""><type>void</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateIn"/>
          <template-type-parameter name="DerivIn"/>
          <template-type-parameter name="StateOut"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="in"><paramtype>const StateIn &amp;</paramtype></parameter><parameter name="dxdt"><paramtype>const DerivIn &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="out"><paramtype>StateOut &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter></method></method-group><constructor><parameter name="algebra"><paramtype>const algebra_type &amp;</paramtype><default>algebra_type()</default></parameter></constructor><method-group name="private member functions"><method name="resize_impl" cv=""><type>bool</type><template>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="x"><paramtype>const StateIn &amp;</paramtype></parameter></method></method-group></class></namespace></namespace></namespace></header><header name="boost/numeric/odeint/stepper/runge_kutta_cash_karp54.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><struct name="rk54_ck_coefficients_a1"><template>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
    </template><method-group name="public member functions"/><constructor><parameter name=""><paramtype>void</paramtype></parameter></constructor></struct><struct name="rk54_ck_coefficients_a2"><template>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
    </template><method-group name="public member functions"/><constructor><parameter name=""><paramtype>void</paramtype></parameter></constructor></struct><struct name="rk54_ck_coefficients_a3"><template>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
    </template><method-group name="public member functions"/><constructor><parameter name=""><paramtype>void</paramtype></parameter></constructor></struct><struct name="rk54_ck_coefficients_a4"><template>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
    </template><method-group name="public member functions"/><constructor><parameter name=""><paramtype>void</paramtype></parameter></constructor></struct><struct name="rk54_ck_coefficients_a5"><template>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
    </template><method-group name="public member functions"/><constructor><parameter name=""><paramtype>void</paramtype></parameter></constructor></struct><struct name="rk54_ck_coefficients_b"><template>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
    </template><method-group name="public member functions"/><constructor><parameter name=""><paramtype>void</paramtype></parameter></constructor></struct><struct name="rk54_ck_coefficients_c"><template>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
    </template><method-group name="public member functions"/><constructor><parameter name=""><paramtype>void</paramtype></parameter></constructor></struct><struct name="rk54_ck_coefficients_db"><template>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
    </template><method-group name="public member functions"/><constructor><parameter name=""><paramtype>void</paramtype></parameter></constructor></struct><class name="runge_kutta_cash_karp54"><template>
      <template-type-parameter name="State"/>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
      <template-type-parameter name="Deriv"><default>State</default></template-type-parameter>
      <template-type-parameter name="Time"><default>Value</default></template-type-parameter>
      <template-type-parameter name="Algebra"><default>range_algebra</default></template-type-parameter>
      <template-type-parameter name="Operations"><default>default_operations</default></template-type-parameter>
      <template-type-parameter name="Resizer"><default>initially_resizer</default></template-type-parameter>
    </template><inherit access="public">boost::numeric::odeint::explicit_error_generic_rk&lt; 6, 5, 5, 4, State, Value, Deriv, Time, Algebra, Operations, Resizer &gt;</inherit><typedef name="algebra_type"><type>stepper_base_type::algebra_type</type></typedef><typedef name="deriv_type"><type>stepper_base_type::deriv_type</type></typedef><typedef name="operations_type"><type>stepper_base_type::operations_type</type></typedef><typedef name="resizer_typ"><type>stepper_base_type::resizer_type</type></typedef><typedef name="state_type"><type>stepper_base_type::state_type</type></typedef><typedef name="stepper_base_type"><type>explicit_error_generic_rk&lt; 6, 5, 5, 4, State, Value, Deriv, Time, Algebra, Operations, Resizer &gt;</type></typedef><typedef name="stepper_type"><type>stepper_base_type::stepper_type</type></typedef><typedef name="time_type"><type>stepper_base_type::time_type</type></typedef><typedef name="value_type"><type>stepper_base_type::value_type</type></typedef><typedef name="wrapped_deriv_type"><type>stepper_base_type::wrapped_deriv_type</type></typedef><typedef name="wrapped_state_type"><type>stepper_base_type::wrapped_state_type</type></typedef><method-group name="public member functions"><method name="adjust_size" cv=""><type>void</type><template>
          <template-type-parameter name="StateType"/>
        </template><parameter name="x"><paramtype>const StateType &amp;</paramtype></parameter></method><method name="do_step_impl" cv=""><type>void</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateIn"/>
          <template-type-parameter name="DerivIn"/>
          <template-type-parameter name="StateOut"/>
          <template-type-parameter name="Err"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="in"><paramtype>const StateIn &amp;</paramtype></parameter><parameter name="dxdt"><paramtype>const DerivIn &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="out"><paramtype>StateOut &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter><parameter name="xerr"><paramtype>Err &amp;</paramtype></parameter></method><method name="do_step_impl" cv=""><type>void</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateIn"/>
          <template-type-parameter name="DerivIn"/>
          <template-type-parameter name="StateOut"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="in"><paramtype>const StateIn &amp;</paramtype></parameter><parameter name="dxdt"><paramtype>const DerivIn &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="out"><paramtype>StateOut &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter></method></method-group><constructor><parameter name="algebra"><paramtype>const algebra_type &amp;</paramtype><default>algebra_type()</default></parameter></constructor></class></namespace></namespace></namespace></header><header name="boost/numeric/odeint/stepper/runge_kutta_cash_karp54_classic.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><class name="runge_kutta_cash_karp54_classic"><template>
      <template-type-parameter name="State"/>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
      <template-type-parameter name="Deriv"><default>State</default></template-type-parameter>
      <template-type-parameter name="Time"><default>double</default></template-type-parameter>
      <template-type-parameter name="Algebra"><default>range_algebra</default></template-type-parameter>
      <template-type-parameter name="Operations"><default>default_operations</default></template-type-parameter>
      <template-type-parameter name="Resizer"><default>initially_resizer</default></template-type-parameter>
    </template><inherit access="public">explicit_error_stepper_base&lt; runge_kutta_cash_karp54_classic&lt; State, Value, Deriv, Time, Algebra, Operations, Resizer &gt;, 5, 5, 4, State, Value, Deriv, Time, Algebra, Operations, Resizer &gt;</inherit><typedef name="algebra_type"><type>stepper_base_type::algebra_type</type></typedef><typedef name="deriv_type"><type>stepper_base_type::deriv_type</type></typedef><typedef name="operations_type"><type>stepper_base_type::operations_type</type></typedef><typedef name="resizer_type"><type>stepper_base_type::resizer_type</type></typedef><typedef name="state_type"><type>stepper_base_type::state_type</type></typedef><typedef name="stepper_base_type"><type>explicit_error_stepper_base&lt; runge_kutta_cash_karp54_classic&lt; State, Value, Deriv, Time, Algebra, Operations, Resizer &gt;, 5, 5, 4, State, Value, Deriv, Time, Algebra, Operations, Resizer &gt;</type></typedef><typedef name="stepper_type"><type>stepper_base_type::stepper_type</type></typedef><typedef name="time_type"><type>stepper_base_type::time_type</type></typedef><typedef name="value_type"><type>stepper_base_type::value_type</type></typedef><typedef name="wrapped_deriv_type"><type>stepper_base_type::wrapped_deriv_type</type></typedef><typedef name="wrapped_state_type"><type>stepper_base_type::wrapped_state_type</type></typedef><method-group name="public member functions"><method name="adjust_size" cv=""><type>void</type><template>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="x"><paramtype>const StateIn &amp;</paramtype></parameter></method><method name="do_step_impl" cv=""><type>void</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateIn"/>
          <template-type-parameter name="DerivIn"/>
          <template-type-parameter name="StateOut"/>
          <template-type-parameter name="Err"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="in"><paramtype>const StateIn &amp;</paramtype></parameter><parameter name="dxdt"><paramtype>const DerivIn &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="out"><paramtype>StateOut &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter><parameter name="xerr"><paramtype>Err &amp;</paramtype></parameter></method><method name="do_step_impl" cv=""><type>void</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateIn"/>
          <template-type-parameter name="DerivIn"/>
          <template-type-parameter name="StateOut"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="in"><paramtype>const StateIn &amp;</paramtype></parameter><parameter name="dxdt"><paramtype>const DerivIn &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="out"><paramtype>StateOut &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter></method></method-group><constructor><parameter name="algebra"><paramtype>const algebra_type &amp;</paramtype><default>algebra_type()</default></parameter></constructor><method-group name="private member functions"><method name="resize_impl" cv=""><type>bool</type><template>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="x"><paramtype>const StateIn &amp;</paramtype></parameter></method></method-group></class></namespace></namespace></namespace></header><header name="boost/numeric/odeint/stepper/runge_kutta_dopri5.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><class name="runge_kutta_dopri5"><template>
      <template-type-parameter name="State"/>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
      <template-type-parameter name="Deriv"><default>State</default></template-type-parameter>
      <template-type-parameter name="Time"><default>Value</default></template-type-parameter>
      <template-type-parameter name="Algebra"><default>range_algebra</default></template-type-parameter>
      <template-type-parameter name="Operations"><default>default_operations</default></template-type-parameter>
      <template-type-parameter name="Resizer"><default>initially_resizer</default></template-type-parameter>
    </template><typedef name="algebra_type"><type>stepper_base_type::algebra_type</type></typedef><typedef name="deriv_type"><type>stepper_base_type::deriv_type</type></typedef><typedef name="operations_type"><type>stepper_base_type::operations_type</type></typedef><typedef name="resizer_type"><type>stepper_base_type::resizer_type</type></typedef><typedef name="state_type"><type>stepper_base_type::state_type</type></typedef><typedef name="stepper_base_type"><type>explicit_error_stepper_fsal_base&lt; runge_kutta_dopri5&lt; State, Value, Deriv, Time, Algebra, Operations, Resizer &gt;, 5, 5, 4, State, Value, Deriv, Time, Algebra, Operations, Resizer &gt;</type></typedef><typedef name="stepper_type"><type>stepper_base_type::stepper_type</type></typedef><typedef name="time_type"><type>stepper_base_type::time_type</type></typedef><typedef name="value_type"><type>stepper_base_type::value_type</type></typedef><typedef name="wrapped_deriv_type"><type>stepper_base_type::wrapped_deriv_type</type></typedef><typedef name="wrapped_state_type"><type>stepper_base_type::wrapped_state_type</type></typedef><method-group name="public member functions"><method name="adjust_size" cv=""><type>void</type><template>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="x"><paramtype>const StateIn &amp;</paramtype></parameter></method><method name="calc_state" cv=""><type>void</type><template>
          <template-type-parameter name="StateOut"/>
          <template-type-parameter name="StateIn1"/>
          <template-type-parameter name="DerivIn1"/>
          <template-type-parameter name="StateIn2"/>
          <template-type-parameter name="DerivIn2"/>
        </template><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="x"><paramtype>StateOut &amp;</paramtype></parameter><parameter name="x_old"><paramtype>const StateIn1 &amp;</paramtype></parameter><parameter name="deriv_old"><paramtype>const DerivIn1 &amp;</paramtype></parameter><parameter name="t_old"><paramtype>time_type</paramtype></parameter><parameter name=""><paramtype>const StateIn2 &amp;</paramtype></parameter><parameter name="deriv_new"><paramtype>const DerivIn2 &amp;</paramtype></parameter><parameter name="t_new"><paramtype>time_type</paramtype></parameter></method><method name="do_step_impl" cv=""><type>void</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateIn"/>
          <template-type-parameter name="DerivIn"/>
          <template-type-parameter name="StateOut"/>
          <template-type-parameter name="DerivOut"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="in"><paramtype>const StateIn &amp;</paramtype></parameter><parameter name="dxdt_in"><paramtype>const DerivIn &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="out"><paramtype>StateOut &amp;</paramtype></parameter><parameter name="dxdt_out"><paramtype>DerivOut &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter></method><method name="do_step_impl" cv=""><type>void</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateIn"/>
          <template-type-parameter name="DerivIn"/>
          <template-type-parameter name="StateOut"/>
          <template-type-parameter name="DerivOut"/>
          <template-type-parameter name="Err"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="in"><paramtype>const StateIn &amp;</paramtype></parameter><parameter name="dxdt_in"><paramtype>const DerivIn &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="out"><paramtype>StateOut &amp;</paramtype></parameter><parameter name="dxdt_out"><paramtype>DerivOut &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter><parameter name="xerr"><paramtype>Err &amp;</paramtype></parameter></method></method-group><constructor><parameter name="algebra"><paramtype>const algebra_type &amp;</paramtype><default>algebra_type()</default></parameter></constructor><method-group name="private member functions"><method name="resize_dxdt_tmp_impl" cv=""><type>bool</type><template>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="x"><paramtype>const StateIn &amp;</paramtype></parameter></method><method name="resize_k_x_tmp_impl" cv=""><type>bool</type><template>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="x"><paramtype>const StateIn &amp;</paramtype></parameter></method></method-group></class></namespace></namespace></namespace></header><header name="boost/numeric/odeint/stepper/runge_kutta_fehlberg78.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><struct name="rk78_coefficients_a1"><template>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
    </template><method-group name="public member functions"/><constructor><parameter name=""><paramtype>void</paramtype></parameter></constructor></struct><struct name="rk78_coefficients_a10"><template>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
    </template><method-group name="public member functions"/><constructor><parameter name=""><paramtype>void</paramtype></parameter></constructor></struct><struct name="rk78_coefficients_a11"><template>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
    </template><method-group name="public member functions"/><constructor><parameter name=""><paramtype>void</paramtype></parameter></constructor></struct><struct name="rk78_coefficients_a12"><template>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
    </template><method-group name="public member functions"/><constructor><parameter name=""><paramtype>void</paramtype></parameter></constructor></struct><struct name="rk78_coefficients_a2"><template>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
    </template><method-group name="public member functions"/><constructor><parameter name=""><paramtype>void</paramtype></parameter></constructor></struct><struct name="rk78_coefficients_a3"><template>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
    </template><method-group name="public member functions"/><constructor><parameter name=""><paramtype>void</paramtype></parameter></constructor></struct><struct name="rk78_coefficients_a4"><template>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
    </template><method-group name="public member functions"/><constructor><parameter name=""><paramtype>void</paramtype></parameter></constructor></struct><struct name="rk78_coefficients_a5"><template>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
    </template><method-group name="public member functions"/><constructor><parameter name=""><paramtype>void</paramtype></parameter></constructor></struct><struct name="rk78_coefficients_a6"><template>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
    </template><method-group name="public member functions"/><constructor><parameter name=""><paramtype>void</paramtype></parameter></constructor></struct><struct name="rk78_coefficients_a7"><template>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
    </template><method-group name="public member functions"/><constructor><parameter name=""><paramtype>void</paramtype></parameter></constructor></struct><struct name="rk78_coefficients_a8"><template>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
    </template><method-group name="public member functions"/><constructor><parameter name=""><paramtype>void</paramtype></parameter></constructor></struct><struct name="rk78_coefficients_a9"><template>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
    </template><method-group name="public member functions"/><constructor><parameter name=""><paramtype>void</paramtype></parameter></constructor></struct><struct name="rk78_coefficients_b"><template>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
    </template><method-group name="public member functions"/><constructor><parameter name=""><paramtype>void</paramtype></parameter></constructor></struct><struct name="rk78_coefficients_c"><template>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
    </template><method-group name="public member functions"/><constructor><parameter name=""><paramtype>void</paramtype></parameter></constructor></struct><struct name="rk78_coefficients_db"><template>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
    </template><method-group name="public member functions"/><constructor><parameter name=""><paramtype>void</paramtype></parameter></constructor></struct><class name="runge_kutta_fehlberg78"><template>
      <template-type-parameter name="State"/>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
      <template-type-parameter name="Deriv"><default>State</default></template-type-parameter>
      <template-type-parameter name="Time"><default>Value</default></template-type-parameter>
      <template-type-parameter name="Algebra"><default>range_algebra</default></template-type-parameter>
      <template-type-parameter name="Operations"><default>default_operations</default></template-type-parameter>
      <template-type-parameter name="Resizer"><default>initially_resizer</default></template-type-parameter>
    </template><inherit access="public">boost::numeric::odeint::explicit_error_generic_rk&lt; 13, 8, 8, 7, State, Value, Deriv, Time, Algebra, Operations, Resizer &gt;</inherit><typedef name="algebra_type"><type>stepper_base_type::algebra_type</type></typedef><typedef name="deriv_type"><type>stepper_base_type::deriv_type</type></typedef><typedef name="operations_type"><type>stepper_base_type::operations_type</type></typedef><typedef name="resizer_type"><type>stepper_base_type::resizer_type</type></typedef><typedef name="state_type"><type>stepper_base_type::state_type</type></typedef><typedef name="stepper_base_type"><type>explicit_error_generic_rk&lt; 13, 8, 8, 7, State, Value, Deriv, Time, Algebra, Operations, Resizer &gt;</type></typedef><typedef name="stepper_type"><type>stepper_base_type::stepper_type</type></typedef><typedef name="time_type"><type>stepper_base_type::time_type</type></typedef><typedef name="value_type"><type>stepper_base_type::value_type</type></typedef><typedef name="wrapped_deriv_type"><type>stepper_base_type::wrapped_deriv_type</type></typedef><typedef name="wrapped_state_type"><type>stepper_base_type::wrapped_state_type</type></typedef><method-group name="public member functions"><method name="adjust_size" cv=""><type>void</type><template>
          <template-type-parameter name="StateType"/>
        </template><parameter name="x"><paramtype>const StateType &amp;</paramtype></parameter></method><method name="do_step_impl" cv=""><type>void</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateIn"/>
          <template-type-parameter name="DerivIn"/>
          <template-type-parameter name="StateOut"/>
          <template-type-parameter name="Err"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="in"><paramtype>const StateIn &amp;</paramtype></parameter><parameter name="dxdt"><paramtype>const DerivIn &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="out"><paramtype>StateOut &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter><parameter name="xerr"><paramtype>Err &amp;</paramtype></parameter></method><method name="do_step_impl" cv=""><type>void</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="StateIn"/>
          <template-type-parameter name="DerivIn"/>
          <template-type-parameter name="StateOut"/>
        </template><parameter name="system"><paramtype>System</paramtype></parameter><parameter name="in"><paramtype>const StateIn &amp;</paramtype></parameter><parameter name="dxdt"><paramtype>const DerivIn &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="out"><paramtype>StateOut &amp;</paramtype></parameter><parameter name="dt"><paramtype>time_type</paramtype></parameter></method></method-group><constructor><parameter name="algebra"><paramtype>const algebra_type &amp;</paramtype><default>algebra_type()</default></parameter></constructor></class></namespace></namespace></namespace></header><header name="boost/numeric/odeint/stepper/stepper_categories.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><struct-specialization name="base_tag"><template>
    </template><specialization><template-arg>controlled_stepper_tag</template-arg></specialization><typedef name="type"><type>controlled_stepper_tag</type></typedef></struct-specialization><struct-specialization name="base_tag"><template>
    </template><specialization><template-arg>dense_output_stepper_tag</template-arg></specialization><typedef name="type"><type>dense_output_stepper_tag</type></typedef></struct-specialization><struct-specialization name="base_tag"><template>
    </template><specialization><template-arg>error_stepper_tag</template-arg></specialization><typedef name="type"><type>stepper_tag</type></typedef></struct-specialization><struct-specialization name="base_tag"><template>
    </template><specialization><template-arg>explicit_controlled_stepper_fsal_tag</template-arg></specialization><typedef name="type"><type>controlled_stepper_tag</type></typedef></struct-specialization><struct-specialization name="base_tag"><template>
    </template><specialization><template-arg>explicit_controlled_stepper_tag</template-arg></specialization><typedef name="type"><type>controlled_stepper_tag</type></typedef></struct-specialization><struct-specialization name="base_tag"><template>
    </template><specialization><template-arg>explicit_error_stepper_fsal_tag</template-arg></specialization><typedef name="type"><type>stepper_tag</type></typedef></struct-specialization><struct-specialization name="base_tag"><template>
    </template><specialization><template-arg>explicit_error_stepper_tag</template-arg></specialization><typedef name="type"><type>stepper_tag</type></typedef></struct-specialization><struct-specialization name="base_tag"><template>
    </template><specialization><template-arg>stepper_tag</template-arg></specialization><typedef name="type"><type>stepper_tag</type></typedef></struct-specialization><struct name="controlled_stepper_tag"/><struct name="dense_output_stepper_tag"/><struct name="error_stepper_tag"><inherit access="public">boost::numeric::odeint::stepper_tag</inherit></struct><struct name="explicit_controlled_stepper_fsal_tag"><inherit access="public">boost::numeric::odeint::controlled_stepper_tag</inherit></struct><struct name="explicit_controlled_stepper_tag"><inherit access="public">boost::numeric::odeint::controlled_stepper_tag</inherit></struct><struct name="explicit_error_stepper_fsal_tag"><inherit access="public">boost::numeric::odeint::error_stepper_tag</inherit></struct><struct name="explicit_error_stepper_tag"><inherit access="public">boost::numeric::odeint::error_stepper_tag</inherit></struct><struct name="stepper_tag"/></namespace></namespace></namespace></header><header name="boost/numeric/odeint/stepper/symplectic_euler.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><class name="symplectic_euler"><template>
      <template-type-parameter name="Coor"/>
      <template-type-parameter name="Momentum"><default>Coor</default></template-type-parameter>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
      <template-type-parameter name="CoorDeriv"><default>Coor</default></template-type-parameter>
      <template-type-parameter name="MomentumDeriv"><default>Coor</default></template-type-parameter>
      <template-type-parameter name="Time"><default>Value</default></template-type-parameter>
      <template-type-parameter name="Algebra"><default>range_algebra</default></template-type-parameter>
      <template-type-parameter name="Operations"><default>default_operations</default></template-type-parameter>
      <template-type-parameter name="Resizer"><default>initially_resizer</default></template-type-parameter>
    </template><typedef name="algebra_type"><type>stepper_base_type::algebra_type</type></typedef><typedef name="stepper_base_type"><type>symplectic_nystroem_stepper_base&lt; 1, 1, symplectic_euler&lt; Coor, Momentum, Value, CoorDeriv, MomentumDeriv, Time, Algebra, Operations, Resizer &gt;, Coor, Momentum, Value, CoorDeriv, MomentumDeriv, Time, Algebra, Operations, Resizer &gt;</type></typedef><typedef name="value_type"><type>stepper_base_type::value_type</type></typedef><method-group name="public member functions"/><constructor><parameter name="algebra"><paramtype>const algebra_type &amp;</paramtype><default>algebra_type()</default></parameter></constructor></class></namespace></namespace></namespace></header><header name="boost/numeric/odeint/stepper/symplectic_rkn_sb3a_m4_mclachlan.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><class name="symplectic_rkn_sb3a_m4_mclachlan"><template>
      <template-type-parameter name="Coor"/>
      <template-type-parameter name="Momentum"><default>Coor</default></template-type-parameter>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
      <template-type-parameter name="CoorDeriv"><default>Coor</default></template-type-parameter>
      <template-type-parameter name="MomentumDeriv"><default>Coor</default></template-type-parameter>
      <template-type-parameter name="Time"><default>Value</default></template-type-parameter>
      <template-type-parameter name="Algebra"><default>range_algebra</default></template-type-parameter>
      <template-type-parameter name="Operations"><default>default_operations</default></template-type-parameter>
      <template-type-parameter name="Resizer"><default>initially_resizer</default></template-type-parameter>
    </template><typedef name="algebra_type"><type>stepper_base_type::algebra_type</type></typedef><typedef name="stepper_base_type"><type>symplectic_nystroem_stepper_base&lt; 5, 4, symplectic_rkn_sb3a_m4_mclachlan&lt; Coor, Momentum, Value, CoorDeriv, MomentumDeriv, Time, Algebra, Operations, Resizer &gt;, Coor, Momentum, Value, CoorDeriv, MomentumDeriv, Time, Algebra, Operations, Resizer &gt;</type></typedef><typedef name="value_type"><type>stepper_base_type::value_type</type></typedef><method-group name="public member functions"/><constructor><parameter name="algebra"><paramtype>const algebra_type &amp;</paramtype><default>algebra_type()</default></parameter></constructor></class></namespace></namespace></namespace></header><header name="boost/numeric/odeint/stepper/symplectic_rkn_sb3a_mclachlan.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><class name="symplectic_rkn_sb3a_mclachlan"><template>
      <template-type-parameter name="Coor"/>
      <template-type-parameter name="Momentum"><default>Coor</default></template-type-parameter>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter>
      <template-type-parameter name="CoorDeriv"><default>Coor</default></template-type-parameter>
      <template-type-parameter name="MomentumDeriv"><default>Coor</default></template-type-parameter>
      <template-type-parameter name="Time"><default>Value</default></template-type-parameter>
      <template-type-parameter name="Algebra"><default>range_algebra</default></template-type-parameter>
      <template-type-parameter name="Operations"><default>default_operations</default></template-type-parameter>
      <template-type-parameter name="Resizer"><default>initially_resizer</default></template-type-parameter>
    </template><typedef name="algebra_type"><type>stepper_base_type::algebra_type</type></typedef><typedef name="stepper_base_type"><type>symplectic_nystroem_stepper_base&lt; 6, 4, symplectic_rkn_sb3a_mclachlan&lt; Coor, Momentum, Value, CoorDeriv, MomentumDeriv, Time, Algebra, Operations, Resizer &gt;, Coor, Momentum, Value, CoorDeriv, MomentumDeriv, Time, Algebra, Operations, Resizer &gt;</type></typedef><typedef name="value_type"><type>stepper_base_type::value_type</type></typedef><method-group name="public member functions"/><constructor><parameter name="algebra"><paramtype>const algebra_type &amp;</paramtype><default>algebra_type()</default></parameter></constructor></class></namespace></namespace></namespace></header><header name="boost/numeric/odeint/util/bind.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"/></namespace></namespace></header><header name="boost/numeric/odeint/util/copy.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><struct name="copy_impl"><template>
      <template-type-parameter name="Container1"/>
      <template-type-parameter name="Container2"/>
      <template-type-parameter name="Enabler"><default>void</default></template-type-parameter>
    </template><method-group name="public static functions"><method name="copy" cv=""><type>static void</type><parameter name="from"><paramtype>const Container1 &amp;</paramtype></parameter><parameter name="to"><paramtype>Container2 &amp;</paramtype></parameter></method></method-group></struct><function name="copy"><type>void</type><template>
          <template-type-parameter name="Container1"/>
          <template-type-parameter name="Container2"/>
        </template><parameter name="from"><paramtype>const Container1 &amp;</paramtype></parameter><parameter name="to"><paramtype>Container2 &amp;</paramtype></parameter></function></namespace></namespace></namespace></header><header name="boost/numeric/odeint/util/is_pair.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><struct name="is_pair"><template>
      <template-type-parameter name="T"/>
    </template></struct><struct-specialization name="is_pair"><template>
      <template-type-parameter name="T1"/>
      <template-type-parameter name="T2"/>
    </template><specialization><template-arg>std::pair&lt; T1</template-arg><template-arg>T2 &gt;</template-arg></specialization></struct-specialization></namespace></namespace></namespace></header><header name="boost/numeric/odeint/util/is_resizeable.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><struct name="is_resizeable"><template>
      <template-type-parameter name="Container"/>
      <template-type-parameter name="Enabler"><default>void</default></template-type-parameter>
    </template><typedef name="type"><type>boost::false_type</type></typedef><data-member name="value" specifiers="static"><type>const bool</type></data-member></struct><struct-specialization name="is_resizeable"><template>
      <template-type-parameter name="FusionSequence"/>
    </template><specialization><template-arg>FusionSequence</template-arg><template-arg>typename boost::enable_if&lt; typename boost::fusion::traits::is_sequence&lt; FusionSequence &gt;::type &gt;::type</template-arg></specialization><typedef name="iter"><type>boost::mpl::find_if&lt; FusionSequence, is_resizeable&lt; boost::mpl::_1 &gt; &gt;::type</type></typedef><typedef name="last"><type>boost::mpl::end&lt; FusionSequence &gt;::type</type></typedef><typedef name="type"><type>boost::mpl::if_&lt; boost::is_same&lt; iter, last &gt;, boost::false_type, boost::true_type &gt;::type</type></typedef><data-member name="value" specifiers="static"><type>const bool</type></data-member></struct-specialization><struct-specialization name="is_resizeable"><template>
      <template-type-parameter name="V"/>
      <template-type-parameter name="A"/>
    </template><specialization><template-arg>std::vector&lt; V</template-arg><template-arg>A &gt;</template-arg></specialization><typedef name="type"><type>boost::true_type</type></typedef><data-member name="value" specifiers="static"><type>const bool</type></data-member></struct-specialization></namespace></namespace></namespace></header><header name="boost/numeric/odeint/util/resize.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><struct name="resize_impl"><template>
      <template-type-parameter name="StateOut"/>
      <template-type-parameter name="StateIn"/>
      <template-type-parameter name="Enabler"><default>void</default></template-type-parameter>
    </template><method-group name="public static functions"><method name="resize" cv=""><type>static void</type><parameter name="x1"><paramtype>StateOut &amp;</paramtype></parameter><parameter name="x2"><paramtype>const StateIn &amp;</paramtype></parameter></method></method-group></struct><struct-specialization name="resize_impl"><template>
      <template-type-parameter name="FusionSeq"/>
    </template><specialization><template-arg>FusionSeq</template-arg><template-arg>FusionSeq</template-arg><template-arg>typename boost::enable_if&lt; typename boost::fusion::traits::is_sequence&lt; FusionSeq &gt;::type &gt;::type</template-arg></specialization><method-group name="public static functions"><method name="resize" cv=""><type>static void</type><parameter name="x1"><paramtype>FusionSeq &amp;</paramtype></parameter><parameter name="x2"><paramtype>const FusionSeq &amp;</paramtype></parameter></method></method-group></struct-specialization><struct name="resizer"><typedef name="result_type"><type>void</type></typedef><method-group name="public member functions"><method name="operator()" cv="const"><type>void</type><template>
          <template-type-parameter name="StateOut"/>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="x1"><paramtype>StateOut &amp;</paramtype></parameter><parameter name="x2"><paramtype>const StateIn &amp;</paramtype></parameter></method><method name="resize_op" cv="const"><type>void</type><template>
          <template-type-parameter name="StateOut"/>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="x1"><paramtype>StateOut &amp;</paramtype></parameter><parameter name="x2"><paramtype>const StateIn &amp;</paramtype></parameter><parameter name=""><paramtype>boost::true_type</paramtype></parameter></method><method name="resize_op" cv="const"><type>void</type><template>
          <template-type-parameter name="StateOut"/>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="x1"><paramtype>StateOut &amp;</paramtype></parameter><parameter name="x2"><paramtype>const StateIn &amp;</paramtype></parameter><parameter name=""><paramtype>boost::false_type</paramtype></parameter></method></method-group></struct><function name="resize"><type>void</type><template>
          <template-type-parameter name="StateOut"/>
          <template-type-parameter name="StateIn"/>
        </template><parameter name="x1"><paramtype>StateOut &amp;</paramtype></parameter><parameter name="x2"><paramtype>const StateIn &amp;</paramtype></parameter></function></namespace></namespace></namespace></header><header name="boost/numeric/odeint/util/resizer.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><struct name="always_resizer"><method-group name="public member functions"><method name="adjust_size" cv=""><type>bool</type><template>
          <template-type-parameter name="State"/>
          <template-type-parameter name="ResizeFunction"/>
        </template><parameter name="x"><paramtype>const State &amp;</paramtype></parameter><parameter name="f"><paramtype>ResizeFunction</paramtype></parameter></method></method-group></struct><struct name="initially_resizer"><data-member name="m_initialized"><type>bool</type></data-member><method-group name="public member functions"><method name="adjust_size" cv=""><type>bool</type><template>
          <template-type-parameter name="State"/>
          <template-type-parameter name="ResizeFunction"/>
        </template><parameter name="x"><paramtype>const State &amp;</paramtype></parameter><parameter name="f"><paramtype>ResizeFunction</paramtype></parameter></method></method-group><constructor/></struct><struct name="never_resizer"><method-group name="public member functions"><method name="adjust_size" cv=""><type>bool</type><template>
          <template-type-parameter name="State"/>
          <template-type-parameter name="ResizeFunction"/>
        </template><parameter name="x"><paramtype>const State &amp;</paramtype></parameter><parameter name="f"><paramtype>ResizeFunction</paramtype></parameter></method></method-group></struct><function name="adjust_size_by_resizeability"><type>bool</type><template>
          <template-type-parameter name="ResizeWrappedState"/>
          <template-type-parameter name="State"/>
        </template><parameter name="x"><paramtype>ResizeWrappedState &amp;</paramtype></parameter><parameter name="y"><paramtype>const State &amp;</paramtype></parameter><parameter name=""><paramtype>boost::true_type</paramtype></parameter></function><function name="adjust_size_by_resizeability"><type>bool</type><template>
          <template-type-parameter name="ResizeWrappedState"/>
          <template-type-parameter name="State"/>
        </template><parameter name=""><paramtype>ResizeWrappedState &amp;</paramtype></parameter><parameter name=""><paramtype>const State &amp;</paramtype></parameter><parameter name=""><paramtype>boost::false_type</paramtype></parameter></function></namespace></namespace></namespace></header><header name="boost/numeric/odeint/util/same_instance.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><struct name="same_instance_impl"><template>
      <template-type-parameter name="T1"/>
      <template-type-parameter name="T2"/>
      <template-type-parameter name="Enabler"><default>void</default></template-type-parameter>
    </template><method-group name="public static functions"><method name="same_instance" cv=""><type>static bool</type><parameter name="x1"><paramtype>const T1 &amp;</paramtype></parameter><parameter name="x2"><paramtype>const T2 &amp;</paramtype></parameter></method></method-group></struct><struct-specialization name="same_instance_impl"><template>
      <template-type-parameter name="T"/>
    </template><specialization><template-arg>T</template-arg><template-arg>T</template-arg></specialization><method-group name="public static functions"><method name="same_instance" cv=""><type>static bool</type><parameter name="x1"><paramtype>const T &amp;</paramtype></parameter><parameter name="x2"><paramtype>const T &amp;</paramtype></parameter></method></method-group></struct-specialization><function name="same_instance"><type>bool</type><template>
          <template-type-parameter name="T1"/>
          <template-type-parameter name="T2"/>
        </template><parameter name="x1"><paramtype>const T1 &amp;</paramtype></parameter><parameter name="x2"><paramtype>const T2 &amp;</paramtype></parameter></function></namespace></namespace></namespace></header><header name="boost/numeric/odeint/util/same_size.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><struct name="same_size_impl"><template>
      <template-type-parameter name="State1"/>
      <template-type-parameter name="State2"/>
      <template-type-parameter name="Enabler"><default>void</default></template-type-parameter>
    </template><method-group name="public static functions"><method name="same_size" cv=""><type>static bool</type><parameter name="x1"><paramtype>const State1 &amp;</paramtype></parameter><parameter name="x2"><paramtype>const State2 &amp;</paramtype></parameter></method></method-group></struct><function name="same_size"><type>bool</type><template>
          <template-type-parameter name="State1"/>
          <template-type-parameter name="State2"/>
        </template><parameter name="x1"><paramtype>const State1 &amp;</paramtype></parameter><parameter name="x2"><paramtype>const State2 &amp;</paramtype></parameter></function></namespace></namespace></namespace></header><header name="boost/numeric/odeint/util/state_wrapper.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><struct name="state_wrapper"><template>
      <template-type-parameter name="V"/>
      <template-type-parameter name="Enabler"><default>void</default></template-type-parameter>
    </template><typedef name="state_wrapper_type"><type>state_wrapper&lt; V &gt;</type></typedef><data-member name="m_v"><type>V</type></data-member></struct></namespace></namespace></namespace></header><header name="boost/numeric/odeint/util/ublas_wrapper.hpp"><namespace name="boost"><struct-specialization name="range_const_iterator"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="L"/>
      <template-type-parameter name="A"/>
    </template><specialization><template-arg>boost::numeric::ublas::matrix&lt; T</template-arg><template-arg>L</template-arg><template-arg>A &gt;</template-arg></specialization><typedef name="type"><type>boost::numeric::ublas::matrix&lt; T, L, A &gt;::array_type::const_iterator</type></typedef></struct-specialization><struct-specialization name="range_mutable_iterator"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="L"/>
      <template-type-parameter name="A"/>
    </template><specialization><template-arg>boost::numeric::ublas::matrix&lt; T</template-arg><template-arg>L</template-arg><template-arg>A &gt;</template-arg></specialization><typedef name="type"><type>boost::numeric::ublas::matrix&lt; T, L, A &gt;::array_type::iterator</type></typedef></struct-specialization><namespace name="numeric"><namespace name="odeint"><struct-specialization name="is_resizeable"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="L"/>
      <template-type-parameter name="A"/>
    </template><specialization><template-arg>boost::numeric::ublas::matrix&lt; T</template-arg><template-arg>L</template-arg><template-arg>A &gt;</template-arg></specialization><typedef name="type"><type>boost::true_type</type></typedef><data-member name="value" specifiers="static"><type>const bool</type></data-member></struct-specialization><struct-specialization name="is_resizeable"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="A"/>
    </template><specialization><template-arg>boost::numeric::ublas::permutation_matrix&lt; T</template-arg><template-arg>A &gt;</template-arg></specialization><typedef name="type"><type>boost::true_type</type></typedef><data-member name="value" specifiers="static"><type>const bool</type></data-member></struct-specialization><struct-specialization name="is_resizeable"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="A"/>
    </template><specialization><template-arg>boost::numeric::ublas::vector&lt; T</template-arg><template-arg>A &gt;</template-arg></specialization><typedef name="type"><type>boost::true_type</type></typedef><data-member name="value" specifiers="static"><type>const bool</type></data-member></struct-specialization><struct-specialization name="resize_impl"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="L"/>
      <template-type-parameter name="A"/>
      <template-type-parameter name="T2"/>
      <template-type-parameter name="L2"/>
      <template-type-parameter name="A2"/>
    </template><specialization><template-arg>boost::numeric::ublas::matrix&lt; T</template-arg><template-arg>L</template-arg><template-arg>A &gt;</template-arg><template-arg>boost::numeric::ublas::matrix&lt; T2</template-arg><template-arg>L2</template-arg><template-arg>A2 &gt;</template-arg></specialization><method-group name="public static functions"><method name="resize" cv=""><type>static void</type><parameter name="m1"><paramtype>boost::numeric::ublas::matrix&lt; T, L, A &gt; &amp;</paramtype></parameter><parameter name="m2"><paramtype>const boost::numeric::ublas::matrix&lt; T2, L2, A2 &gt; &amp;</paramtype></parameter></method></method-group></struct-specialization><struct-specialization name="resize_impl"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="L"/>
      <template-type-parameter name="A"/>
      <template-type-parameter name="T_V"/>
      <template-type-parameter name="A_V"/>
    </template><specialization><template-arg>boost::numeric::ublas::matrix&lt; T</template-arg><template-arg>L</template-arg><template-arg>A &gt;</template-arg><template-arg>boost::numeric::ublas::vector&lt; T_V</template-arg><template-arg>A_V &gt;</template-arg></specialization><method-group name="public static functions"><method name="resize" cv=""><type>static void</type><parameter name="m"><paramtype>boost::numeric::ublas::matrix&lt; T, L, A &gt; &amp;</paramtype></parameter><parameter name="v"><paramtype>const boost::numeric::ublas::vector&lt; T_V, A_V &gt; &amp;</paramtype></parameter></method></method-group></struct-specialization><struct-specialization name="resize_impl"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="A"/>
      <template-type-parameter name="T_V"/>
      <template-type-parameter name="A_V"/>
    </template><specialization><template-arg>boost::numeric::ublas::vector&lt; T_V</template-arg><template-arg>A_V &gt;</template-arg><template-arg>boost::numeric::ublas::permutation_matrix&lt; T</template-arg><template-arg>A &gt;</template-arg></specialization><method-group name="public static functions"><method name="resize" cv=""><type>static void</type><parameter name="v"><paramtype>const boost::numeric::ublas::vector&lt; T_V, A_V &gt; &amp;</paramtype></parameter><parameter name="m"><paramtype>boost::numeric::ublas::permutation_matrix&lt; T, A &gt; &amp;</paramtype></parameter></method></method-group></struct-specialization><struct-specialization name="same_size_impl"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="L"/>
      <template-type-parameter name="A"/>
      <template-type-parameter name="T2"/>
      <template-type-parameter name="L2"/>
      <template-type-parameter name="A2"/>
    </template><specialization><template-arg>boost::numeric::ublas::matrix&lt; T</template-arg><template-arg>L</template-arg><template-arg>A &gt;</template-arg><template-arg>boost::numeric::ublas::matrix&lt; T2</template-arg><template-arg>L2</template-arg><template-arg>A2 &gt;</template-arg></specialization><method-group name="public static functions"><method name="same_size" cv=""><type>static bool</type><parameter name="m1"><paramtype>const boost::numeric::ublas::matrix&lt; T, L, A &gt; &amp;</paramtype></parameter><parameter name="m2"><paramtype>const boost::numeric::ublas::matrix&lt; T2, L2, A2 &gt; &amp;</paramtype></parameter></method></method-group></struct-specialization><struct-specialization name="same_size_impl"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="L"/>
      <template-type-parameter name="A"/>
      <template-type-parameter name="T_V"/>
      <template-type-parameter name="A_V"/>
    </template><specialization><template-arg>boost::numeric::ublas::matrix&lt; T</template-arg><template-arg>L</template-arg><template-arg>A &gt;</template-arg><template-arg>boost::numeric::ublas::vector&lt; T_V</template-arg><template-arg>A_V &gt;</template-arg></specialization><method-group name="public static functions"><method name="same_size" cv=""><type>static bool</type><parameter name="m"><paramtype>const boost::numeric::ublas::matrix&lt; T, L, A &gt; &amp;</paramtype></parameter><parameter name="v"><paramtype>const boost::numeric::ublas::vector&lt; T_V, A_V &gt; &amp;</paramtype></parameter></method></method-group></struct-specialization><struct-specialization name="same_size_impl"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="A"/>
      <template-type-parameter name="T_V"/>
      <template-type-parameter name="A_V"/>
    </template><specialization><template-arg>boost::numeric::ublas::permutation_matrix&lt; T</template-arg><template-arg>A &gt;</template-arg><template-arg>boost::numeric::ublas::vector&lt; T_V</template-arg><template-arg>A_V &gt;</template-arg></specialization><method-group name="public static functions"><method name="same_size" cv=""><type>static bool</type><parameter name="m"><paramtype>const boost::numeric::ublas::permutation_matrix&lt; T, A &gt; &amp;</paramtype></parameter><parameter name="v"><paramtype>const boost::numeric::ublas::vector&lt; T_V, A_V &gt; &amp;</paramtype></parameter></method></method-group></struct-specialization><struct-specialization name="state_wrapper"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="A"/>
    </template><specialization><template-arg>boost::numeric::ublas::permutation_matrix&lt; T</template-arg><template-arg>A &gt;</template-arg></specialization><typedef name="state_type"><type>boost::numeric::ublas::permutation_matrix&lt; T, A &gt;</type></typedef><typedef name="state_wrapper_type"><type>state_wrapper&lt; state_type &gt;</type></typedef><data-member name="m_v"><type>state_type</type></data-member><method-group name="public member functions"><method name="state_wrapper" cv=""><type/></method></method-group></struct-specialization></namespace><namespace name="ublas"><function name="range_begin"><type>matrix&lt; T, L, A &gt;::array_type::iterator</type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="L"/>
          <template-type-parameter name="A"/>
        </template><parameter name="x"><paramtype>matrix&lt; T, L, A &gt; &amp;</paramtype></parameter></function><function name="range_begin"><type>matrix&lt; T, L, A &gt;::array_type::const_iterator</type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="L"/>
          <template-type-parameter name="A"/>
        </template><parameter name="x"><paramtype>const matrix&lt; T, L, A &gt; &amp;</paramtype></parameter></function><function name="range_end"><type>matrix&lt; T, L, A &gt;::array_type::iterator</type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="L"/>
          <template-type-parameter name="A"/>
        </template><parameter name="x"><paramtype>matrix&lt; T, L, A &gt; &amp;</paramtype></parameter></function><function name="range_end"><type>matrix&lt; T, L, A &gt;::array_type::const_iterator</type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="L"/>
          <template-type-parameter name="A"/>
        </template><parameter name="x"><paramtype>const matrix&lt; T, L, A &gt; &amp;</paramtype></parameter></function></namespace></namespace></namespace></header><header name="boost/numeric/odeint/util/unit_helper.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><struct name="inverse_time"><template>
      <template-type-parameter name="Time"/>
    </template><typedef name="type"><type>Time</type></typedef></struct><struct-specialization name="inverse_time"><template>
      <template-type-parameter name="Unit"/>
      <template-type-parameter name="Value"/>
    </template><specialization><template-arg>boost::units::quantity&lt; Unit</template-arg><template-arg>Value &gt;</template-arg></specialization><typedef name="dimension"><type>boost::units::get_dimension&lt; time_type &gt;::type</type></typedef><typedef name="inv_dimension"><type>boost::mpl::divides&lt; boost::units::dimensionless_type, dimension &gt;::type</type></typedef><typedef name="inv_unit"><type>boost::units::unit&lt; inv_dimension, system &gt;</type></typedef><typedef name="system"><type>boost::units::get_system&lt; time_type &gt;::type</type></typedef><typedef name="time_type"><type>boost::units::quantity&lt; Unit, Value &gt;</type></typedef><typedef name="type"><type>boost::units::quantity&lt; inv_unit, Value &gt;</type></typedef></struct-specialization><struct name="unit_value_type"><template>
      <template-type-parameter name="T"/>
    </template><typedef name="type"><type>T</type></typedef></struct><struct-specialization name="unit_value_type"><template>
      <template-type-parameter name="Unit"/>
      <template-type-parameter name="Y"/>
    </template><specialization><template-arg>boost::units::quantity&lt; Unit</template-arg><template-arg>Y &gt;</template-arg></specialization><typedef name="type"><type>Y</type></typedef></struct-specialization><function name="get_unit_value"><type><emphasis>unspecified</emphasis></type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="t"><paramtype>const T &amp;</paramtype></parameter></function><function name="set_unit_value"><type>void</type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="V"/>
        </template><parameter name="t"><paramtype>T &amp;</paramtype></parameter><parameter name="v"><paramtype>const V &amp;</paramtype></parameter></function></namespace></namespace></namespace></header><header name="boost/numeric/odeint/util/unwrap_reference.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"/></namespace></namespace></header><header name="boost/numeric/odeint/version.hpp"><namespace name="boost"><namespace name="numeric"><namespace name="odeint"><namespace name="version"><data-member name="major"><type>const int</type></data-member><data-member name="minor"><type>const int</type></data-member><data-member name="patch_level"><type>const int</type></data-member></namespace><function name="get_version_string"><type>std::string</type><parameter name=""><paramtype>void</paramtype></parameter></function></namespace></namespace></namespace><macro name="ODEINT_MAJOR_VERSION"/><macro name="ODEINT_MINOR_VERSION"/><macro name="ODEINT_PATCH_LEVEL"/><macro name="ODEINT_VERSION"/></header></library-reference>
